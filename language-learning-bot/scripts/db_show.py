"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π –≤ MongoDB
"""

import asyncio
from motor.motor_asyncio import AsyncIOMotorClient
from typing import List, Dict, Any

class MongoDBExplorer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã MongoDB."""
    
    def __init__(self, mongodb_url: str = "mongodb://localhost:27027"):
        self.client = AsyncIOMotorClient(mongodb_url)
    
    async def list_all_databases(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        print("üìä MONGODB DATABASES:")
        print("=" * 60)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
            db_list = await self.client.list_database_names()
            
            print(f"Found {len(db_list)} databases:\n")
            
            for db_name in db_list:
                db = self.client[db_name]
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    stats = await db.command("dbStats")
                    
                    size_mb = stats.get('dataSize', 0) / 1024 / 1024
                    collections_count = stats.get('collections', 0)
                    
                    print(f"üìÅ {db_name}")
                    print(f"   Size: {size_mb:.2f} MB")
                    print(f"   Collections: {collections_count}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                    collections = await db.list_collection_names()
                    if collections:
                        print(f"   ‚îî‚îÄ‚îÄ Collections: {', '.join(collections)}")
                    print()
                    
                except Exception as e:
                    print(f"üìÅ {db_name}")
                    print(f"   ‚ùå Error getting stats: {e}")
                    print()
            
        except Exception as e:
            print(f"‚ùå Error listing databases: {e}")
    
    async def explore_database(self, db_name: str, show_fields: bool = True, sample_size: int = 100):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        print(f"üîç EXPLORING DATABASE: {db_name}")
        print("=" * 80)
        
        db = self.client[db_name]
        
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            stats = await db.command("dbStats")
            
            print(f"Database: {db_name}")
            print(f"Data Size: {stats.get('dataSize', 0) / 1024 / 1024:.2f} MB")
            print(f"Storage Size: {stats.get('storageSize', 0) / 1024 / 1024:.2f} MB")
            print(f"Index Size: {stats.get('indexSize', 0) / 1024 / 1024:.2f} MB")
            print(f"Collections: {stats.get('collections', 0)}")
            print(f"Documents: {stats.get('objects', 0):,}")
            print()
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º
            collections = await db.list_collection_names()
            
            for collection_name in collections:
                collection = db[collection_name]
                
                try:
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                    coll_stats = await db.command("collStats", collection_name)
                    
                    print(f"üìä Collection: {collection_name}")
                    print(f"   Documents: {coll_stats.get('count', 0):,}")
                    print(f"   Size: {coll_stats.get('size', 0) / 1024 / 1024:.2f} MB")
                    print(f"   Avg doc size: {coll_stats.get('avgObjSize', 0):.0f} bytes")
                    
                    # –ò–Ω–¥–µ–∫—Å—ã
                    indexes = await collection.list_indexes().to_list(length=None)
                    print(f"   Indexes: {len(indexes)}")
                    for idx in indexes:
                        idx_name = idx.get('name', 'unnamed')
                        idx_keys = list(idx.get('key', {}).keys())
                        print(f"     ‚Ä¢ {idx_name}: {', '.join(idx_keys)}")
                    
                    # –ù–û–í–û–ï: –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π –∏ —Ç–∏–ø–æ–≤
                    if show_fields:
                        await self._analyze_collection_schema(collection, collection_name, sample_size)
                    
                    print()
                    
                except Exception as e:
                    print(f"üìä Collection: {collection_name}")
                    print(f"   ‚ùå Error: {e}")
                    print()
            
        except Exception as e:
            print(f"‚ùå Error exploring database: {e}")
    
    async def _analyze_collection_schema(self, collection, collection_name: str, sample_size: int = 100):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏ - –ø–æ–ª—è –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö."""
        print(f"   üìã Schema Analysis (sample size: {sample_size}):")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º sample –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            sample_docs = await collection.aggregate([
                {"$sample": {"size": sample_size}},
                {"$limit": sample_size}
            ]).to_list(length=sample_size)
            
            if not sample_docs:
                print("     ‚ö†Ô∏è  No documents found")
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è –∏ —Ç–∏–ø—ã
            field_analysis = {}
            
            for doc in sample_docs:
                self._analyze_document_fields(doc, field_analysis, "")
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            self._print_field_analysis(field_analysis, len(sample_docs))
            
        except Exception as e:
            print(f"     ‚ùå Schema analysis error: {e}")
    
    def _analyze_document_fields(self, doc: dict, field_analysis: dict, prefix: str = ""):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        for key, value in doc.items():
            field_path = f"{prefix}.{key}" if prefix else key
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è
            field_type = self._get_field_type(value)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—è
            if field_path not in field_analysis:
                field_analysis[field_path] = {
                    'types': {},
                    'null_count': 0,
                    'sample_values': set(),
                    'min_length': None,
                    'max_length': None
                }
            
            field_info = field_analysis[field_path]
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã
            if value is None:
                field_info['null_count'] += 1
            else:
                if field_type not in field_info['types']:
                    field_info['types'][field_type] = 0
                field_info['types'][field_type] += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ)
                if len(field_info['sample_values']) < 3:
                    if isinstance(value, (str, int, float, bool)):
                        field_info['sample_values'].add(str(value)[:50])
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª–∏–Ω—É –¥–ª—è —Å—Ç—Ä–æ–∫
                if isinstance(value, str):
                    length = len(value)
                    if field_info['min_length'] is None or length < field_info['min_length']:
                        field_info['min_length'] = length
                    if field_info['max_length'] is None or length > field_info['max_length']:
                        field_info['max_length'] = length
                
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                if isinstance(value, dict):
                    self._analyze_document_fields(value, field_analysis, field_path)
                elif isinstance(value, list) and value and isinstance(value[0], dict):
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤
                    self._analyze_document_fields(value[0], field_analysis, f"{field_path}[]")
    
    def _get_field_type(self, value):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–ª—è."""
        if value is None:
            return "null"
        elif isinstance(value, bool):
            return "boolean"
        elif isinstance(value, int):
            return "integer"
        elif isinstance(value, float):
            return "float"
        elif isinstance(value, str):
            return "string"
        elif isinstance(value, list):
            if not value:
                return "array(empty)"
            else:
                element_type = self._get_field_type(value[0])
                return f"array({element_type})"
        elif isinstance(value, dict):
            return "object"
        elif hasattr(value, '__class__') and 'ObjectId' in str(type(value)):
            return "ObjectId"
        elif hasattr(value, '__class__') and 'datetime' in str(type(value)):
            return "datetime"
        else:
            return str(type(value).__name__)
    
    def _print_field_analysis(self, field_analysis: dict, total_docs: int):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–µ–π."""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—è –ø–æ –∏–º–µ–Ω–∏
        sorted_fields = sorted(field_analysis.items())
        
        for field_path, field_info in sorted_fields:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è
            total_non_null = sum(field_info['types'].values())
            frequency = (total_non_null / total_docs) * 100
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª–µ
            print(f"     üî∏ {field_path}")
            print(f"       Frequency: {frequency:.1f}% ({total_non_null}/{total_docs})")
            
            # –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            if field_info['types']:
                types_str = ', '.join([f"{t}({c})" for t, c in field_info['types'].items()])
                print(f"       Types: {types_str}")
            
            # Null –∑–Ω–∞—á–µ–Ω–∏—è
            if field_info['null_count'] > 0:
                null_pct = (field_info['null_count'] / total_docs) * 100
                print(f"       Nulls: {field_info['null_count']} ({null_pct:.1f}%)")
            
            # –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫
            if field_info['min_length'] is not None:
                print(f"       Length: {field_info['min_length']}-{field_info['max_length']} chars")
            
            # –ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π
            if field_info['sample_values']:
                examples = ', '.join(list(field_info['sample_values'])[:3])
                print(f"       Examples: {examples}")
            
            print()
    
    async def analyze_collection_detailed(self, db_name: str, collection_name: str, sample_size: int = 500):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏."""
        print(f"üî¨ DETAILED COLLECTION ANALYSIS: {db_name}.{collection_name}")
        print("=" * 80)
        
        db = self.client[db_name]
        collection = db[collection_name]
        
        try:
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_docs = await collection.count_documents({})
            print(f"Total documents: {total_docs:,}")
            
            if total_docs == 0:
                print("‚ö†Ô∏è  Collection is empty")
                return
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            coll_stats = await db.command("collStats", collection_name)
            print(f"Collection size: {coll_stats.get('size', 0) / 1024 / 1024:.2f} MB")
            print(f"Average document size: {coll_stats.get('avgObjSize', 0):.0f} bytes")
            print()
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º—ã
            await self._analyze_collection_schema(collection, collection_name, min(sample_size, total_docs))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            print(f"üìÑ Sample Documents (first 2):")
            sample_docs = await collection.find().limit(2).to_list(length=2)
            
            for i, doc in enumerate(sample_docs, 1):
                print(f"   Document {i}:")
                self._print_document_pretty(doc, indent="     ")
                print()
            
        except Exception as e:
            print(f"‚ùå Error analyzing collection: {e}")
    
    def _print_document_pretty(self, doc: dict, indent: str = ""):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        for key, value in doc.items():
            if isinstance(value, dict):
                print(f"{indent}{key}: {{")
                self._print_document_pretty(value, indent + "  ")
                print(f"{indent}}}")
            elif isinstance(value, list):
                print(f"{indent}{key}: [{len(value)} items]")
                if value and not isinstance(value[0], (dict, list)):
                    preview = str(value[:3])[1:-1]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞
                    print(f"{indent}  Preview: {preview}")
            else:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                str_value = str(value)
                if len(str_value) > 50:
                    str_value = str_value[:47] + "..."
                print(f"{indent}{key}: {str_value} ({type(value).__name__})")
    
    async def show_database_sizes(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö."""
        print("üìè DATABASE SIZES:")
        print("=" * 40)
        
        try:
            db_list = await self.client.list_database_names()
            
            total_size = 0
            db_sizes = []
            
            for db_name in db_list:
                db = self.client[db_name]
                try:
                    stats = await db.command("dbStats")
                    size_mb = stats.get('dataSize', 0) / 1024 / 1024
                    db_sizes.append((db_name, size_mb))
                    total_size += size_mb
                except:
                    db_sizes.append((db_name, 0))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
            db_sizes.sort(key=lambda x: x[1], reverse=True)
            
            for db_name, size_mb in db_sizes:
                percentage = (size_mb / total_size * 100) if total_size > 0 else 0
                print(f"{db_name:25} {size_mb:8.2f} MB ({percentage:5.1f}%)")
            
            print("-" * 40)
            print(f"{'TOTAL':25} {total_size:8.2f} MB")
            
        except Exception as e:
            print(f"‚ùå Error: {e}")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
        self.client.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def show_all_databases(mongodb_url: str = "mongodb://localhost:27027"):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    explorer = MongoDBExplorer(mongodb_url)
    try:
        await explorer.list_all_databases()
    finally:
        await explorer.close()

async def explore_specific_database(db_name: str, mongodb_url: str = "mongodb://localhost:27027", show_fields: bool = True):
    """–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    explorer = MongoDBExplorer(mongodb_url)
    try:
        await explorer.explore_database(db_name, show_fields=show_fields)
    finally:
        await explorer.close()

async def analyze_collection(db_name: str, collection_name: str, mongodb_url: str = "mongodb://localhost:27027", sample_size: int = 500):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏."""
    explorer = MongoDBExplorer(mongodb_url)
    try:
        await explorer.analyze_collection_detailed(db_name, collection_name, sample_size)
    finally:
        await explorer.close()

async def show_database_sizes(mongodb_url: str = "mongodb://localhost:27027"):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö."""
    explorer = MongoDBExplorer(mongodb_url)
    try:
        await explorer.show_database_sizes()
    finally:
        await explorer.close()

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏
def list_databases():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ë–î."""
    asyncio.run(show_all_databases())

def explore_database(db_name: str, show_fields: bool = True):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ë–î."""
    asyncio.run(explore_specific_database(db_name, show_fields=show_fields))

def analyze_collection(db_name: str, collection_name: str, sample_size: int = 500):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏."""
    asyncio.run(analyze_collection(db_name, collection_name, sample_size=sample_size))

def database_sizes():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ –ë–î."""
    asyncio.run(show_database_sizes())

if __name__ == "__main__":
    print("üí° MongoDB Database Explorer")
    print("=" * 40)
    print("Available functions:")
    print("  list_databases() - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ë–î")
    print("  explore_database('db_name', show_fields=True) - –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ë–î —Å –ø–æ–ª—è–º–∏")
    print("  analyze_collection('db_name', 'collection_name') - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
    print("  database_sizes() - —Ä–∞–∑–º–µ—Ä—ã –ë–î")
    print()
    print("Examples:")
    print("  explore_database('language_learning_bot')")
    print("  analyze_collection('language_learning_bot', 'user_statistics')")
    print()
    
    # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:
    # list_databases()
    explore_database("language_learning_bot")
    # analyze_collection("language_learning_bot", "user_statistics")
    # database_sizes()
