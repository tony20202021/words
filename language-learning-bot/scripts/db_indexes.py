"""
–°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ MongoDB.
–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã.
"""

import asyncio
import logging
from motor.motor_asyncio import AsyncIOMotorClient
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

class DatabaseIndexOptimizer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞–º–∏ MongoDB."""
    
    def __init__(self, mongodb_url: str, database_name: str):
        self.client = AsyncIOMotorClient(mongodb_url)
        self.db = self.client[database_name]
    
    async def analyze_current_indexes(self):
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –≤–æ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö."""
        
        print("üîç Analyzing current MongoDB indexes...")
        print("=" * 80)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
        collections = await self.db.list_collection_names()
        print(f"üìã Found {len(collections)} collections: {', '.join(collections)}\n")
        
        total_indexes = 0
        
        for collection_name in collections:
            collection = self.db[collection_name]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–¥–µ–∫—Å–∞—Ö
            indexes = await collection.list_indexes().to_list(length=None)
            
            print(f"üìä Collection: {collection_name}")
            print(f"   Indexes count: {len(indexes)}")
            
            if indexes:
                for idx in indexes:
                    index_name = idx.get('name', 'unnamed')
                    index_keys = idx.get('key', {})
                    index_options = {k: v for k, v in idx.items() if k not in ['name', 'key', 'v', 'ns']}
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –∏–Ω–¥–µ–∫—Å–∞
                    keys_str = ', '.join([f"{k}: {v}" for k, v in index_keys.items()])
                    
                    print(f"   ‚Ä¢ {index_name}")
                    print(f"     Keys: {{{keys_str}}}")
                    
                    if index_options:
                        options_str = ', '.join([f"{k}: {v}" for k, v in index_options.items()])
                        print(f"     Options: {{{options_str}}}")
                    
                    print()
                
                total_indexes += len(indexes)
            else:
                print("   No indexes found")
            
            print("-" * 60)
        
        print(f"\nüìà Total indexes across all collections: {total_indexes}")
        print("=" * 80)
        
        return collections, total_indexes

    async def create_all_indexes(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        
        print("üöÄ Starting MongoDB index optimization...")
        
        # –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã
        await self.analyze_current_indexes()
        
        print("\nüõ†Ô∏è  Creating new optimized indexes...")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        await self._create_user_statistics_indexes()
        await self._create_words_indexes()
        await self._create_languages_indexes()
        await self._create_users_indexes()
        await self._create_user_language_settings_indexes()
        
        print("‚úÖ All indexes created successfully!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
        print("\nüéØ FINAL INDEXES REPORT:")
        await self.analyze_current_indexes()
    
    async def _create_user_statistics_indexes(self):
        """
        –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ user_statistics.
        –≠—Ç–∏ –∏–Ω–¥–µ–∫—Å—ã –¥–∞—é—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        """
        collection = self.db.user_statistics
        print("\nüìä Creating user_statistics indexes...")
        
        indexes_to_create = [
            # 1. –û–°–ù–û–í–ù–û–ô —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è get_by_user_id
            {
                "keys": [("user_id", 1), ("language_id", 1), ("updated_at", -1)],
                "name": "user_lang_updated_idx",
                "background": True
            },
            
            # 2. –£–ù–ò–ö–ê–õ–¨–ù–´–ô –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            {
                "keys": [("user_id", 1), ("word_id", 1)],
                "name": "user_word_unique_idx", 
                "unique": True,
                "background": True
            },
            
            # 3. –ò–Ω–¥–µ–∫—Å –¥–ª—è get_words_for_review (–∫—Ä–∏—Ç–∏—á–Ω—ã–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
            {
                "keys": [("user_id", 1), ("language_id", 1), ("next_check_date", 1)],
                "name": "user_lang_review_idx",
                "background": True
            },
            
            # 4. –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ score
            {
                "keys": [("user_id", 1), ("language_id", 1), ("score", 1)],
                "name": "user_lang_score_idx", 
                "background": True
            },
            
            # 5. –ò–Ω–¥–µ–∫—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
            {
                "keys": [("user_id", 1), ("language_id", 1), ("is_skipped", 1)],
                "name": "user_lang_skipped_idx",
                "background": True
            },
            
            # 6. –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ word_id (–¥–ª—è JOIN –æ–ø–µ—Ä–∞—Ü–∏–π)
            {
                "keys": [("word_id", 1)],
                "name": "word_id_idx",
                "background": True
            },
            
            # 7. –ò–Ω–¥–µ–∫—Å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
            {
                "keys": [("user_id", 1), ("updated_at", -1)],
                "name": "user_activity_idx",
                "background": True
            }
        ]
        
        for index_spec in indexes_to_create:
            try:
                await collection.create_index(
                    index_spec["keys"],
                    name=index_spec["name"],
                    background=index_spec.get("background", True),
                    unique=index_spec.get("unique", False)
                )
                print(f"  ‚úÖ Created: {index_spec['name']}")
            except Exception as e:
                if "already exists" in str(e).lower():
                    print(f"  ‚ö†Ô∏è  Already exists: {index_spec['name']}")
                else:
                    print(f"  ‚ùå Error creating {index_spec['name']}: {e}")
    
    async def _create_words_indexes(self):
        """–ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ words."""
        collection = self.db.words
        print("\nüìù Creating words indexes...")
        
        indexes_to_create = [
            # 1. –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤ –ø–æ —è–∑—ã–∫—É –∏ –Ω–æ–º–µ—Ä—É
            {
                "keys": [("language_id", 1), ("word_number", 1)],
                "name": "lang_word_number_idx",
                "background": True
            },
            
            # 2. –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º—É —Å–ª–æ–≤—É (—É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤ —Ä–∞–º–∫–∞—Ö —è–∑—ã–∫–∞)
            {
                "keys": [("language_id", 1), ("word_foreign", 1)],
                "name": "lang_word_foreign_idx",
                "background": True,
                "unique": True
            },
            
            # 3. –ò–Ω–¥–µ–∫—Å —Ç–æ–ª—å–∫–æ –ø–æ language_id –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ count
            {
                "keys": [("language_id", 1)],
                "name": "language_id_idx",
                "background": True
            }
        ]
        
        for index_spec in indexes_to_create:
            try:
                await collection.create_index(
                    index_spec["keys"],
                    name=index_spec["name"],
                    background=index_spec.get("background", True),
                    unique=index_spec.get("unique", False)
                )
                print(f"  ‚úÖ Created: {index_spec['name']}")
            except Exception as e:
                if "already exists" in str(e).lower():
                    print(f"  ‚ö†Ô∏è  Already exists: {index_spec['name']}")
                else:
                    print(f"  ‚ùå Error creating {index_spec['name']}: {e}")
    
    async def _create_languages_indexes(self):
        """–ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ languages."""
        collection = self.db.languages
        print("\nüåê Creating languages indexes...")
        
        indexes_to_create = [
            # 1. –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ä—É—Å—Å–∫–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
            {
                "keys": [("name_ru", 1)],
                "name": "name_ru_idx",
                "background": True
            },
            
            # 2. –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
            {
                "keys": [("name_foreign", 1)],
                "name": "name_foreign_idx", 
                "background": True
            }
        ]
        
        for index_spec in indexes_to_create:
            try:
                await collection.create_index(
                    index_spec["keys"],
                    name=index_spec["name"],
                    background=index_spec.get("background", True)
                )
                print(f"  ‚úÖ Created: {index_spec['name']}")
            except Exception as e:
                if "already exists" in str(e).lower():
                    print(f"  ‚ö†Ô∏è  Already exists: {index_spec['name']}")
                else:
                    print(f"  ‚ùå Error creating {index_spec['name']}: {e}")
    
    async def _create_users_indexes(self):
        """–ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users."""
        collection = self.db.users
        print("\nüë• Creating users indexes...")
        
        indexes_to_create = [
            # 1. –£–ù–ò–ö–ê–õ–¨–ù–´–ô –∏–Ω–¥–µ–∫—Å –ø–æ telegram_id (–æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            {
                "keys": [("telegram_id", 1)],
                "name": "telegram_id_unique_idx",
                "background": True,
                "unique": True
            },
            
            # 2. –ò–Ω–¥–µ–∫—Å –ø–æ username
            {
                "keys": [("username", 1)],
                "name": "username_idx",
                "background": True
            },
            
            # 3. –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            {
                "keys": [("is_admin", 1)],
                "name": "is_admin_idx",
                "background": True
            }
        ]
        
        for index_spec in indexes_to_create:
            try:
                await collection.create_index(
                    index_spec["keys"],
                    name=index_spec["name"],
                    background=index_spec.get("background", True),
                    unique=index_spec.get("unique", False)
                )
                print(f"  ‚úÖ Created: {index_spec['name']}")
            except Exception as e:
                if "already exists" in str(e).lower():
                    print(f"  ‚ö†Ô∏è  Already exists: {index_spec['name']}")
                else:
                    print(f"  ‚ùå Error creating {index_spec['name']}: {e}")
    
    async def _create_user_language_settings_indexes(self):
        """–ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ user_language_settings."""
        collection = self.db.user_language_settings
        print("\n‚öôÔ∏è  Creating user_language_settings indexes...")
        
        indexes_to_create = [
            # 1. –£–ù–ò–ö–ê–õ–¨–ù–´–ô —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —è–∑—ã–∫—É
            {
                "keys": [("user_id", 1), ("language_id", 1)],
                "name": "user_lang_settings_unique_idx",
                "background": True,
                "unique": True
            },
            
            # 2. –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            {
                "keys": [("user_id", 1)],
                "name": "user_settings_idx",
                "background": True
            }
        ]
        
        for index_spec in indexes_to_create:
            try:
                await collection.create_index(
                    index_spec["keys"],
                    name=index_spec["name"],
                    background=index_spec.get("background", True),
                    unique=index_spec.get("unique", False)
                )
                print(f"  ‚úÖ Created: {index_spec['name']}")
            except Exception as e:
                if "already exists" in str(e).lower():
                    print(f"  ‚ö†Ô∏è  Already exists: {index_spec['name']}")
                else:
                    print(f"  ‚ùå Error creating {index_spec['name']}: {e}")

    async def get_index_usage_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤."""
        print("\nüìà INDEX USAGE STATISTICS:")
        print("=" * 80)
        
        collections = await self.db.list_collection_names()
        
        for collection_name in collections:
            collection = self.db[collection_name]
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
                stats = await self.db.command("collStats", collection_name, indexDetails=True)
                
                print(f"\nüìä Collection: {collection_name}")
                print(f"   Documents: {stats.get('count', 0):,}")
                print(f"   Size: {stats.get('size', 0) / 1024 / 1024:.2f} MB")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
                index_sizes = stats.get('indexSizes', {})
                if index_sizes:
                    print("   Index sizes:")
                    for index_name, size in index_sizes.items():
                        print(f"     ‚Ä¢ {index_name}: {size / 1024 / 1024:.2f} MB")
                
            except Exception as e:
                print(f"   ‚ùå Error getting stats for {collection_name}: {e}")
    
    async def explain_query_performance(self, collection_name: str, query: dict, sort: dict = None):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
        print(f"\nüîç QUERY PERFORMANCE ANALYSIS for {collection_name}:")
        print(f"Query: {query}")
        if sort:
            print(f"Sort: {sort}")
        print("-" * 60)
        
        collection = self.db[collection_name]
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º explain –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            cursor = collection.find(query)
            if sort:
                cursor = cursor.sort(list(sort.items()))
            
            explain_result = await cursor.explain()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            execution_stats = explain_result.get('executionStats', {})
            
            print(f"Execution time: {execution_stats.get('executionTimeMillis', 0)} ms")
            print(f"Documents examined: {execution_stats.get('totalDocsExamined', 0):,}")
            print(f"Documents returned: {execution_stats.get('totalDocsReturned', 0):,}")
            print(f"Index used: {explain_result.get('queryPlanner', {}).get('winningPlan', {}).get('inputStage', {}).get('indexName', 'NO INDEX')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            docs_examined = execution_stats.get('totalDocsExamined', 0)
            docs_returned = execution_stats.get('totalDocsReturned', 0)
            
            if docs_examined > 0 and docs_returned > 0:
                efficiency = docs_returned / docs_examined * 100
                print(f"Query efficiency: {efficiency:.1f}%")
                
                if efficiency < 10:
                    print("‚ö†Ô∏è  WARNING: Low efficiency! Consider adding indexes.")
                elif efficiency < 50:
                    print("üî∂ MODERATE: Query could be optimized.")
                else:
                    print("‚úÖ GOOD: Query is well optimized.")
            
        except Exception as e:
            print(f"‚ùå Error analyzing query: {e}")

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î."""
        await self.client.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
async def analyze_database_indexes(mongodb_url: str = "mongodb://localhost:27027", 
                                 database_name: str = "language_learning_bot"):
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤."""
    
    optimizer = DatabaseIndexOptimizer(mongodb_url, database_name)
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã
        await optimizer.analyze_current_indexes()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await optimizer.get_index_usage_stats()
        
        # –ü—Ä–∏–º–µ—Ä—ã –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        print("\nüéØ ANALYZING CRITICAL QUERIES:")
        
        # 1. –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await optimizer.explain_query_performance(
            "user_statistics",
            {"user_id": "example_user", "language_id": "example_lang"},
            {"updated_at": -1}
        )
        
        # 2. –ó–∞–ø—Ä–æ—Å —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
        await optimizer.explain_query_performance(
            "words", 
            {"language_id": "example_lang", "word_number": {"$gte": 1}},
            {"word_number": 1}
        )
        
    finally:
        await optimizer.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
async def optimize_database_indexes(mongodb_url: str = "mongodb://localhost:27027",
                                  database_name: str = "language_learning_bot"):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤."""
    
    optimizer = DatabaseIndexOptimizer(mongodb_url, database_name)
    
    try:
        await optimizer.create_all_indexes()
    finally:
        await optimizer.close()

# –ü—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π runner –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
def run_analysis():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–¥–µ–∫—Å–æ–≤."""
    asyncio.run(analyze_database_indexes())

def run_optimization():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤."""
    asyncio.run(optimize_database_indexes())

if __name__ == "__main__":
    print("üí° MongoDB Index Optimizer")
    print("=" * 50)
    print("Available functions:")
    print("  run_analysis() - –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤")
    print("  run_optimization() - —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤")
    print()
    print("Or use async versions:")
    print("  analyze_database_indexes()")
    print("  optimize_database_indexes()")
    
    # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:
    run_analysis()
    # run_optimization()
