"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ Bot Test Framework.
"""

import inspect
import importlib
import re
import traceback
from typing import Dict, Callable, Any, List
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command


def print_handler_summary(command_handlers, callback_handlers, api_client):
    """
    –í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
    
    Args:
        command_handlers: –°–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        callback_handlers: –°–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback
        api_client: –°—Å—ã–ª–∫–∞ –Ω–∞ API –∫–ª–∏–µ–Ω—Ç
    """
    command_count = len(command_handlers)
    callback_count = len(callback_handlers)
    
    print("\n" + "="*70)
    print(f"ü§ñ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {command_count} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥:")
    
    if command_count > 0:
        for i, (cmd, handler) in enumerate(sorted(command_handlers.items())):
            print(f"   {i+1}. /{cmd} ‚Üí {handler.__name__}")
    else:
        print("   –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥")
    
    print("\nüì± –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {0} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback:".format(callback_count))
    
    if callback_count > 0:
        for i, (callback_data, handler) in enumerate(sorted(callback_handlers.items())):
            if callback_data.startswith("startswith:"):
                prefix = callback_data.split(":", 1)[1]
                print(f"   {i+1}. {prefix}* ‚Üí {handler.__name__} (–ø—Ä–µ—Ñ–∏–∫—Å)")
            else:
                print(f"   {i+1}. {callback_data} ‚Üí {handler.__name__}")
    else:
        print("   –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback")
    
    print("\nüåê API –∫–ª–∏–µ–Ω—Ç: " + ("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if api_client else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"))
    print("="*70 + "\n")

def print_router_structure(context):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ –∏ —Ä–æ—É—Ç–µ—Ä–∞—Ö
    —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    """
    print("\n=== –ü–û–î–†–û–ë–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –†–û–£–¢–ï–†–û–í ===")
    
    if not hasattr(context, 'all_routers') or not context.all_routers:
        print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
        return
    
    # –í—ã–≤–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞–∂–¥–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
    for i, router in enumerate(context.all_routers):
        router_name = getattr(router, 'name', f"Router#{i+1}")
        print(f"\nüìå –†–æ—É—Ç–µ—Ä #{i+1}: {router_name} ({router})")
        
        # –í—ã–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        if hasattr(router, 'message') and hasattr(router.message, 'handlers'):
            handlers_count = len(router.message.handlers)
            print(f"  üì® –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ({handlers_count}):")
            
            for j, handler in enumerate(router.message.handlers):
                handler_name = handler.callback.__name__ if hasattr(handler, 'callback') else "unknown"
                print(f"    üí¨ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ #{j+1}: {handler_name}")
                
                # –í—ã–≤–æ–¥ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                if hasattr(handler, 'filters') and handler.filters:
                    # print(f"      üîç –§–∏–ª—å—Ç—Ä—ã ({len(handler.filters)}):")
                    for k, filter_obj in enumerate(handler.filters):
                        filter_type = filter_obj.__class__.__name__
                        # print(f"        ‚Ä¢ –§–∏–ª—å—Ç—Ä #{k+1}: {filter_type}")
                        
                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥
                        if hasattr(filter_obj, 'commands'):
                            print(f"          üõ†Ô∏è –ö–æ–º–∞–Ω–¥—ã: {', '.join(filter_obj.commands)}")
                
                        if hasattr(filter_obj, 'states'):
                            print(f"          üõ†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏—è:")
                            for state in filter_obj.states:
                                print(f" - Group: {state.group.__name__}, name: {state.name}. State: {state.state}")

                        if hasattr(filter_obj, 'callback') and filter_obj.callback:
                            if isinstance(filter_obj.callback, Command):
                                print(f"\t–∫–æ–º–∞–Ω–¥–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä: {filter_obj.callback.commands}")
                            elif isinstance(filter_obj.callback, State):
                                state = filter_obj.callback
                                state_name = state.state
                                print(f"\t–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {state_name}")

                # –í—ã–≤–æ–¥ —Ñ–ª–∞–≥–æ–≤ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç aiogram)
                if hasattr(handler, 'flags') and handler.flags:
                    print(f"      üèÅ –§–ª–∞–≥–∏:")
                    for flag_name, flag_values in handler.flags.items():
                        print(f"        ‚Ä¢ {flag_name}: {flag_values}")
        
        # –í—ã–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        if hasattr(router, 'callback_query') and hasattr(router.callback_query, 'handlers'):
            handlers_count = len(router.callback_query.handlers)
            print(f"\n  üîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ ({handlers_count}):")
            
            for j, handler in enumerate(router.callback_query.handlers):
                handler_name = handler.callback.__name__ if hasattr(handler, 'callback') else "unknown"
                print(f"    ‚ö° –û–±—Ä–∞–±–æ—Ç—á–∏–∫ #{j+1}: {handler_name}")
                
                # –í—ã–≤–æ–¥ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                if hasattr(handler, 'filters') and handler.filters:
                    print(f"      üîç –§–∏–ª—å—Ç—Ä—ã ({len(handler.filters)}):")
                    for k, filter_obj in enumerate(handler.filters):
                        filter_type = filter_obj.__class__.__name__
                        print(f"        ‚Ä¢ –§–∏–ª—å—Ç—Ä #{k+1}: {filter_type}")
                        
                        # –í—ã–≤–æ–¥ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ (F.data)
                        if hasattr(filter_obj, 'magic'):
                            print(f"          üîÆ Magic: {filter_obj.magic}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"  üìö –í—Å–µ–≥–æ —Ä–æ—É—Ç–µ—Ä–æ–≤: {len(context.all_routers)}")
    print("=== –ö–û–ù–ï–¶ –°–¢–†–£–ö–¢–£–†–´ –†–û–£–¢–ï–†–û–í ===\n")
    
def print_handlers_structure(context):
    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥

    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í:")

    command_count = len(context.command_handlers) if hasattr(context, 'command_handlers') else 0
    print(f"\n  ü§ñ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ({command_count}):")
    
    if command_count > 0:
        for i, (cmd, handler) in enumerate(sorted(context.command_handlers.items())):
            print(f"    {i+1}. /{cmd} ‚Üí {handler.__name__}")
    else:
        print("    –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥")
    
    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback
    callback_count = len(context.callback_handlers) if hasattr(context, 'callback_handlers') else 0
    print(f"\n  üì± –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback ({callback_count}):")
    
    if callback_count > 0:
        for i, (callback_data, handler) in enumerate(sorted(context.callback_handlers.items())):
            if callback_data.startswith("startswith:"):
                prefix = callback_data.split(":", 1)[1]
                print(f"    {i+1}. {prefix}* ‚Üí {handler.__name__} (–ø—Ä–µ—Ñ–∏–∫—Å)")
            else:
                print(f"    {i+1}. {callback_data} ‚Üí {handler.__name__}")
    else:
        print("    –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback")
    
    print("=== –ö–û–ù–ï–¶ –°–¢–†–£–ö–¢–£–†–´ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ===\n")

def print_api_structure(context):
    # –í—ã–≤–æ–¥ API –∫–ª–∏–µ–Ω—Ç–∞
    api_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if context.api_client else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    print(f"\n  üåê API –∫–ª–∏–µ–Ω—Ç: {api_status}")
    

def collect_sub_routers(router, routers_list):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –ø–æ–¥—Ä–æ—É—Ç–µ—Ä—ã –∏–∑ —Ä–æ—É—Ç–µ—Ä–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
    
    Args:
        router: –û–±—ä–µ–∫—Ç Router
        routers_list: –°–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    """
    if hasattr(router, 'sub_routers'):
        for sub_router in router.sub_routers:
            if sub_router not in routers_list:
                routers_list.append(sub_router)
                # print(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥—Ä–æ—É—Ç–µ—Ä: {sub_router}")
                collect_sub_routers(sub_router, routers_list)
                
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ dir –∏ getattr (–¥–ª—è aiogram 3.x)
    for attr_name in dir(router):
        if attr_name == 'sub_routers':
            continue  # –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –≤—ã—à–µ
        
        try:
            attr = getattr(router, attr_name)
            if isinstance(attr, router.__class__) and attr not in routers_list:
                routers_list.append(attr)
                # print(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥—Ä–æ—É—Ç–µ—Ä —á–µ—Ä–µ–∑ –∞—Ç—Ä–∏–±—É—Ç {attr_name}: {attr}")
                collect_sub_routers(attr, routers_list)
        except Exception:
            pass


def import_submodule_handlers(base_module_path, submodule_dir, routers_list):
    """
    –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –ø–æ–¥–º–æ–¥—É–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, study –∏–ª–∏ admin)
    
    Args:
        base_module_path: –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –º–æ–¥—É–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'app.bot.handlers')
        submodule_dir: –ò–º—è –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞ —Å –ø–æ–¥–º–æ–¥—É–ª—è–º–∏ ('study', 'admin')
        routers_list: –°–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤
    """
    if not base_module_path.endswith(submodule_dir):
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Å –ø–æ–¥–º–æ–¥—É–ª—è–º–∏
            submodule_path = f"{base_module_path}.{submodule_dir}"
            print(f"–ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–º–æ–¥—É–ª–∏ –∏–∑ {submodule_path}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞
            submodule = _import_module(submodule_path)
            
            # –ò—â–µ–º —Ä–æ—É—Ç–µ—Ä—ã –≤ –º–æ–¥—É–ª–µ
            if submodule:
                for name, obj in inspect.getmembers(submodule):
                    if hasattr(obj, 'sub_routers') and obj not in routers_list:
                        routers_list.append(obj)
                        print(f"–ù–∞–π–¥–µ–Ω Router –≤ –ø–æ–¥–º–æ–¥—É–ª–µ {submodule_dir}: {name} = {obj}")
                        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–∏–º –≤—Å–µ –ø–æ–¥—Ä–æ—É—Ç–µ—Ä—ã
                        collect_sub_routers(obj, routers_list)
            
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ HANDLER_MODULES –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–ø–∏—Å–∫–∏ –º–æ–¥—É–ª–µ–π
                handler_modules = []
                if hasattr(submodule, 'HANDLER_MODULES'):
                    handler_modules = submodule.HANDLER_MODULES
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ HANDLER_MODULES, –ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–º–æ–¥—É–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
                if not handler_modules:
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ .py —Ñ–∞–π–ª—ã –∏–∑ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞
                    import os
                    import pkgutil
                    
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–∫–µ—Ç—É
                        package_dir = os.path.dirname(submodule.__file__)
                        
                        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ –∏–∑ –ø–∞–∫–µ—Ç–∞
                        for _, submodule_name, is_pkg in pkgutil.iter_modules([package_dir]):
                            if not is_pkg and not submodule_name.startswith('__'):
                                try:
                                    submodule_full_path = f"{submodule_path}.{submodule_name}"
                                    print(f"–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥–º–æ–¥—É–ª—å: {submodule_full_path}")
                                    
                                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥–º–æ–¥—É–ª—å
                                    sub_module = _import_module(submodule_full_path)
                                    
                                    # –ò—â–µ–º —Ä–æ—É—Ç–µ—Ä—ã –≤ –ø–æ–¥–º–æ–¥—É–ª–µ
                                    if sub_module:
                                        for name, obj in inspect.getmembers(sub_module):
                                            if hasattr(obj, 'sub_routers') and obj not in routers_list:
                                                routers_list.append(obj)
                                                print(f"–ù–∞–π–¥–µ–Ω Router –≤ –ø–æ–¥–º–æ–¥—É–ª–µ {submodule_name}: {name} = {obj}")
                                                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–∏–º –≤—Å–µ –ø–æ–¥—Ä–æ—É—Ç–µ—Ä—ã
                                                collect_sub_routers(obj, routers_list)
                                except ImportError as e:
                                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø–æ–¥–º–æ–¥—É–ª—è {submodule_name}: {e}")
                    except (AttributeError, ImportError, ValueError) as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø–æ–¥–º–æ–¥—É–ª–µ–π –∏–∑ {submodule_path}: {e}")
            
        except ImportError as e:
            print(f"–ü–æ–¥–º–æ–¥—É–ª—å {submodule_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {base_module_path}: {e}")


def _import_module(module_path: str):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
    
    Args:
        module_path: –ü—É—Ç—å –∫ –º–æ–¥—É–ª—é
        
    Returns:
        –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        return importlib.import_module(module_path)
    except ImportError as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å {module_path}: {e}")
        return None


def _find_command_handlers_from_decorators(module, command_handlers: Dict[str, Callable]):
    """
    –ò—â–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞—Ö –º–æ–¥—É–ª—è.
    
    Args:
        module: –ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        command_handlers: –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è {–∫–æ–º–∞–Ω–¥–∞: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫}
    """
    # –ò—â–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–æ–¥—É–ª–µ
    for name, obj in inspect.getmembers(module, inspect.isfunction):
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
        try:
            func_source = inspect.getsource(obj)
            
            # –ò—â–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –ø–µ—Ä–µ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ @router.message(Command("command_name"))
            # –∏–ª–∏ @admin_router.message(Command("command_name"))
            decorator_pattern = r'@\w+\.message\(Command\((?:"|\')([^"\']+)(?:"|\')\)\)'
            
            # –ò—â–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–µ—Ä–µ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
            matches = re.findall(decorator_pattern, func_source)
            
            if matches:
                for cmd in matches:
                    command_handlers[cmd] = obj
                    print(f"–ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã (–∏–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞): {name} –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /{cmd}")
        except (TypeError, IOError):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
            pass


def _find_callback_handlers_from_decorators(module, callback_handlers: Dict[str, Callable]):
    """
    –ò—â–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞—Ö –º–æ–¥—É–ª—è.
    
    Args:
        module: –ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        callback_handlers: –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è {callback_data: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫}
    """
    # –ò—â–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–æ–¥—É–ª–µ
    for name, obj in inspect.getmembers(module, inspect.isfunction):
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
        try:
            func_source = inspect.getsource(obj)
            
            # 1. –ò—â–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã —Ç–∏–ø–∞ @router.callback_query(F.data == "settings_toggle_skip_marked")
            callback_pattern = r'@\w+\.callback_query\(.*?[F|f]\.data\s*==\s*(?:"|\')([^"\']+)(?:"|\')\)'
            
            # –ò—â–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–µ—Ä–µ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
            matches = re.findall(callback_pattern, func_source)
            
            if matches:
                for callback_data in matches:
                    callback_handlers[callback_data] = obj
                    print(f"–ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback (–∏–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ ==): {name} –¥–ª—è callback {callback_data}")
            
            # 1.5 –ò—â–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã —Ç–∏–ø–∞ 
            # @evaluation_router.callback_query(F.data == CallbackData.WORD_KNOW) # 2 —Å–ª–æ–≤–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–æ–π, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–∫–æ–±–∫–æ–π
            # @evaluation_router.callback_query(F.data == CallbackData.WORD_KNOW, StudyStates.studying) # 2 —Å–ª–æ–≤–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–æ–π, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–ø—è—Ç–æ–π, –¥–∞–ª—å—à–µ –Ω–µ–≤–∞–∂–Ω–æ
            callback_pattern = r'@\w+\.callback_query\([^)]*F\.data\s*==\s*([^,\)]*\.[^,\)]+)(?:\s*,\s*([^)]+))?\)'
            
            # –ò—â–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–µ—Ä–µ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
            matches = re.findall(callback_pattern, func_source)
            
            if matches:
                for (callback_data, _) in matches:
                    callback_handlers[callback_data] = obj
                    print(f"–ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback (–∏–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ == *.*): {name} –¥–ª—è callback {callback_data}")
            
            # 2. –ò—â–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã —Ç–∏–ø–∞ @router.callback_query(F.data.startswith("lang_select_"))
            startswith_pattern = r'@\w+\.callback_query\(.*?[F|f]\.data\.startswith\((?:"|\')([^"\']+)(?:"|\')\)'
            
            # –ò—â–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ startswith
            matches = re.findall(startswith_pattern, func_source)
            
            if matches:
                for prefix in matches:
                    # –î–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å startswith —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏–º—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
                    callback_handlers[f"startswith:{prefix}"] = obj
                    print(f"–ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback (–∏–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ startswith): {name} –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ {prefix}")
            
            # 3. –ò—â–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ F.data.startswith(("prefix1", "prefix2"))
            multi_startswith_pattern = r'@\w+\.callback_query\(.*?[F|f]\.data\.startswith\(\(([^)]+)\)\)\)'
            
            # –ò—â–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
            matches = re.findall(multi_startswith_pattern, func_source)
            
            if matches:
                for prefixes_str in matches:
                    # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–≤—ã—á–∫–∏ –∏ –∑–∞–ø—è—Ç—ã–µ)
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
                        prefix_matches = re.findall(r'(?:"|\')([^"\']+)(?:"|\')', prefixes_str)
                        for prefix in prefix_matches:
                            callback_handlers[f"startswith:{prefix}"] = obj
                            print(f"–ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback (–∏–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ multi-startswith): {name} –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ {prefix}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –º—É–ª—å—Ç–∏-–ø—Ä–µ—Ñ–∏–∫—Å–æ–≤: {e}")
            
        except (TypeError, IOError) as e:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è {name}: {e}")


def extract_command_handlers_from_router(router):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–∑ —Ä–æ—É—Ç–µ—Ä–∞.
    
    Args:
        router: –û–±—ä–µ–∫—Ç Router
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å {–∫–æ–º–∞–Ω–¥–∞: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫}
    """
    command_handlers = {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    if hasattr(router, 'message') and hasattr(router.message, 'handlers'):
        for handler_obj in router.message.handlers:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            if hasattr(handler_obj, 'filters') and handler_obj.filters:
                for filter_obj in handler_obj.filters:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–∏–ª—å—Ç—Ä –∫–æ–º–∞–Ω–¥
                    if hasattr(filter_obj, 'commands') and filter_obj.commands:
                        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ–º–∞–Ω–¥—ã, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
                        for command in filter_obj.commands:
                            command_handlers[command] = handler_obj.callback
                            print(f"–ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /{command}: {handler_obj.callback.__name__}")
            
                    if hasattr(filter_obj, 'states') and filter_obj.states:
                        for state in filter_obj.states:
                            command_handlers[str(state)] = handler_obj.callback
                            print(f"–ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è /{state}: {handler_obj.callback.__name__}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–æ–≤ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç aiogram)
            if hasattr(handler_obj, 'flags') and 'commands' in handler_obj.flags:
                for cmd_filter in handler_obj.flags['commands']:
                    if hasattr(cmd_filter, 'commands'):
                        for command in cmd_filter.commands:
                            command_handlers[command] = handler_obj.callback
                            print(f"–ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /{command} (–∏–∑ —Ñ–ª–∞–≥–æ–≤): {handler_obj.callback.__name__}")
    
    return command_handlers

def extract_callback_handlers_from_router(router):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∏–∑ —Ä–æ—É—Ç–µ—Ä–∞.
    
    Args:
        router: –û–±—ä–µ–∫—Ç Router
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å {callback_data: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫}
    """
    callback_handlers = {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback_query
    if hasattr(router, 'callback_query') and hasattr(router.callback_query, 'handlers'):
        for handler_obj in router.callback_query.handlers:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            handler_name = handler_obj.callback.__name__ if hasattr(handler_obj, 'callback') else "unknown"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            if hasattr(handler_obj, 'filters') and handler_obj.filters:
                for filter_obj in handler_obj.filters:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ F.data == "..."
                    if hasattr(filter_obj, 'magic') and filter_obj.magic:
                        magic_str = str(filter_obj.magic)
                        
                        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ F.data == "callback_data"
                        import re
                        exact_match = re.search(r'data\s*==\s*[\'"]([^\'"]+)[\'"]', magic_str)
                        if exact_match:
                            callback_data = exact_match.group(1)
                            callback_handlers[callback_data] = handler_obj.callback
                            print(f"–ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_data '{callback_data}': {handler_name}")
                        
                        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ F.data.startswith("prefix")
                        if 'startswith' in magic_str:
                            prefix_match = re.search(r'data\.startswith\([\'"]([^\'"]+)[\'"]\)', magic_str)
                            if prefix_match:
                                prefix = prefix_match.group(1)
                                callback_handlers[f"startswith:{prefix}"] = handler_obj.callback
                                print(f"–ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ '{prefix}': {handler_name}")
                            
                            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ F.data.startswith(("prefix1", "prefix2", ...))
                            tuple_match = re.search(r'data\.startswith\(\(([^)]+)\)\)', magic_str)
                            if tuple_match:
                                prefixes_str = tuple_match.group(1)
                                prefix_matches = re.findall(r'[\'"]([^\'"]+)[\'"]', prefixes_str)
                                for prefix in prefix_matches:
                                    callback_handlers[f"startswith:{prefix}"] = handler_obj.callback
                                    print(f"–ù–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ '{prefix}' –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞: {handler_name}")
                
    return callback_handlers
