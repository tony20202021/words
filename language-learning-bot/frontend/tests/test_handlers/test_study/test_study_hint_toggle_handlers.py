"""
—Ç–µ—Å—Ç—ã –≤ —ç—Ç–æ–º –º–æ–¥—É–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º–∏
–ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏, –∫–æ—Ç–æ—Ä—É—é –æ–Ω–∞ —Ä–µ–∞–ª–∏–∑—É–µ—Ç
–Ω–∞–ø—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–ª—è –µ–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
–≤—Å–µ –≤–Ω–µ—à–Ω–∏–µ –≤—ã–∑–æ–≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –º–æ–∫–∏

"""

import pytest
from unittest.mock import MagicMock, AsyncMock, patch, call
from aiogram import Dispatcher
from aiogram.types import Message, User, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.dispatcher.event.bases import SkipHandler
from app.bot.states.centralized_states import HintStates, StudyStates

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥–º–æ–¥—É–ª–µ–π
from app.bot.handlers.study.hint.create_handlers import process_hint_create, process_hint_text
from app.bot.handlers.study.hint.edit_handlers import process_hint_edit, process_hint_edit_text
from app.bot.handlers.study.hint.common import cmd_cancel_hint
from app.bot.handlers.study.hint.toggle_handlers import process_hint_toggle
import app.bot.handlers.study.study_hint_handlers as study_hint_handlers


class TestStudyHintHandlers:
    """Tests for the study hint handlers."""

    @pytest.fixture
    def setup_mocks(self):
        """Set up common mocks for tests."""
        # –°–æ–∑–¥–∞–µ–º state_data —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –≤—Å–µ—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª–µ–π
        state_data = {
            "current_word_id": "word123",
            "db_user_id": "user123",
            "current_word": {
                "id": "word123",
                "word_foreign": "house",
                "translation": "–¥–æ–º",
                "transcription": "ha äs",
                "language_id": "lang123",
                "user_word_data": {
                    "hint_phoneticsound": "—Ö-–∞—É–∑",
                    "hint_phoneticassociation": "—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞",
                    "check_interval": 1,
                    "next_check_date": "2025-05-15"
                }
            },
            "current_language": {
                "id": "lang123",
                "name_ru": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
                "name_foreign": "English"
            }
        }
        
        # Mock message
        message = MagicMock(spec=Message)
        message.answer = AsyncMock()
        message.edit_text = AsyncMock()
        message.from_user = MagicMock(spec=User)
        message.from_user.id = 12345
        message.from_user.username = "test_user"
        message.from_user.first_name = "Test"
        message.from_user.last_name = "User"
        message.from_user.full_name = "Test User"
        
        # Mock state
        state = MagicMock(spec=FSMContext)
        state.get_data = AsyncMock(return_value=state_data)
        state.update_data = AsyncMock()
        state.set_state = AsyncMock()
        state.get_state = AsyncMock(return_value=None)
        state.clear = AsyncMock()
        
        # Mock API client
        api_client = AsyncMock()
        api_client.get_user_by_telegram_id = AsyncMock(return_value={
            "success": True,
            "status": 200,
            "result": [],
            "error": None
        })
        api_client.create_user = AsyncMock(return_value={
            "success": True,
            "status": 201,
            "result": {"id": "user123"},
            "error": None
        })
        api_client.get_word = AsyncMock(return_value={
            "success": True,
            "status": 200,
            "result": {
                "id": "word123",
                "word_foreign": "house",
                "translation": "–¥–æ–º",
                "transcription": "ha äs",
                "language_id": "lang123",
                "user_word_data": {
                    "hint_phoneticassociation": "—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞",
                    "check_interval": 1,
                    "next_check_date": "2025-05-15"
                }
            },
            "error": None
        })
        api_client.get_language = AsyncMock(return_value={
            "success": True,
            "status": 200,
            "result": {
                "id": "lang123",
                "name_ru": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
                "name_foreign": "English"
            },
            "error": None
        })
        api_client.get_user_word_data = AsyncMock(return_value={
            "success": True,
            "status": 200,
            "result": {
                "hint_phoneticsound": "—Ö-–∞—É–∑",
                "score": 0,
                "check_interval": 1,
                "next_check_date": "2025-05-15"
            },
            "error": None
        })
        api_client.update_user_word_data = AsyncMock(return_value={
            "success": True,
            "status": 200,
            "result": {
                "hint_phoneticsound": "—Ö-–∞—É–∑",
                "score": 0,
                "check_interval": 1,
                "next_check_date": "2025-05-15"
            },
            "error": None
        })
        api_client.create_user_word_data = AsyncMock(return_value={
            "success": True,
            "status": 201,
            "result": {
                "hint_phoneticsound": "—Ö-–∞—É–∑",
                "score": 0,
                "check_interval": 1,
                "next_check_date": "2025-05-15"
            },
            "error": None
        })
        
        # Mock callback
        callback = MagicMock(spec=CallbackQuery)
        callback.answer = AsyncMock()
        callback.message = message
        callback.message.edit_text = AsyncMock()
        callback.from_user = message.from_user
        callback.data = "hint_view_phonetic_word123"
        callback.bot = message.bot = MagicMock()
        callback.bot.api_client = api_client
        
        # Mock voice message 
        voice_message = MagicMock(spec=Message)
        voice_message.answer = AsyncMock()
        voice_message.from_user = message.from_user
        voice_message.text = None
        voice_message.voice = MagicMock()
        voice_message.voice.file_id = "voice_file_id"
        voice_message.voice.duration = 5
        voice_message.bot = MagicMock()
        voice_message.bot.get_file = AsyncMock()
        voice_message.bot.api_client = api_client
        
        return message, state, api_client, callback, voice_message, state_data

    @pytest.mark.asyncio
    async def test_process_hint_toggle(self, setup_mocks):
        """Test the process_hint_toggle handler."""
        _, state, api_client, callback, _, state_data = setup_mocks
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        callback.message.edit_text.reset_mock()
        callback.answer.reset_mock()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback.data –¥–ª—è toggle_hint
        callback.data = "hint_toggle_association_word123"
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º state_data
        state.get_data.return_value = {
            "current_word": {
                "id": "word123",
                "word_foreign": "house",
                "translation": "–¥–æ–º",
                "transcription": "ha äs",
                "language_id": "lang123",
                "user_word_data": {
                    "hint_phoneticassociation": "—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞"
                }
            },
            "db_user_id": "user123"
        }
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        import app.bot.handlers.study.hint.toggle_handlers as toggle_handlers_module
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        validate_state_data_mock = AsyncMock(return_value=(True, state.get_data.return_value))
        get_hint_key_mock = MagicMock(return_value="hint_phoneticassociation")
        get_hint_name_mock = MagicMock(return_value="–ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è")
        get_hint_icon_mock = MagicMock(return_value="üî§")
        get_hint_text_mock = AsyncMock(return_value="—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞")
        update_word_score_mock = AsyncMock(return_value=(True, {"score": 0}))
        format_study_word_message_mock = MagicMock(return_value="FORMATTED_MESSAGE")
        format_used_hints_mock = AsyncMock(return_value="HINTS_TEXT")
        create_word_keyboard_mock = MagicMock(return_value="KEYBOARD")
        get_show_hints_setting_mock = AsyncMock(return_value=True)
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è UserWordState
        user_word_state_mock = MagicMock()
        user_word_state_mock.is_valid.return_value = True
        user_word_state_mock.get_flag.return_value = []  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
        user_word_state_mock.set_flag = MagicMock()
        user_word_state_mock.save_to_state = AsyncMock()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º patch –¥–ª—è –ø–∞—Ç—á–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        with patch('app.bot.handlers.study.hint.toggle_handlers.validate_state_data', validate_state_data_mock), \
            patch('app.bot.handlers.study.hint.toggle_handlers.get_hint_key', get_hint_key_mock), \
            patch('app.bot.handlers.study.hint.toggle_handlers.get_hint_name', get_hint_name_mock), \
            patch('app.bot.handlers.study.hint.toggle_handlers.get_hint_icon', get_hint_icon_mock), \
            patch('app.bot.handlers.study.hint.toggle_handlers.get_hint_text', get_hint_text_mock), \
            patch('app.bot.handlers.study.hint.toggle_handlers.update_word_score', update_word_score_mock), \
            patch('app.bot.handlers.study.hint.toggle_handlers.format_study_word_message', format_study_word_message_mock), \
            patch('app.bot.handlers.study.hint.toggle_handlers.format_used_hints', format_used_hints_mock), \
            patch('app.bot.handlers.study.hint.toggle_handlers.create_word_keyboard', create_word_keyboard_mock), \
            patch('app.bot.handlers.study.hint.toggle_handlers.get_show_hints_setting', get_show_hints_setting_mock), \
            patch('app.utils.state_models.UserWordState.from_state', AsyncMock(return_value=user_word_state_mock)), \
            patch('app.bot.handlers.study.hint.toggle_handlers.get_api_client_from_bot', MagicMock(return_value=api_client)), \
            patch('app.bot.handlers.study.hint.toggle_handlers.logger'):
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API –æ—Ç–≤–µ—Ç –¥–ª—è get_language
            api_client.get_language.return_value = {
                "success": True,
                "status": 200,
                "result": {
                    "id": "lang123",
                    "name_ru": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
                    "name_foreign": "English"
                },
                "error": None
            }
            
            # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
            await process_hint_toggle(callback, state)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ validate_state_data –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            validate_state_data_mock.assert_called_once_with(
                state, 
                ["current_word", "db_user_id"],
                callback,
                "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ get_hint_key –∏ get_hint_name –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
            get_hint_key_mock.assert_called_once_with("association")
            get_hint_name_mock.assert_called_once_with("association")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ get_hint_text –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            get_hint_text_mock.assert_called_once()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ 0 (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–∞)
            update_word_score_mock.assert_called_once_with(
                callback.bot,
                "user123",
                "word123",
                score=0,
                word=state.get_data.return_value["current_word"],
                message_obj=callback
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
            user_word_state_mock.set_flag.assert_any_call('used_hints', ['association'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
            user_word_state_mock.save_to_state.assert_called_once_with(state)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
            callback.message.edit_text.assert_called_once_with(
                "FORMATTED_MESSAGEHINTS_TEXT",  # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è format_study_word_message –∏ format_used_hints
                reply_markup="KEYBOARD",
                parse_mode="HTML"
            )