"""
—Ç–µ—Å—Ç—ã –≤ —ç—Ç–æ–º –º–æ–¥—É–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º–∏
–ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏, –∫–æ—Ç–æ—Ä—É—é –æ–Ω–∞ —Ä–µ–∞–ª–∏–∑—É–µ—Ç
–Ω–∞–ø—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–ª—è –µ–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
–≤—Å–µ –≤–Ω–µ—à–Ω–∏–µ –≤—ã–∑–æ–≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –º–æ–∫–∏

"""

import pytest
from unittest.mock import MagicMock, AsyncMock, patch, call
from aiogram import Dispatcher
from aiogram.types import Message, User, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.dispatcher.event.bases import SkipHandler
from app.bot.handlers.study.study_states import HintStates, StudyStates

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–¥–º–æ–¥—É–ª–µ–π
from app.bot.handlers.study.hint.create_handlers import process_hint_create, process_hint_text
from app.bot.handlers.study.hint.edit_handlers import process_hint_edit, process_hint_edit_text
from app.bot.handlers.study.hint.common import cmd_cancel_hint
from app.bot.handlers.study.hint.toggle_handlers import process_hint_toggle
import app.bot.handlers.study.study_hint_handlers as study_hint_handlers


class TestStudyWordActions:

    @pytest.mark.asyncio
    async def test_process_show_word(self):
        """Test process_show_word function."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        callback = MagicMock(spec=CallbackQuery)
        callback.from_user = MagicMock()
        callback.from_user.id = 12345
        callback.from_user.username = "test_user"
        callback.from_user.full_name = "Test User"
        callback.message = MagicMock()
        callback.message.edit_text = AsyncMock()  # –î–æ–±–∞–≤–ª—è–µ–º edit_text
        callback.message.answer = AsyncMock()
        callback.answer = AsyncMock()
        
        # –ú–æ–∫ –¥–ª—è API –∫–ª–∏–µ–Ω—Ç–∞
        api_client = MagicMock()
        api_client.get_language = AsyncMock(return_value={
            "success": True,
            "result": {
                "id": "lang123", 
                "name_ru": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", 
                "name_foreign": "English"
            }
        })
        callback.bot = MagicMock()
        callback.bot.api_client = api_client
        
        state = MagicMock(spec=FSMContext)
        
        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è validate_state_data
        state_data = {
            "current_word": {
                "id": "word123",
                "word_foreign": "house",
                "translation": "–¥–æ–º",
                "transcription": "ha äs",
                "language_id": "lang123",
                "user_word_data": {}
            },
            "current_word_id": "word123",
            "db_user_id": "user123"
        }
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        validate_state_data_mock = AsyncMock(return_value=(True, state_data))
        update_word_score_mock = AsyncMock(return_value=(True, {
            "score": 0,
            "check_interval": 0,
            "next_check_date": "2025-05-20",
            "is_skipped": False
        }))
        user_word_state_mock = MagicMock()
        user_word_state_mock.is_valid.return_value = True
        user_word_state_mock.user_id = "user123"  # –î–æ–±–∞–≤–ª—è–µ–º user_id
        user_word_state_mock.word_id = "word123"  # –î–æ–±–∞–≤–ª—è–µ–º word_id
        user_word_state_mock.set_flag = MagicMock()
        user_word_state_mock.get_flag = MagicMock(return_value=[])  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è used_hints
        user_word_state_mock.save_to_state = AsyncMock()
        user_word_state_from_state_mock = AsyncMock(return_value=user_word_state_mock)
        
        format_used_hints_mock = AsyncMock(return_value="")  # –ú–æ–∫ –¥–ª—è format_used_hints
        get_show_hints_setting_mock = AsyncMock(return_value=True)  # –ú–æ–∫ –¥–ª—è get_show_hints_setting
        create_word_keyboard_mock = MagicMock(return_value="KEYBOARD")  # –ú–æ–∫ –¥–ª—è create_word_keyboard
        
        # –ü–∞—Ç—á–∏–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        import app.bot.handlers.study.study_word_actions as word_actions_module

        with patch('app.bot.handlers.study.study_word_actions.validate_state_data', validate_state_data_mock), \
            patch('app.bot.handlers.study.study_word_actions.update_word_score', update_word_score_mock), \
            patch('app.utils.state_models.UserWordState.from_state', user_word_state_from_state_mock), \
            patch('app.bot.handlers.study.study_word_actions.get_api_client_from_bot', MagicMock(return_value=api_client)), \
            patch('app.utils.formatting_utils.format_used_hints', format_used_hints_mock), \
            patch('app.utils.settings_utils.get_show_hints_setting', get_show_hints_setting_mock), \
            patch('app.bot.keyboards.study_keyboards.create_word_keyboard', create_word_keyboard_mock), \
            patch('app.bot.handlers.study.study_word_actions.logger'):
            
            # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
            await word_actions_module.process_show_word(callback, state)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ validate_state_data
            validate_state_data_mock.assert_called_once()
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ update_word_score —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            update_word_score_mock.assert_called_once()
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω api_client.get_language
            api_client.get_language.assert_called_once_with("lang123")
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ word_shown
            user_word_state_mock.set_flag.assert_called_with('word_shown', True)
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            user_word_state_mock.save_to_state.assert_called_once_with(state)
            
            # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            assert callback.message.edit_text.called or callback.message.answer.called
            
            # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ callback.answer
            callback.answer.assert_called_once()

    @pytest.mark.asyncio
    async def test_process_next_word(self):
        """Test process_next_word function."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        callback = MagicMock(spec=CallbackQuery)
        callback.from_user = MagicMock()
        callback.from_user.id = 12345
        callback.from_user.username = "test_user"
        callback.from_user.full_name = "Test User"
        callback.message = MagicMock()
        callback.message.answer = AsyncMock()
        callback.answer = AsyncMock()
        
        state = MagicMock(spec=FSMContext)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π state
        user_word_state_mock = MagicMock()
        user_word_state_mock.is_valid.return_value = True
        user_word_state_mock.set_flag = MagicMock()
        user_word_state_mock.advance_to_next_word = MagicMock()
        user_word_state_mock.save_to_state = AsyncMock()
        user_word_state_from_state_mock = AsyncMock(return_value=user_word_state_mock)
        
        # –ú–æ–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        show_study_word_mock = AsyncMock()
        
        # –ü–∞—Ç—á–∏–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        import app.bot.handlers.study.study_word_actions as word_actions_module

        with patch('app.utils.state_models.UserWordState.from_state', user_word_state_from_state_mock), \
            patch('app.bot.handlers.study.study_word_actions.show_study_word', show_study_word_mock), \
            patch('app.bot.handlers.study.study_word_actions.logger'):
            
            # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
            await word_actions_module.process_next_word(callback, state)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ñ–ª–∞–≥–∞ word_shown –≤ False
            user_word_state_mock.set_flag.assert_called_once_with('word_shown', False)
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ advance_to_next_word
            user_word_state_mock.advance_to_next_word.assert_called_once()
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            user_word_state_mock.save_to_state.assert_called_once_with(state)
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            callback.message.answer.assert_called_once_with("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É...")
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ show_study_word
            show_study_word_mock.assert_called_once_with(callback.message, state)
            
            # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ callback.answer
            callback.answer.assert_called_once()
                    
    @pytest.mark.asyncio
    async def test_process_toggle_word_skip(self):
        """Test process_toggle_word_skip function."""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        callback = MagicMock(spec=CallbackQuery)
        callback.from_user = MagicMock()
        callback.from_user.id = 12345
        callback.from_user.username = "test_user"
        callback.from_user.full_name = "Test User"
        callback.message = MagicMock()
        callback.message.answer = AsyncMock()
        callback.answer = AsyncMock()
        
        # –ú–æ–∫ –¥–ª—è API –∫–ª–∏–µ–Ω—Ç–∞ - –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ get_user_language_settings
        api_client = MagicMock()
        api_client.get_language = AsyncMock(return_value={
            "success": True,
            "result": {
                "id": "lang123", 
                "name_ru": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", 
                "name_foreign": "English"
            }
        })
        # –í–∞–∂–Ω–æ: –¥–æ–±–∞–≤–∏—Ç—å –º–æ–∫ –¥–ª—è –º–µ—Ç–æ–¥–∞ get_user_language_settings –≤ api_client
        api_client.get_user_language_settings = AsyncMock(return_value={
            "success": True,
            "result": {
                "show_debug": False,
                "show_hints": True,
                "start_word": 1,
                "skip_marked": False,
                "use_check_date": True
            },
            "error": None
        })
        callback.bot = MagicMock()
        callback.bot.api_client = api_client
        
        state = MagicMock(spec=FSMContext)
        
        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è validate_state_data
        state_data = {
            "current_word": {
                "id": "word123",
                "word_foreign": "house",
                "translation": "–¥–æ–º",
                "transcription": "ha äs",
                "language_id": "lang123",
                "user_word_data": {
                    "is_skipped": False  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è
                }
            },
            "current_word_id": "word123",
            "db_user_id": "user123",
            "current_language": {
                "id": "lang123",
                "name_ru": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
                "name_foreign": "English"
            }
        }
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º state.get_data
        state.get_data = AsyncMock(return_value=state_data)
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        validate_state_data_mock = AsyncMock(return_value=(True, state_data))
        update_word_score_mock = AsyncMock(return_value=(True, {
            "score": 0,
            "check_interval": 0,
            "next_check_date": "2025-05-20",
            "is_skipped": True  # –°—Ç–∞–ª–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã–º
        }))
        
        # –ú–æ–∫ –¥–ª—è UserWordState
        user_word_state_mock = MagicMock()
        user_word_state_mock.is_valid.return_value = True
        user_word_state_mock.word_data = state_data["current_word"]
        user_word_state_mock.get_flag = MagicMock(return_value=[])
        user_word_state_mock.save_to_state = AsyncMock()
        user_word_state_from_state_mock = AsyncMock(return_value=user_word_state_mock)
        
        # –ú–æ–∫ –¥–ª—è show_study_word
        show_study_word_mock = AsyncMock()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–æ–∫ –¥–ª—è get_user_language_settings, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
        # –±–µ–∑ –≤—Å—è–∫–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–∏
        async def mock_get_user_language_settings(msg_obj, state_obj):
            return {"show_debug": False, "show_hints": True}
        
        # –ü–∞—Ç—á–∏–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        import app.bot.handlers.study.study_word_actions as word_actions_module
        
        with patch('app.bot.handlers.study.study_word_actions.validate_state_data', validate_state_data_mock), \
            patch('app.bot.handlers.study.study_word_actions.update_word_score', update_word_score_mock), \
            patch('app.utils.state_models.UserWordState.from_state', user_word_state_from_state_mock), \
            patch('app.bot.handlers.study.study_word_actions.show_study_word', show_study_word_mock), \
            patch('app.bot.handlers.study.study_word_actions.get_api_client_from_bot', MagicMock(return_value=api_client)), \
            patch('app.utils.settings_utils.get_user_language_settings', mock_get_user_language_settings), \
            patch('app.utils.settings_utils.get_show_hints_setting', AsyncMock(return_value=True)), \
            patch('app.bot.handlers.study.study_word_actions.logger'):
            
            # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
            await word_actions_module.process_toggle_word_skip(callback, state)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ validate_state_data
            validate_state_data_mock.assert_called_once()
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ update_word_score
            update_word_score_mock.assert_called_once()
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            callback.message.answer.assert_called_once()
            message_text = callback.message.answer.call_args[0][0]
            assert "–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω" in message_text
            assert "–ø—Ä–æ–ø—É—Å–∫–∞—Ç—å—Å—è" in message_text
            assert "house" in message_text
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ state
            assert user_word_state_mock.save_to_state.called
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ show_study_word
            show_study_word_mock.assert_called_once_with(callback.message, state)
            
            # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ callback.answer
            callback.answer.assert_called_once()
            