"""
Handlers for word actions during the study process.
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from app.utils.api_utils import get_api_client_from_bot
from app.utils.logger import setup_logger
from app.utils.error_utils import validate_state_data
from app.utils.state_models import UserWordState
from app.utils.word_data_utils import update_word_score

from app.bot.handlers.study.study_words import show_study_word

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å–ª–æ–≤–∞–º–∏
word_router = Router()

logger = setup_logger(__name__)


@word_router.callback_query(F.data == "word_know")
async def process_word_know(callback: CallbackQuery, state: FSMContext):
    """
    Process callback when user knows the word.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'word_know' callback from {full_name} ({username})")
    
    # Validate state data
    is_valid, state_data = await validate_state_data(
        state, 
        ["current_word", "current_word_id", "db_user_id"],
        callback,
        "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–≤–∞"
    )
    
    if not is_valid:
        # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–∞–º–∏, –µ—Å–ª–∏ validate_state_data –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # Get required data
    current_word = state_data["current_word"]
    current_word_id = state_data["current_word_id"]
    db_user_id = state_data["db_user_id"]
    
    try:
        # Update word score to 1 (known)
        success, result = await update_word_score(
            callback.bot,
            db_user_id,
            current_word_id,
            score=1,
            word=current_word,
            message_obj=callback
        )
        
        if not success:
            return
        
        # Show word information
        word_foreign = current_word.get("word_foreign")
        transcription = current_word.get("transcription", "")
        translation = current_word.get("translation", "")
        
        await callback.message.answer(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–Ω–∞–µ—Ç–µ —ç—Ç–æ —Å–ª–æ–≤–æ.\n\n"
            f"–°–ª–æ–≤–æ: <b>{word_foreign}</b>\n"
            f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: [{transcription}]\n"
            f"–ü–µ—Ä–µ–≤–æ–¥: {translation}\n\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É...",
            parse_mode="HTML"
        )
        
        # Advance to next word
        user_word_state = await UserWordState.from_state(state)
        
        if user_word_state.is_valid():
            # Advance to next word
            user_word_state.advance_to_next_word()
            
            # Save updated state
            await user_word_state.save_to_state(state)
            
            # Show next word
            await show_study_word(callback.message, state)
        else:
            # Fallback to old approach if state model is invalid
            logger.warning("UserWordState invalid, using fallback approach to advance to next word")
            current_index = state_data.get("current_study_index", 0) + 1
            await state.update_data(current_study_index=current_index)
            await show_study_word(callback.message, state)
        
    except Exception as e:
        logger.error(f"Error processing word_know: {e}", exc_info=True)
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–æ–≤–∞: {str(e)}"
        )
    
    await callback.answer()


@word_router.callback_query(F.data == "word_dont_know")
async def process_word_dont_know(callback: CallbackQuery, state: FSMContext):
    """
    Process callback when user doesn't know the word but wants to continue learning it.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'word_dont_know' callback from {full_name} ({username})")
    
    # Validate state data
    is_valid, state_data = await validate_state_data(
        state, 
        ["current_word", "current_word_id", "db_user_id"],
        callback,
        "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–≤–∞"
    )
    
    if not is_valid:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # Get required data
    current_word = state_data["current_word"]
    current_word_id = state_data["current_word_id"]
    db_user_id = state_data["db_user_id"]
    
    try:
        # Update word score to 0 (not known), but don't mark as skipped
        success, result = await update_word_score(
            callback.bot,
            db_user_id,
            current_word_id,
            score=0,
            word=current_word,
            message_obj=callback,
            is_skipped=False  # –ù–µ –ø–æ–º–µ—á–∞–µ–º –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
        )
        
        if not success:
            return
        
        # Show word information
        word_foreign = current_word.get("word_foreign")
        transcription = current_word.get("transcription", "")
        translation = current_word.get("translation", "")
        
        await callback.message.answer(
            f"üîÑ –ó–∞–ø–æ–º–Ω–∏—Ç–µ —ç—Ç–æ —Å–ª–æ–≤–æ, –º—ã –ø–æ–≤—Ç–æ—Ä–∏–º –µ–≥–æ –ø–æ–∑–∂–µ.\n\n"
            f"–°–ª–æ–≤–æ: <b>{word_foreign}</b>\n"
            f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: [{transcription}]\n"
            f"–ü–µ—Ä–µ–≤–æ–¥: {translation}\n\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É...",
            parse_mode="HTML"
        )
        
        # Advance to next word
        user_word_state = await UserWordState.from_state(state)
        
        if user_word_state.is_valid():
            # Advance to next word
            user_word_state.advance_to_next_word()
            
            # Save updated state
            await user_word_state.save_to_state(state)
            
            # Show next word
            await show_study_word(callback.message, state)
        else:
            # Fallback to old approach if state model is invalid
            logger.warning("UserWordState invalid, using fallback approach to advance to next word")
            current_index = state_data.get("current_study_index", 0) + 1
            await state.update_data(current_study_index=current_index)
            await show_study_word(callback.message, state)
            
    except Exception as e:
        logger.error(f"Error processing word_dont_know: {e}", exc_info=True)
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–æ–≤–∞: {str(e)}"
        )
    
    await callback.answer()


@word_router.callback_query(F.data == "word_skip")
async def process_word_skip(callback: CallbackQuery, state: FSMContext):
    """
    Process callback when user wants to skip the word (mark it to be skipped in future).
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'word_skip' callback from {full_name} ({username})")
    
    # Validate state data
    is_valid, state_data = await validate_state_data(
        state, 
        ["current_word", "current_word_id", "db_user_id"],
        callback,
        "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Å–ª–æ–≤–∞"
    )
    
    if not is_valid:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # Get required data
    current_word = state_data["current_word"]
    current_word_id = state_data["current_word_id"]
    db_user_id = state_data["db_user_id"]
    
    try:
        # Update word score to 0 and mark as skipped
        success, result = await update_word_score(
            callback.bot,
            db_user_id,
            current_word_id,
            score=0,
            word=current_word,
            message_obj=callback,
            is_skipped=True  # –ü–æ–º–µ—á–∞–µ–º –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
        )
        
        if not success:
            return
        
        # Show word information
        word_foreign = current_word.get("word_foreign")
        transcription = current_word.get("transcription", "")
        translation = current_word.get("translation", "")
        
        await callback.message.answer(
            f"‚è© –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Å–ª–æ–≤–æ. –û–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º.\n\n"
            f"–°–ª–æ–≤–æ: <b>{word_foreign}</b>\n"
            f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: [{transcription}]\n"
            f"–ü–µ—Ä–µ–≤–æ–¥: {translation}\n\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É...",
            parse_mode="HTML"
        )
        
        # Advance to next word
        user_word_state = await UserWordState.from_state(state)
        
        if user_word_state.is_valid():
            # Advance to next word
            user_word_state.advance_to_next_word()
            
            # Save updated state
            await user_word_state.save_to_state(state)
            
            # Show next word
            await show_study_word(callback.message, state)
        else:
            # Fallback to old approach if state model is invalid
            logger.warning("UserWordState invalid, using fallback approach to advance to next word")
            current_index = state_data.get("current_study_index", 0) + 1
            await state.update_data(current_study_index=current_index)
            await show_study_word(callback.message, state)
            
    except Exception as e:
        logger.error(f"Error processing word_skip: {e}", exc_info=True)
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–æ–≤–∞: {str(e)}"
        )
    
    await callback.answer()