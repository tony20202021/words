"""
Tests for formatting_utils module.
"""

import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from datetime import datetime

from app.utils.formatting_utils import (
    format_date,
    format_date_standard,
    format_settings_text,
    format_study_word_message,
    format_used_hints
)

class TestFormatDate:
    
    def test_format_date_success(self):
        # Setup
        date_str = "2023-05-15"
        
        # –ü–∞—Ç—á–∏–º locale.setlocale –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–æ–∫–∞–ª–∏
        with patch('locale.setlocale'):
            # Execute
            result = format_date(date_str)
            
            # Verify
            assert "15" in result  # –î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            assert "2023" in result  # –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            
    def test_format_date_none(self):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        assert format_date(None) == 'N/A'
        assert format_date('N/A') == 'N/A'


class TestFormatDateStandard:
    
    def test_format_date_standard_same_as_format_date(self):
        # Setup
        date_str = "2023-05-15"
        
        # –ü–∞—Ç—á–∏–º locale.setlocale –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–æ–∫–∞–ª–∏
        with patch('locale.setlocale'):
            # Execute –∏ Verify
            assert format_date_standard(date_str) == format_date(date_str)


class TestFormatSettingsText:
    
    def test_format_settings_text_success(self):
        # Setup
        start_word = 5
        skip_marked = True
        use_check_date = False
        show_hints = True
        show_debug = False
        prefix = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        suffix = "\n–ö–æ–Ω–µ—Ü –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        
        # Execute
        result = format_settings_text(
            start_word, skip_marked, use_check_date, show_hints, show_debug, 
            prefix=prefix, suffix=suffix
        )
        
        # Verify - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        assert prefix in result
        assert suffix in result
        assert f"–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ: <b>{start_word}</b>" in result
        assert "–ü—Ä–æ–ø—É—Å–∫–∞—Ç—å ‚ùå" in result  # skip_marked = True
        assert "–ù–µ —É—á–∏—Ç—ã–≤–∞—Ç—å ‚ùå" in result  # use_check_date = False
        assert "–ü—Ä–∏–¥—É–º—ã–≤–∞—Ç—å ‚úÖ" in result  # show_hints = True
        assert "–°–∫—Ä—ã–≤–∞—Ç—å ‚ùå" in result  # show_debug = False


class TestFormatStudyWordMessage:
    
    def test_format_study_word_message_without_showing_word(self):
        # Setup
        language_name_ru = "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"
        language_name_foreign = "English"
        word_number = 10
        translation = "–ö–Ω–∏–≥–∞"
        is_skipped = False
        score = 0
        check_interval = 0
        next_check_date = None
        show_word = False
        word_foreign = "Book"
        transcription = "b äk"
        
        # Execute
        result = format_study_word_message(
            language_name_ru, language_name_foreign, word_number, translation,
            is_skipped, score, check_interval, next_check_date,
            show_word, word_foreign, transcription
        )
        
        # Verify
        assert language_name_ru in result
        assert language_name_foreign in result
        assert str(word_number) in result
        assert translation in result
        assert word_foreign not in result  # –°–ª–æ–≤–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è
        assert transcription not in result  # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è
    
    def test_format_study_word_message_with_showing_word(self):
        # Setup
        language_name_ru = "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"
        language_name_foreign = "English"
        word_number = 10
        translation = "–ö–Ω–∏–≥–∞"
        is_skipped = False
        score = 0
        check_interval = 0
        next_check_date = None
        show_word = True
        word_foreign = "Book"
        transcription = "b äk"
        
        # Execute
        result = format_study_word_message(
            language_name_ru, language_name_foreign, word_number, translation,
            is_skipped, score, check_interval, next_check_date,
            show_word, word_foreign, transcription
        )
        
        # Verify
        assert language_name_ru in result
        assert language_name_foreign in result
        assert str(word_number) in result
        assert translation in result
        assert word_foreign in result  # –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è
        assert transcription in result  # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è


class TestFormatUsedHints:
    
    @pytest.mark.asyncio
    async def test_format_used_hints_success(self):
        # Setup
        bot = AsyncMock()
        user_id = "user123"
        word_id = "word123"
        current_word = {
            "_id": "word123",
            "word_foreign": "Book",
            "translation": "–ö–Ω–∏–≥–∞"
        }
        used_hints = ["meaning", "phoneticsound"]
        
        # –ü–∞—Ç—á–∏–º —Ñ—É–Ω–∫—Ü–∏—é get_hint_text –∏ hint_constants
        with patch('app.utils.formatting_utils.get_hint_text', side_effect=[
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è",
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —Ñ–æ–Ω–µ—Ç–∏–∫–∏"
        ]), \
        patch('app.utils.formatting_utils.get_hint_key', side_effect=[
            "hint_meaning", "hint_phoneticsound"
        ]), \
        patch('app.utils.formatting_utils.get_hint_name', side_effect=[
            "–ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º", "–§–æ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–µ –∑–≤—É—á–∞–Ω–∏–µ"
        ]), \
        patch('app.utils.formatting_utils.get_hint_icon', side_effect=[
            "üß†", "üéµ"
        ]):
            
            # Execute
            result = await format_used_hints(
                bot, user_id, word_id, current_word, used_hints, include_header=True
            )
            
            # Verify
            assert "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏" in result
            assert "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è" in result
            assert "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —Ñ–æ–Ω–µ—Ç–∏–∫–∏" in result
            assert "üß†" in result  # –ò–∫–æ–Ω–∫–∞ –¥–ª—è meaning
            assert "üéµ" in result  # –ò–∫–æ–Ω–∫–∞ –¥–ª—è phoneticsound