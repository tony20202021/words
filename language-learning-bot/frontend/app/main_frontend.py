#!/usr/bin/env python
"""
Entry point for the frontend application.
This is the main script that initializes and starts the Telegram bot.
FIXED: Corrected handler registration, removed missing imports, improved error handling.
"""

import asyncio
import argparse
import logging
import os
import sys
import yaml
from pathlib import Path
from typing import List

# Add the parent directory to sys.path to allow imports from other modules
sys.path.insert(0, str(Path(__file__).parent.parent))

# aiogram 3.x –∏–º–ø–æ—Ä—Ç—ã
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from hydra import compose, initialize
from omegaconf import OmegaConf
from datetime import datetime

from app.api.client import APIClient
from app.bot.bot import BotManager
import app.bot.handlers.admin_handlers as admin_handlers
import app.bot.handlers.language_handlers as language_handlers
import app.bot.handlers.study_handlers as study_handlers
import app.bot.handlers.user_handlers as user_handlers
# –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ common_handlers
import app.bot.handlers.common_handlers as common_handlers
from app.bot.middleware.auth_middleware import AuthMiddleware, StateValidationMiddleware
from app.utils.logger import setup_logger
from app.utils.api_utils import store_api_client, get_api_client_from_bot

# Load environment variables from .env file
load_dotenv()

print(os.listdir('../'))

# Initialize Hydra configuration
initialize(config_path="../conf/config", version_base=None)
cfg = compose(config_name="default")

# Ensure logs directory exists
log_dir = cfg.logging.log_dir if hasattr(cfg, "logging") and hasattr(cfg.logging, "log_dir") else "logs"
os.makedirs(os.path.join(os.getcwd(), log_dir), exist_ok=True)

# Set up logging
logger = setup_logger(
    __name__, 
    log_level=cfg.logging.level if hasattr(cfg, "logging") and hasattr(cfg.logging, "level") else "INFO",
    log_format=cfg.logging.format if hasattr(cfg, "logging") and hasattr(cfg.logging, "format") else None,
    log_dir=log_dir
)

# –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: common_handlers –¥–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π
HANDLER_MODULES = [
    common_handlers,    # –í–ê–ñ–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ meta-—Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–≤—ã–º–∏
    admin_handlers,
    user_handlers,
    language_handlers,
    study_handlers,
]

# –û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω mapping –¥–ª—è common_handlers
HANDLER_REGISTRATION_MAP = {
    common_handlers: 'register_common_handlers',
    admin_handlers: 'register_admin_handlers',
    user_handlers: 'register_user_handlers',
    language_handlers: 'register_language_handlers',
    study_handlers: 'register_study_handlers',
}

def register_all_handlers(dispatcher: Dispatcher) -> None:
    """
    Register all handlers for the bot.
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è.
    
    Args:
        dispatcher: Aiogram dispatcher
    """
    logger.info("Starting handler registration...")
    
    registered_count = 0
    failed_count = 0
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    for module in HANDLER_MODULES:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            registration_function_name = HANDLER_REGISTRATION_MAP.get(module)
            
            if registration_function_name and hasattr(module, registration_function_name):
                # –í—ã–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                registration_function = getattr(module, registration_function_name)
                registration_function(dispatcher)
                logger.info(f"‚úÖ Registered handlers from {module.__name__} using {registration_function_name}")
                registered_count += 1
                
            elif hasattr(module, 'register_handlers'):
                # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                module.register_handlers(dispatcher)
                logger.info(f"‚úÖ Registered handlers from {module.__name__} using register_handlers")
                registered_count += 1
                
            else:
                logger.error(f"‚ùå Module {module.__name__} has no suitable registration function")
                logger.info(f"Available attributes: {[attr for attr in dir(module) if 'register' in attr.lower()]}")
                failed_count += 1
                
        except Exception as e:
            logger.error(f"‚ùå Failed to register handlers from {module.__name__}: {e}", exc_info=True)
            failed_count += 1
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
            continue
    
    logger.info(f"Handler registration completed: {registered_count} successful, {failed_count} failed")
    
    if failed_count > 0:
        logger.warning(f"‚ö†Ô∏è Some handlers failed to register. Bot functionality may be limited.")
    
    if registered_count == 0:
        logger.error("‚ùå No handlers were registered! Bot will not function properly.")
        raise RuntimeError("Critical error: No handlers registered")

def get_admin_ids_from_config(cfg) -> List[int]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    Args:
        cfg: –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Hydra
        
    Returns:
        –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—Ü–µ–ª—ã–µ —á–∏—Å–ª–∞)
    """
    admin_ids = []
    
    if hasattr(cfg, "bot") and hasattr(cfg.bot, "admin_ids") and cfg.bot.admin_ids:
        # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å ID, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—è—Ç—ã–º–∏
        try:
            admin_ids_str = cfg.bot.admin_ids.split(",")
            admin_ids = [int(admin_id.strip()) for admin_id in admin_ids_str if admin_id.strip()]
            logger.info(f"Loaded {len(admin_ids)} admin IDs from config")
        except (ValueError, AttributeError) as e:
            logger.error(f"Failed to parse admin IDs from config: {e}")
    else:
        logger.info("No admin IDs configured")
    
    return admin_ids

async def check_system_health(bot: Bot, api_client: APIClient) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        api_client: API –∫–ª–∏–µ–Ω—Ç
        
    Returns:
        dict: –°—Ç–∞—Ç—É—Å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    """
    health_status = {
        "bot": True,  # –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
        "api_connection": False,
        "database": False,
        "admin_notification_sent": False
    }
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        logger.info("Checking API connection...")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ get_languages –≤–º–µ—Å—Ç–æ /health
        languages_response = await api_client.get_languages()
        health_status["api_connection"] = languages_response.get("success", False)
        health_status["database"] = languages_response.get("success", False)
        
        if health_status["api_connection"]:
            logger.info("‚úÖ API connection and database connectivity successful")
        else:
            logger.error("‚ùå API connection or database connectivity failed")
            error_details = languages_response.get("error", "Unknown error")
            logger.error(f"Error details: {error_details}")
            
    except Exception as e:
        logger.error(f"‚ùå Health check failed: {e}", exc_info=True)
        health_status["api_connection"] = False
        health_status["database"] = False
    
    return health_status

async def notify_admins_about_startup(bot: Bot, health_status: dict, admin_ids: List[int]) -> bool:
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å–µ —Å–∏—Å—Ç–µ–º—ã.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        health_status: –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
        admin_ids: –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        
    Returns:
        bool: True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω
    """
    if not admin_ids:
        logger.info("No admin IDs configured, skipping admin notifications")
        return False
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
    all_systems_ok = health_status["api_connection"] and health_status["database"]
    status_icon = "‚úÖ" if all_systems_ok else "‚ö†Ô∏è"
    
    startup_message = (
        f"{status_icon} **–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω**\n\n"
        f"ü§ñ –ë–æ—Ç: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if health_status['bot'] else '‚ùå –û—à–∏–±–∫–∞'}\n"
        f"üîó API: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if health_status['api_connection'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
        f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞' if health_status['database'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}\n\n"
        f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"–í–µ—Ä—Å–∏—è: Language Learning Bot v1.0"
    )
    
    if not all_systems_ok:
        startup_message += (
            f"\n\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π.\n"
            f"–ë–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
        )
    
    successful_notifications = 0
    
    for admin_id in admin_ids:
        try:
            await bot.send_message(admin_id, startup_message, parse_mode="Markdown")
            successful_notifications += 1
            logger.info(f"‚úÖ Startup notification sent to admin {admin_id}")
        except Exception as e:
            logger.error(f"‚ùå Failed to send startup notification to admin {admin_id}: {e}")
    
    if successful_notifications > 0:
        logger.info(f"Startup notifications sent to {successful_notifications}/{len(admin_ids)} admins")
        return True
    else:
        logger.warning("Failed to send startup notifications to any admins")
        return False

async def setup_middleware(dispatcher: Dispatcher) -> None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω StateValidationMiddleware.
    
    Args:
        dispatcher: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
    """
    logger.info("Setting up middleware...")
    
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º)
        auth_middleware = AuthMiddleware()
        dispatcher.update.middleware(auth_middleware)
        logger.info("‚úÖ AuthMiddleware registered")
        
        # –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
        state_validation_middleware = StateValidationMiddleware(
            validate_states=True,
            auto_recover=True
        )
        dispatcher.update.middleware(state_validation_middleware)
        logger.info("‚úÖ StateValidationMiddleware registered")
        
        logger.info("All middleware registered successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Failed to setup middleware: {e}", exc_info=True)
        raise

async def on_startup(dispatcher: Dispatcher, bot: Bot) -> None:
    """
    Execute actions on application startup.
    Enhanced with system health checks and admin notifications.
    
    Args:
        dispatcher: Aiogram dispatcher
        bot: Aiogram bot instance
    """
    logger.info("=" * 50)
    logger.info("üöÄ Starting Language Learning Bot...")
    logger.info("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º API client, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ main()
    api_client = get_api_client_from_bot(bot)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    health_status = await check_system_health(bot, api_client)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_ids = get_admin_ids_from_config(cfg)
    
    if api_client:
        logger.info("‚úÖ API client found successfully")
        
        if health_status["api_connection"] and health_status["database"]:
            logger.info("‚úÖ All systems operational")
        else:
            logger.warning("‚ö†Ô∏è Some systems are not fully operational")
            
    else:
        logger.error("‚ùå API client is not available. Bot might not work properly!")
        health_status["api_connection"] = False
        health_status["database"] = False
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
    if admin_ids:
        health_status["admin_notification_sent"] = await notify_admins_about_startup(
            bot, health_status, admin_ids
        )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
    await setup_middleware(dispatcher)
    
    # Register all handlers
    register_all_handlers(dispatcher)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ BotManager
    bot_manager = dispatcher.get("bot_manager")
    if bot_manager:
        try:
            await bot_manager.setup_commands()
            logger.info("‚úÖ Bot commands configured")
        except Exception as e:
            logger.error(f"‚ùå Failed to setup bot commands: {e}")
    else:
        logger.warning("‚ö†Ô∏è Bot manager not found, commands may not be configured")
    
    logger.info("=" * 50)
    logger.info("üéâ Bot started successfully!")
    logger.info("=" * 50)

async def on_shutdown(dispatcher: Dispatcher) -> None:
    """
    Execute actions on application shutdown.
    Enhanced with cleanup and admin notifications.
    
    Args:
        dispatcher: Aiogram dispatcher
    """
    logger.info("=" * 30)
    logger.info("üõë Shutting down bot...")
    logger.info("=" * 30)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    try:
        admin_ids = get_admin_ids_from_config(cfg)
        if admin_ids:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–æ—Ç –∏–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            bot = dispatcher.get("bot")
            if not bot:
                # Fallback - –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                import inspect
                frame = inspect.currentframe()
                try:
                    while frame:
                        if 'bot' in frame.f_locals:
                            bot = frame.f_locals['bot']
                            break
                        frame = frame.f_back
                finally:
                    del frame
            
            if bot:
                shutdown_message = (
                    f"üõë **–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n\n"
                    f"–í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                )
                
                for admin_id in admin_ids:
                    try:
                        await bot.send_message(admin_id, shutdown_message, parse_mode="Markdown")
                        logger.info(f"‚úÖ Shutdown notification sent to admin {admin_id}")
                    except Exception as e:
                        logger.error(f"‚ùå Failed to send shutdown notification to admin {admin_id}: {e}")
            else:
                logger.warning("‚ö†Ô∏è Bot instance not available for shutdown notifications")
                
    except Exception as e:
        logger.error(f"Error during admin shutdown notification: {e}")
    
    logger.info("üèÅ Bot stopped successfully!")

def load_secrets(cfg, path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞.
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Hydra —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    """
    try:
        path = os.path.expanduser(path)
        path = os.path.expandvars(path)
        logger.info(f"Looking for secrets file at: {path}")

        if os.path.exists(path):
            logger.info(f"Found secrets file: {path}")
            with open(path, 'r') as f:
                secrets = yaml.safe_load(f)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
            if secrets and isinstance(secrets, dict) and 'bot' in secrets and 'token' in secrets['bot']:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                cfg.bot.token = secrets['bot']['token']
                logger.info("‚úÖ Bot token successfully loaded from external file")
                return True
            else:
                logger.warning("‚ö†Ô∏è Secrets file found but no valid bot token")
                
    except Exception as e:
        logger.error(f"Error loading secrets from {path}: {e}")
    
    logger.info("‚ÑπÔ∏è External secrets not loaded, using environment variables")
    return False

def validate_configuration(cfg) -> bool:
    """
    –ù–û–í–û–ï: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.
    
    Args:
        cfg: –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
    """
    logger.info("Validating configuration...")
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    if not hasattr(cfg, "bot") or not hasattr(cfg.bot, "token") or not cfg.bot.token:
        issues.append("Bot token is not configured")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not hasattr(cfg, "api"):
        issues.append("API configuration is missing")
    else:
        if not hasattr(cfg.api, "base_url"):
            issues.append("API base_url is not configured")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if not hasattr(cfg, "logging"):
        logger.warning("‚ö†Ô∏è Logging configuration is missing, using defaults")
    
    if issues:
        logger.error("‚ùå Configuration validation failed:")
        for issue in issues:
            logger.error(f"  - {issue}")
        return False
    
    logger.info("‚úÖ Configuration validation passed")
    return True

async def main() -> None:
    """
    Initialize and start the Telegram bot.
    Enhanced with improved error handling and system monitoring.
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã
        secrets_loaded = load_secrets(cfg, "~/.ssh/bot.yaml")
        if not secrets_loaded:
            logger.info("Using environment variables for configuration")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not validate_configuration(cfg):
            logger.error("‚ùå Configuration validation failed!")
            sys.exit(1)

        # Get bot token from configuration
        bot_token = cfg.bot.token
        logger.info("‚úÖ Bot token configured")
        
        # Create bot and dispatcher instances
        bot = Bot(token=bot_token)
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
        
        logger.info("‚úÖ Bot and dispatcher instances created")
                
        # Initialize API client –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Hydra
        api_base_url = cfg.api.base_url if hasattr(cfg, "api") and hasattr(cfg.api, "base_url") else "http://localhost:8500"
        api_timeout = int(cfg.api.timeout) if hasattr(cfg, "api") and hasattr(cfg.api, "timeout") else 5
        api_retry_count = int(cfg.api.retry_count) if hasattr(cfg, "api") and hasattr(cfg.api, "retry_count") else 3
        api_prefix = cfg.api.prefix if hasattr(cfg, "api") and hasattr(cfg.api, "prefix") else "/api"

        logger.info(f"Initializing API client:")
        logger.info(f"  - Base URL: {api_base_url}")
        logger.info(f"  - Timeout: {api_timeout}s")
        logger.info(f"  - Retry count: {api_retry_count}")
        logger.info(f"  - API prefix: {api_prefix}")

        api_client = APIClient(
            base_url=api_base_url,
            api_prefix=api_prefix,
            timeout=api_timeout,
            retry_count=api_retry_count
        )        
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º api_client –∏—Å–ø–æ–ª—å–∑—É—è —É—Ç–∏–ª–∏—Ç—É
        store_api_client(bot, dp, api_client)
        logger.info("‚úÖ API client stored successfully")
        
        # Create bot manager
        bot_manager = BotManager(bot, dp)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º bot_manager –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
        dp["bot_manager"] = bot_manager
        dp["bot"] = bot  # –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ shutdown
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å –±–æ—Ç–æ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É —á–µ—Ä–µ–∑ –±–æ—Ç
        setattr(bot, "dispatcher", dp)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)
        
        logger.info("‚úÖ Startup and shutdown handlers registered")
        logger.info("üîÑ Starting polling...")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        skip_updates = cfg.bot.skip_updates if hasattr(cfg, "bot") and hasattr(cfg.bot, "skip_updates") else False
        
        await dp.start_polling(
            bot,
            skip_updates=skip_updates,
        )

    except KeyboardInterrupt:
        logger.info("üî¥ Keyboard interrupt received")
        raise
    except Exception as e:
        logger.error(f"‚ùå Critical error during bot startup: {e}", exc_info=True)
        
        # –ü–æ–ø—ã—Ç–∫–∞ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        try:
            admin_ids = get_admin_ids_from_config(cfg)
            if admin_ids and 'bot' in locals():
                error_message = (
                    f"üî• **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞**\n\n"
                    f"–û—à–∏–±–∫–∞: {str(e)}\n"
                    f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
                )
                
                for admin_id in admin_ids:
                    try:
                        await bot.send_message(admin_id, error_message, parse_mode="Markdown")
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
        
        sys.exit(1)


if __name__ == "__main__":
    try:
        parser = argparse.ArgumentParser(description='–ó–∞–ø—É—Å–∫ Language Learning Bot')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        parser.add_argument('--process-name', type=str, help='–ò–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
        parser.add_argument('--debug', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º')
        parser.add_argument('--no-admin-notifications', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤')
        parser.add_argument('--validate-only', action='store_true', help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –≤—ã–π—Ç–∏')
        
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –Ω–æ –Ω–µ –≤—ã—Ö–æ–¥–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        args, unknown = parser.parse_known_args()
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
        if unknown:
            logger.warning(f"‚ö†Ô∏è Unknown arguments: {unknown}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏
        if args.debug:
            logging.getLogger().setLevel(logging.DEBUG)
            logger.setLevel(logging.DEBUG)
            logger.info("üîç Debug mode enabled")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
        if args.process_name:
            logger.info(f"üè∑Ô∏è Process identifier: {args.process_name}")
        else:
            logger.info("üè∑Ô∏è Process started without identifier")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        pid = os.getpid()
        logger.info(f"üÜî Process ID (PID): {pid}")
        logger.info(f"üìÅ Working directory: {os.getcwd()}")
        logger.info(f"üêç Python version: {sys.version}")
        logger.info(f"üíæ Platform: {sys.platform}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        try:
            if hasattr(os, 'uname'):
                logger.info(f"üñ•Ô∏è Architecture: {os.uname().machine}")
        except:
            logger.info("üñ•Ô∏è Architecture: Unknown")
        
        # –†–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if args.validate_only:
            logger.info("üîç Validation-only mode enabled")
            secrets_loaded = load_secrets(cfg, "~/.ssh/bot.yaml")
            if validate_configuration(cfg):
                logger.info("‚úÖ Configuration is valid")
                sys.exit(0)
            else:
                logger.error("‚ùå Configuration validation failed")
                sys.exit(1)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        asyncio.run(main())
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Received interrupt signal")
        logger.info("üîÑ Shutting down gracefully...")
    except Exception as e:
        logger.error(f"üí• Critical error in main: {e}", exc_info=True)
    finally:
        logger.info("üèÅ Process terminated!")
        