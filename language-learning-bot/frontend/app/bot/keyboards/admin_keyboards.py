"""
Refactored keyboards for admin interface.
Now uses centralized callback constants and improved callback generation.
UPDATED: Added word editing and deletion keyboards.
UPDATED: Added export words button.
"""

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# Import callback constants and utilities
from app.utils.callback_constants import CallbackData, format_admin_callback


def get_admin_keyboard() -> InlineKeyboardMarkup:
    """
    Create keyboard for admin menu.
    Now uses centralized callback constants.
    
    Returns:
        InlineKeyboardMarkup: Admin menu keyboard
    """
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞–º–∏", 
        callback_data=CallbackData.ADMIN_LANGUAGES
    ))
    
    builder.add(InlineKeyboardButton(
        text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", 
        callback_data=CallbackData.ADMIN_USERS
    ))
    
    builder.add(InlineKeyboardButton(
        text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
        callback_data=CallbackData.ADMIN_STATS_CALLBACK
    ))
    
    builder.add(InlineKeyboardButton(
        text="üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", 
        callback_data=CallbackData.ADMIN_SEND_MESSAGE_TO_ALL
    ))

    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", 
        callback_data=CallbackData.BACK_TO_START
    ))
    
    builder.adjust(1)  # One button per row
    return builder.as_markup()


def get_languages_keyboard(languages: list) -> InlineKeyboardMarkup:
    """
    Create keyboard for languages list.
    Now uses centralized callback constants.
    
    Args:
        languages: List of language dictionaries
        
    Returns:
        InlineKeyboardMarkup: Languages keyboard
    """
    builder = InlineKeyboardBuilder()
    
    # Add language buttons
    for language in languages:
        lang_id = language.get('_id', language.get('id'))
        
        builder.add(InlineKeyboardButton(
            text=f"{language['name_ru']} ({language['name_foreign']})", 
            callback_data=CallbackData.EDIT_LANGUAGE_TEMPLATE.format(language_id=lang_id)
        ))
    
    # Add create new language button
    builder.add(InlineKeyboardButton(
        text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —è–∑—ã–∫", 
        callback_data=CallbackData.CREATE_LANGUAGE
    ))
    
    # Add back button
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—é", 
        callback_data=CallbackData.BACK_TO_ADMIN
    ))
    
    # Layout: one button per row for languages, then action buttons
    button_layout = [1] * len(languages) + [1, 1]  # Each language + create + back
    builder.adjust(*button_layout)
    
    return builder.as_markup()


def get_edit_language_keyboard(language_id: str) -> InlineKeyboardMarkup:
    """
    Create keyboard for editing a language.
    Now uses centralized callback constants.
    UPDATED: Added export words button.
    
    Args:
        language_id: ID of the language to edit
        
    Returns:
        InlineKeyboardMarkup: Language editing keyboard
    """
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", 
        callback_data=f"edit_name_ru_{language_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", 
        callback_data=f"edit_name_foreign_{language_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å–æ —Å–ª–æ–≤–∞–º–∏", 
        callback_data=CallbackData.UPLOAD_TO_LANG_TEMPLATE.format(language_id=language_id)
    ))
    
    builder.add(InlineKeyboardButton(
        text="üì• –≠–∫—Å–ø–æ—Ä—Ç —Å–ª–æ–≤", 
        callback_data=f"export_words_{language_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üîç –ù–∞–π—Ç–∏ —Å–ª–æ–≤–æ –ø–æ –Ω–æ–º–µ—Ä—É", 
        callback_data=f"search_word_by_number_{language_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —è–∑—ã–∫", 
        callback_data=CallbackData.DELETE_LANGUAGE_TEMPLATE.format(language_id=language_id)
    ))
    
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —è–∑—ã–∫–∞–º", 
        callback_data=CallbackData.BACK_TO_LANGUAGES
    ))
    
    builder.adjust(1)  # One button per row
    return builder.as_markup()


def get_export_format_keyboard(language_id: str) -> InlineKeyboardMarkup:
    """
    Create keyboard for selecting export format.
    
    Args:
        language_id: ID of the language to export
        
    Returns:
        InlineKeyboardMarkup: Export format selection keyboard
    """
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="üìä Excel (.xlsx)", 
        callback_data=f"export_format_{language_id}_xlsx"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üìÑ CSV (.csv)", 
        callback_data=f"export_format_{language_id}_csv"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üîß JSON (.json)", 
        callback_data=f"export_format_{language_id}_json"
    ))
    
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —è–∑—ã–∫—É", 
        callback_data=CallbackData.EDIT_LANGUAGE_TEMPLATE.format(language_id=language_id)
    ))
    
    builder.adjust(1)  # One button per row
    return builder.as_markup()


def get_export_range_keyboard(language_id: str, format: str) -> InlineKeyboardMarkup:
    """
    Create keyboard for selecting export range.
    
    Args:
        language_id: ID of the language to export
        format: Export format (xlsx, csv, json)
        
    Returns:
        InlineKeyboardMarkup: Export range selection keyboard
    """
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="üìã –í—Å–µ —Å–ª–æ–≤–∞", 
        callback_data=f"export_range_{language_id}_{format}_all"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üî¢ –£–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω", 
        callback_data=f"export_range_{language_id}_{format}_range"
    ))
    
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ñ–æ—Ä–º–∞—Ç—É", 
        callback_data=f"export_words_{language_id}"
    ))
    
    builder.adjust(1)  # One button per row
    return builder.as_markup()


def get_word_actions_keyboard(word_id: str, language_id: str) -> InlineKeyboardMarkup:
    """
    Create keyboard with word action buttons.
    UPDATED: Enhanced with new edit and delete options.
    
    Args:
        word_id: ID of the word
        language_id: ID of the language
        
    Returns:
        InlineKeyboardMarkup: Word actions keyboard
    """
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ", 
        callback_data=CallbackData.EDIT_WORD_TEMPLATE.format(word_id=word_id)
    ))
    
    builder.add(InlineKeyboardButton(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", 
        callback_data=CallbackData.DELETE_WORD_TEMPLATE.format(word_id=word_id)
    ))
    
    builder.add(InlineKeyboardButton(
        text="üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ", 
        callback_data=f"search_word_by_number_{language_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —è–∑—ã–∫—É", 
        callback_data=CallbackData.EDIT_LANGUAGE_TEMPLATE.format(language_id=language_id)
    ))
    
    builder.adjust(1)  # One button per row
    return builder.as_markup()

def get_word_filed_edit_keyboard(word_id: str, language_id: str) -> InlineKeyboardMarkup:
    """
    Create keyboard for word editing menu.
    
    Args:
        word_id: ID of the word
        language_id: ID of the language
        
    Returns:
        InlineKeyboardMarkup: Word editing keyboard
    """
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="üî§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ", 
        callback_data=CallbackData.EDIT_WORDFIELD_FOREIGN_TEMPLATE.format(word_id=word_id)
    ))
    
    builder.add(InlineKeyboardButton(
        text="üá∑üá∫ –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥", 
        callback_data=CallbackData.EDIT_WORDFIELD_TRANSLATION_TEMPLATE.format(word_id=word_id)
    ))
    
    builder.add(InlineKeyboardButton(
        text="üîä –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é", 
        callback_data=CallbackData.EDIT_WORDFIELD_TRANSCRIPTION_TEMPLATE.format(word_id=word_id)
    ))
    
    builder.add(InlineKeyboardButton(
        text="üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞", 
        callback_data=CallbackData.EDIT_WORDFIELD_NUMBER_TEMPLATE.format(word_id=word_id)
    ))
    
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ª–æ–≤—É", 
        callback_data=CallbackData.BACK_TO_WORD_DETAILS
    ))
    
    builder.adjust(1)  # One button per row
    return builder.as_markup()


def get_word_delete_confirmation_keyboard(word_id: str) -> InlineKeyboardMarkup:
    """
    Create keyboard for word deletion confirmation.
    
    Args:
        word_id: ID of the word to delete
        
    Returns:
        InlineKeyboardMarkup: Word deletion confirmation keyboard
    """
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", 
        callback_data=CallbackData.CONFIRM_WORD_DELETE_TEMPLATE.format(word_id=word_id)
    ))
    
    builder.add(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", 
        callback_data=CallbackData.CANCEL_WORD_DELETE_TEMPLATE.format(word_id=word_id)
    ))
    
    builder.adjust(2)  # Two buttons in one row
    return builder.as_markup()


def get_users_keyboard(users: list, page: int = 0, per_page: int = 10) -> InlineKeyboardMarkup:
    """
    Create keyboard for users list with pagination.
    Now uses centralized callback constants.
    
    Args:
        users: List of user dictionaries
        page: Current page number (starting from 0)
        per_page: Number of users per page
        
    Returns:
        InlineKeyboardMarkup: Users list keyboard with pagination
    """
    builder = InlineKeyboardBuilder()
    
    # Calculate page boundaries
    start_idx = page * per_page
    end_idx = min(start_idx + per_page, len(users))
    
    # Add user buttons for current page
    for i in range(start_idx, end_idx):
        user = users[i]
        user_id = user.get('_id', user.get('id'))
        username = user.get('username', '–ù–µ—Ç username')
        first_name = user.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        
        # Format display name
        display_name = f"{first_name}"
        if username and username != '–ù–µ—Ç username':
            display_name += f" (@{username})"
        
        # Add admin indicator
        if user.get('is_admin', False):
            display_name += " üëë"
        
        builder.add(InlineKeyboardButton(
            text=display_name, 
            callback_data=f"view_user_{user_id}"
        ))
    
    # Add navigation buttons
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ü—Ä–µ–¥.", 
            callback_data=CallbackData.USERS_PAGE_TEMPLATE.format(page_number=page-1)
        ))
    
    if end_idx < len(users):
        nav_buttons.append(InlineKeyboardButton(
            text="–°–ª–µ–¥. ‚û°Ô∏è", 
            callback_data=CallbackData.USERS_PAGE_TEMPLATE.format(page_number=page+1)
        ))
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # Add page info
    total_pages = (len(users) + per_page - 1) // per_page
    if total_pages > 1:
        builder.add(InlineKeyboardButton(
            text=f"–°—Ç—Ä. {page + 1}/{total_pages}",
            callback_data=CallbackData.PAGE_INFO
        ))
    
    # Add back button
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", 
        callback_data=CallbackData.BACK_TO_ADMIN
    ))
    
    # Set layout: users, then navigation, then page info, then back
    users_count = end_idx - start_idx
    layout = [1] * users_count  # One button per user
    
    if nav_buttons:
        layout.append(len(nav_buttons))  # Navigation buttons row
    
    if total_pages > 1:
        layout.append(1)  # Page info button
    
    layout.append(1)  # Back button
    
    builder.adjust(*layout)
    return builder.as_markup()


def get_user_detail_keyboard(user_id: str) -> InlineKeyboardMarkup:
    """
    Create keyboard for user detail view.
    
    Args:
        user_id: ID of the user
        
    Returns:
        InlineKeyboardMarkup: User detail keyboard
    """
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
        callback_data=f"user_stats_{user_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", 
        callback_data=CallbackData.ADMIN_USERS
    ))
    
    builder.adjust(1)  # One button per row
    return builder.as_markup()

# –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ frontend/app/bot/keyboards/admin_keyboards.py

def get_word_actions_keyboard_from_study(word_id: str, language_id: str) -> InlineKeyboardMarkup:
    """
    Create keyboard with word action buttons when coming from study mode.
    This keyboard includes a "Return to Study" button instead of regular admin navigation.
    
    Args:
        word_id: ID of the word
        language_id: ID of the language
        
    Returns:
        InlineKeyboardMarkup: Word actions keyboard for study context
    """
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–æ", 
        callback_data=CallbackData.EDIT_WORD_TEMPLATE.format(word_id=word_id)
    ))
    
    builder.add(InlineKeyboardButton(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", 
        callback_data=CallbackData.DELETE_WORD_TEMPLATE.format(word_id=word_id)
    ))
    
    # –û–¢–õ–ò–ß–ò–ï: –í–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π –∞–¥–º–∏–Ω-–Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∫ –∏–∑—É—á–µ–Ω–∏—é
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–∑—É—á–µ–Ω–∏—é", 
        callback_data=CallbackData.BACK_TO_STUDY_FROM_ADMIN
    ))
    
    builder.adjust(1)  # One button per row
    return builder.as_markup()


def get_word_edit_keyboard_from_study(word_id: str, language_id: str) -> InlineKeyboardMarkup:
    """
    Create keyboard for word editing menu when coming from study mode.
    
    Args:
        word_id: ID of the word
        language_id: ID of the language
        
    Returns:
        InlineKeyboardMarkup: Word editing keyboard for study context
    """
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="üî§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ", 
        callback_data=CallbackData.EDIT_WORDFIELD_FOREIGN_TEMPLATE.format(word_id=word_id)
    ))
    
    builder.add(InlineKeyboardButton(
        text="üá∑üá∫ –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥", 
        callback_data=CallbackData.EDIT_WORDFIELD_TRANSLATION_TEMPLATE.format(word_id=word_id)
    ))
    
    builder.add(InlineKeyboardButton(
        text="üîä –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é", 
        callback_data=CallbackData.EDIT_WORDFIELD_TRANSCRIPTION_TEMPLATE.format(word_id=word_id)
    ))
    
    builder.add(InlineKeyboardButton(
        text="üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞", 
        callback_data=CallbackData.EDIT_WORDFIELD_NUMBER_TEMPLATE.format(word_id=word_id)
    ))
    
    # –û–¢–õ–ò–ß–ò–ï: –í–æ–∑–≤—Ä–∞—Ç –∫ –∏–∑—É—á–µ–Ω–∏—é –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π –∞–¥–º–∏–Ω-–Ω–∞–≤–∏–≥–∞—Ü–∏–∏  
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ª–æ–≤—É", 
        callback_data=CallbackData.BACK_TO_WORD_DETAILS
    ))
    
    builder.add(InlineKeyboardButton(
        text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–∑—É—á–µ–Ω–∏—é", 
        callback_data=CallbackData.BACK_TO_STUDY_FROM_ADMIN
    ))
    
    builder.adjust(1)  # One button per row
    return builder.as_markup()


def get_word_delete_confirmation_keyboard_from_study(word_id: str) -> InlineKeyboardMarkup:
    """
    Create keyboard for word deletion confirmation when coming from study mode.
    
    Args:
        word_id: ID of the word to delete
        
    Returns:
        InlineKeyboardMarkup: Word deletion confirmation keyboard for study context
    """
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", 
        callback_data=CallbackData.CONFIRM_WORD_DELETE_TEMPLATE.format(word_id=word_id)
    ))
    
    builder.add(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", 
        callback_data=CallbackData.CANCEL_WORD_DELETE_TEMPLATE.format(word_id=word_id)
    ))
    
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ë—ã—Å—Ç—Ä—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∫ –∏–∑—É—á–µ–Ω–∏—é
    builder.add(InlineKeyboardButton(
        text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–∑—É—á–µ–Ω–∏—é", 
        callback_data=CallbackData.BACK_TO_STUDY_FROM_ADMIN
    ))
    
    builder.adjust(2, 1)  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: 2 –∫–Ω–æ–ø–∫–∏, –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: 1 –∫–Ω–æ–ø–∫–∞
    return builder.as_markup()
    