"""
Common functions and handlers for hint operations.
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from app.utils.logger import setup_logger
from app.utils.state_models import UserWordState

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
from app.bot.states.centralized_states import HintStates, StudyStates

from app.bot.handlers.study.study_words import show_study_word

# –°–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
cancel_router = Router()

# Set up logging
logger = setup_logger(__name__)

@cancel_router.message(Command("cancel"), HintStates.creating, flags={"priority": 100})  # –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
@cancel_router.message(Command("cancel"), HintStates.editing, flags={"priority": 100})   # –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
@cancel_router.message(Command("cancel"), HintStates.viewing, flags={"priority": 100})   # –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
@cancel_router.message(Command("cancel"), HintStates.confirming_deletion, flags={"priority": 100})  # –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
async def cmd_cancel_hint(message: Message, state: FSMContext):
    """
    Handle the /cancel command to abort hint creation/editing/viewing/deletion.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    # Get current state name
    current_state = await state.get_state()
    logger.info(f"Cancel command received in state: {current_state}")
    
    # Determine what action was cancelled
    action_cancelled = ""
    if current_state == HintStates.creating.state:
        action_cancelled = "—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏"
    elif current_state == HintStates.editing.state:
        action_cancelled = "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏"
    elif current_state == HintStates.viewing.state:
        action_cancelled = "–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥—Å–∫–∞–∑–∫–∏"
    elif current_state == HintStates.confirming_deletion.state:
        action_cancelled = "—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏"
    else:
        action_cancelled = "–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"
    
    # Get user word state to determine correct return state
    user_word_state = await UserWordState.from_state(state)
    
    if user_word_state.is_valid():
        word_shown = user_word_state.get_flag("word_shown", False)
        
        # Return to appropriate study state
        if word_shown:
            await state.set_state(StudyStates.viewing_word_details)
        else:
            await state.set_state(StudyStates.studying)
        
        await message.answer(f"‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ {action_cancelled}. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤.")
        
        try:
            # Attempt to show the study word again
            await show_study_word(message, state)
        except Exception as e:
            logger.error(f"Error showing study word after cancel: {e}", exc_info=True)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∏–∑—É—á–µ–Ω–∏—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /study —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    else:
        logger.error("Invalid user word state when cancelling hint operation")
        
        # Fallback to main study state
        await state.set_state(StudyStates.studying)
        await message.answer(
            f"‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ {action_cancelled}.\n"
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Å—Å–∏–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /study –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–∑—É—á–µ–Ω–∏—è."
        )

# –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ "–Ω–∞–∑–∞–¥ –∫ —Å–ª–æ–≤—É"
@cancel_router.callback_query(F.data == "back_to_word", HintStates.viewing)
async def process_back_to_word_from_viewing(callback: CallbackQuery, state: FSMContext):
    """
    Process callback to return to word study from hint viewing state.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    logger.info(f"Back to word from hint viewing from {callback.from_user.full_name}")
    
    # Get user word state to determine correct return state
    user_word_state = await UserWordState.from_state(state)
    
    if user_word_state.is_valid():
        word_shown = user_word_state.get_flag("word_shown", False)
        
        # Return to appropriate study state
        if word_shown:
            await state.set_state(StudyStates.viewing_word_details)
        else:
            await state.set_state(StudyStates.studying)
        
        # Show the study word again
        await show_study_word(callback, state)
        
        await callback.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–∑—É—á–µ–Ω–∏—é —Å–ª–æ–≤–∞")
    else:
        logger.error("Invalid user word state when returning from hint viewing")
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞")
        
        # Fallback to main study state
        await state.set_state(StudyStates.studying)
        await callback.message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ª–æ–≤—É.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /study –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–∑—É—á–µ–Ω–∏—è."
        )

# –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ help –∫–æ–º–∞–Ω–¥—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
@cancel_router.message(Command("help"), HintStates.creating)
@cancel_router.message(Command("help"), HintStates.editing)
@cancel_router.message(Command("help"), HintStates.viewing)
@cancel_router.message(Command("help"), HintStates.confirming_deletion)
async def cmd_help_during_hint_operations(message: Message, state: FSMContext):
    """
    Handle the /help command during hint operations.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    current_state = await state.get_state()
    logger.info(f"Help command during hint operation from {message.from_user.full_name}, state: {current_state}")
    
    help_text = "üí° <b>–ü–æ–º–æ—â—å –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏:</b>\n\n"
    
    if current_state == HintStates.creating.state:
        help_text += (
            "–í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Å–ª–æ–≤–∞.\n\n"
            "<b>–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:</b>\n"
            "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏\n"
            "‚Ä¢ –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "‚Ä¢ /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ\n\n"
            "<b>–¢–∏–ø—ã –ø–æ–¥—Å–∫–∞–∑–æ–∫:</b>\n"
            "üß† –ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º - —Å–≤—è–∑—å —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º\n"
            "üí° –ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –¥–ª—è —Ñ–æ–Ω–µ—Ç–∏–∫–∏ - –ø–æ–º–æ—â—å —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º\n"
            "üéµ –ó–≤—É—á–∞–Ω–∏–µ –ø–æ —Å–ª–æ–≥–∞–º - —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏\n"
            "‚úçÔ∏è –ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è - –ø–æ–º–æ—â—å —Å –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±—É–∫–≤"
        )
    elif current_state == HintStates.editing.state:
        help_text += (
            "–í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Å–ª–æ–≤–∞.\n\n"
            "<b>–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:</b>\n"
            "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏\n"
            "‚Ä¢ –ó–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "‚Ä¢ /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
            "<b>–°–æ–≤–µ—Ç:</b> –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ—ë –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å."
        )
    elif current_state == HintStates.viewing.state:
        help_text += (
            "–í—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É.\n\n"
            "<b>–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:</b>\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–∞–∑–∞–¥\" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ª–æ–≤—É\n"
            "‚Ä¢ /cancel - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–∑—É—á–µ–Ω–∏—é\n\n"
            "<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É —Å–ª–æ–≤–∞ –Ω–∞ 0."
        )
    elif current_state == HintStates.confirming_deletion.state:
        help_text += (
            "–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏.\n\n"
            "<b>–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:</b>\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ \"–î–∞\" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∏—Ç—å\" –¥–ª—è –æ—Ç–º–µ–Ω—ã\n"
            "‚Ä¢ /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ\n\n"
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
        )
    else:
        help_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏–∑—É—á–µ–Ω–∏—é —Å–ª–æ–≤."
    
    await message.answer(help_text, parse_mode="HTML")

# –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
@cancel_router.message(HintStates.creating)
@cancel_router.message(HintStates.editing)
@cancel_router.message(HintStates.viewing)
@cancel_router.message(HintStates.confirming_deletion)
async def handle_unknown_message_during_hint_operations(message: Message, state: FSMContext):
    """
    Handle unknown messages during hint operations.
    This is a fallback handler for states where specific handlers don't catch the message.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    current_state = await state.get_state()
    logger.info(f"Unknown message during hint operation: state={current_state}, from={message.from_user.full_name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π
    from app.utils.error_utils import is_command
    
    if message.text and is_command(message.text):
        command = message.text.split()[0]
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ, —ç—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        await message.answer(
            f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ {command} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
            "/help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"
        )
    else:
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        state_descriptions = {
            HintStates.creating.state: "—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏",
            HintStates.editing.state: "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏", 
            HintStates.viewing.state: "–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏",
            HintStates.confirming_deletion.state: "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"
        }
        
        state_desc = state_descriptions.get(current_state, "—Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π")
        
        # –î–ª—è viewing –∏ confirming_deletion –Ω–µ –æ–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if current_state in [HintStates.viewing.state, HintStates.confirming_deletion.state]:
            await message.answer(
                f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤–æ –≤—Ä–µ–º—è {state_desc}.\n\n"
                "–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )
        else:
            # –î–ª—è creating –∏ editing –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è
            await message.answer(
                f"‚ö†Ô∏è –°–µ–π—á–∞—Å –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤–æ –≤—Ä–µ–º—è {state_desc}.\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,\n"
                "–ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
            )

# –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—â–∏—Ö callback –≤–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
@cancel_router.callback_query(HintStates.creating)
@cancel_router.callback_query(HintStates.editing)
async def handle_unexpected_callback_during_hint_input(callback: CallbackQuery, state: FSMContext):
    """
    Handle unexpected callbacks during hint input states.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    current_state = await state.get_state()
    logger.info(f"Unexpected callback during hint input: state={current_state}, data={callback.data}")
    
    state_descriptions = {
        HintStates.creating.state: "—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏",
        HintStates.editing.state: "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏"
    }
    
    state_desc = state_descriptions.get(current_state, "–≤–≤–æ–¥–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏")
    
    await callback.answer(
        f"‚ö†Ô∏è –°–µ–π—á–∞—Å –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel.",
        show_alert=True
    )
    
    await callback.message.answer(
        f"‚ö†Ô∏è –ö–Ω–æ–ø–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤–æ –≤—Ä–µ–º—è {state_desc}.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏\n"
        "‚Ä¢ –ò–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    