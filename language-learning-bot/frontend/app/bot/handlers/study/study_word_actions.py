"""
Handlers for word actions during the study process.
"""

from datetime import timedelta

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.utils.api_utils import get_api_client_from_bot
from app.utils.logger import setup_logger
from app.utils.error_utils import validate_state_data
from app.utils.state_models import UserWordState
from app.utils.word_data_utils import update_word_score
from app.utils.formatting_utils import format_date
from app.utils.formatting_utils import format_study_word_message
from app.bot.handlers.study.study_words import show_study_word
from app.bot.keyboards.study_keyboards import create_word_keyboard
from app.utils.formatting_utils import format_date, format_study_word_message, format_active_hints
from app.utils.settings_utils import get_user_language_settings


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å–ª–æ–≤–∞–º–∏
word_router = Router()

logger = setup_logger(__name__)

@word_router.callback_query(F.data == "show_word")
async def process_show_word(callback: CallbackQuery, state: FSMContext):
    """
    Process callback when user wants to see the word.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'show_word' callback from {full_name} ({username})")
    
    # Validate state data
    is_valid, state_data = await validate_state_data(
        state, 
        ["current_word"],
        callback,
        "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ª–æ–≤–∞"
    )
    
    if not is_valid:
        logger.error(f"not is_valid")
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # Get required data
    current_word = state_data["current_word"]
    current_word_id = state_data["current_word_id"]
    db_user_id = state_data["db_user_id"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–≤–∞–Ω callback —Å —ç–∫—Ä–∞–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–ø–æ—Å–ª–µ "–Ø –∑–Ω–∞—é —ç—Ç–æ —Å–ª–æ–≤–æ")
    user_word_state = await UserWordState.from_state(state)
    was_pending_word_know = False
    
    if user_word_state.is_valid():
        was_pending_word_know = user_word_state.get_flag('pending_word_know', False)
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª
        if was_pending_word_know:
            user_word_state.remove_flag('pending_word_know')
            user_word_state.remove_flag('pending_next_word')
            await user_word_state.save_to_state(state)
    
    if 'user_word_data' not in current_word:
        current_word['user_word_data'] = {}
        
    current_skipped = current_word['user_word_data'].get('is_skipped', False)

    # Update word score to 0 (not known), but don't mark as skipped
    success, result = await update_word_score(
        callback.bot,
        db_user_id,
        current_word_id,
        score=0,
        word=current_word,
        message_obj=callback,
        is_skipped=current_skipped # –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏
    )
    
    if not success:
        logger.error(f"not success")
        return

    current_word['user_word_data']['is_skipped'] = result['is_skipped']
    current_word['user_word_data']['check_interval'] = result['check_interval']
    current_word['user_word_data']['next_check_date'] = result['next_check_date']
    current_word['user_word_data']['score'] = result['score']

    # Get word information
    word_foreign = current_word.get("word_foreign", "N/A")
    transcription = current_word.get("transcription", "")
    
    # Get language info for message formatting
    language_id = current_word.get("language_id")
    api_client = get_api_client_from_bot(callback.bot)
    language_response = await api_client.get_language(language_id)
    
    if not language_response["success"] or not language_response["result"]:
        await callback.answer("–û—à–∏–±–∫–∞: —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    language = language_response["result"]
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    word_number = current_word.get('word_number', 'N/A')
    translation = current_word.get('translation', '')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_word_data = current_word.get("user_word_data", {})

    is_skipped = user_word_data.get("is_skipped", False)
    check_interval = user_word_data.get("check_interval", 0)
    next_check_date = user_word_data.get("next_check_date", None)
    score = user_word_data.get("score", 0)
    
    # Mark the word as shown in the state
    if not user_word_state.is_valid():
        logger.error(f"not user_word_state.is_valid()")
        return

    # Set flag that word has been shown
    user_word_state.set_flag('word_shown', True)

    user_word_state.word_data = current_word
    
    # Save updated state
    await user_word_state.save_to_state(state)
    
    # Get active hints
    active_hints = user_word_state.get_active_hints()
    
    # Get used hints
    used_hints = user_word_state.get_flag("used_hints", [])
    
    # Get show_hints setting
    from app.utils.settings_utils import get_show_hints_setting
    show_hints = await get_show_hints_setting(callback, state)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    updated_message = format_study_word_message(
        language.get('name_ru'),
        language.get('name_foreign'),
        word_number,
        translation,
        is_skipped,
        score,
        check_interval,
        next_check_date,
        show_word=True,
        word_foreign=word_foreign,
        transcription=transcription
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    hint_text = await format_active_hints(
        bot=callback.bot,
        user_id=user_word_state.user_id,
        word_id=user_word_state.word_id,
        current_word=current_word,
        active_hints=active_hints,
        include_header=True
    )
    
    updated_message += hint_text
    
    # Create updated keyboard 
    keyboard = create_word_keyboard(
        current_word, 
        word_shown=True, 
        show_hints=show_hints,
        active_hints=active_hints,
        used_hints=used_hints
    )
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û–π, –≤—Å–µ-—Ç–∞–∫–∏ –Ω–µ –∑–Ω–∞—é" –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–ª–æ–≤—É
    if was_pending_word_know:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ª–æ–≤—É, –ù–ï —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            "‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–∑—É—á–µ–Ω–∏—é —Å–ª–æ–≤–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏.",
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ª–æ–≤–µ
        await callback.message.answer(
            updated_message,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–æ" —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –∏–∑—É—á–µ–Ω–∏—è -
        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.edit_text(
                updated_message,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"Error editing message in process_show_word: {e}", exc_info=True)
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(
                updated_message,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    
    await callback.answer()
        
@word_router.callback_query(F.data == "next_word")
async def process_next_word(callback: CallbackQuery, state: FSMContext):
    """
    Process callback to go to the next word without changing score.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'next_word' callback from {full_name} ({username})")
    
    # Advance to next word
    user_word_state = await UserWordState.from_state(state)
    
    if user_word_state.is_valid():
        # Reset word_shown flag
        user_word_state.set_flag('word_shown', False)
        
        # Advance to next word
        user_word_state.advance_to_next_word()
        
        # Save updated state
        await user_word_state.save_to_state(state)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É...")
        
        # Show next word (–∏—Å–ø–æ–ª—å–∑—É–µ–º callback.message –≤–º–µ—Å—Ç–æ callback)
        await show_study_word(callback.message, state)
    else:
        # Fallback to old approach if state model is invalid
        logger.warning("UserWordState invalid, using fallback approach to advance to next word")
        
        # Get current state data
        user_data = await state.get_data()
        current_index = user_data.get("current_study_index", 0) + 1
        
        # Update state with new index
        await state.update_data(current_study_index=current_index)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É...")
        
        # Show next word (–∏—Å–ø–æ–ª—å–∑—É–µ–º callback.message –≤–º–µ—Å—Ç–æ callback)
        await show_study_word(callback.message, state)
    
    await callback.answer()

@word_router.callback_query(F.data == "toggle_word_skip")
async def process_toggle_word_skip(callback: CallbackQuery, state: FSMContext):
    """
    Process callback when user wants to toggle the skip flag for the word.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'toggle_word_skip' callback from {full_name} ({username})")
    
    # Validate state data
    is_valid, state_data = await validate_state_data(
        state, 
        ["current_word", "current_word_id", "db_user_id"],
        callback,
        "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Å–ª–æ–≤–∞"
    )
    
    if not is_valid:
        return
    
    # Get required data
    current_word = state_data["current_word"]
    current_word_id = state_data["current_word_id"]
    db_user_id = state_data["db_user_id"]
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    settings = await get_user_language_settings(callback, state)
    show_debug = settings.get("show_debug", False)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–ª–∞–≥–∞ –ø—Ä–æ–ø—É—Å–∫–∞
    user_word_data = current_word.get("user_word_data", {})
    current_skip_status = user_word_data.get("is_skipped", False)
    
    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–ø—É—Å–∫–∞
    new_skip_status = not current_skip_status
    
    try:
        # Update word with new skip status
        success, result = await update_word_score(
            callback.bot,
            db_user_id,
            current_word_id,
            score=0,
            word=current_word,
            message_obj=callback,
            is_skipped=new_skip_status  # –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–ø—É—Å–∫–∞
        )
        
        if not success:
            return
        
        # Show word information
        word_foreign = current_word.get("word_foreign")
        transcription = current_word.get("transcription", "")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
        status_message = (
            f"‚è© –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: —Å–ª–æ–≤–æ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç {'–ø—Ä–æ–ø—É—Å–∫–∞—Ç—å—Å—è' if new_skip_status else '–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è'} –≤ –±—É–¥—É—â–µ–º.\n\n"
            f"–°–ª–æ–≤–æ: <b>{word_foreign}</b>\n"
        )
        
        if transcription:
            status_message += f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <b>[{transcription}]</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∞
        if show_debug:
            status_message += f"üîç <b>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            status_message += f"ID —Å–ª–æ–≤–∞: {current_word_id}\n"
            status_message += f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–ø—É—Å–∫–∞: {current_skip_status}\n"
            status_message += f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–ø—É—Å–∫–∞: {new_skip_status}\n\n"
        
        await callback.message.answer(
            status_message,
            parse_mode="HTML"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        user_word_state = await UserWordState.from_state(state)
        
        if user_word_state.is_valid() and user_word_state.word_data:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–ø—É—Å–∫–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            if "user_word_data" not in user_word_state.word_data:
                user_word_state.word_data["user_word_data"] = {}
                
            user_word_state.word_data["user_word_data"]["is_skipped"] = new_skip_status
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"Updated word data with new skip status: {new_skip_status}")
            logger.info(f"Word data is_skipped: {user_word_state.word_data.get('user_word_data', {}).get('is_skipped')}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await user_word_state.save_to_state(state)
            
            # Get show_hints setting
            from app.utils.settings_utils import get_show_hints_setting
            show_hints = await get_show_hints_setting(callback, state)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
            used_hints = user_word_state.get_flag("used_hints", [])
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ–≤–æ —Å–Ω–æ–≤–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ —Ñ–ª–∞–≥–æ–º –ø—Ä–æ–ø—É—Å–∫–∞
            await show_study_word(callback.message, state)
            
    except Exception as e:
        logger.error(f"Error processing toggle_word_skip: {e}", exc_info=True)
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–ª–∞–≥–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Å–ª–æ–≤–∞: {str(e)}"
        )
    
    await callback.answer()

@word_router.callback_query(F.data == "word_know")
async def process_word_know(callback: CallbackQuery, state: FSMContext):
    """
    Process callback when user knows the word.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'word_know' callback from {full_name} ({username})")
    
    # Validate state data
    is_valid, state_data = await validate_state_data(
        state, 
        ["current_word", "current_word_id", "db_user_id"],
        callback,
        "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–≤–∞"
    )
    
    if not is_valid:
        logger.error(f"not is_valid")
        return
    
    # Get required data
    current_word = state_data["current_word"]
    current_word_id = state_data["current_word_id"]
    db_user_id = state_data["db_user_id"]
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    settings = await get_user_language_settings(callback, state)
    show_debug = settings.get("show_debug", False)
    
    try:
        # –í–∞–∂–Ω–æ: –£–î–ê–õ–Ø–ï–ú –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ score —Ç—É—Ç
        # –¢–µ–ø–µ—Ä—å score –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤ confirm_next_word
        
        # Show word information
        word_foreign = current_word.get("word_foreign")
        transcription = current_word.get("transcription", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_word_data = current_word.get("user_word_data", {})
        check_interval = user_word_data.get("check_interval", 0)
        next_check_date = user_word_data.get("next_check_date")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É—á–∏—Ç—ã–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        message_text = f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–Ω–∞–µ—Ç–µ —ç—Ç–æ —Å–ª–æ–≤–æ.\n\n"
        message_text += f"–°–ª–æ–≤–æ: <code>{word_foreign}</code>\n\n"
        message_text += f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <b>[{transcription}]</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
        if show_debug:
            message_text += f"‚è± –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {check_interval} (–¥–Ω–µ–π)\n"
            if next_check_date:
                formatted_date = format_date(next_check_date)
                message_text += f"üîÑ –¢–µ–∫—É—â–µ–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {formatted_date}\n\n"
            else:
                message_text += "üîÑ –î–∞—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞\n\n"
            
            message_text += "‚ÑπÔ∏è –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω\n\n"
        
        message_text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–Ω–∞–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∏–∑—É—á–µ–Ω–∏—é."
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardBuilder()
        keyboard.button(
            text="‚úÖ –ö —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É",
            callback_data="confirm_next_word"
        )
        keyboard.button(
            text="‚ùå –û–π, –≤—Å–µ-—Ç–∞–∫–∏ –Ω–µ –∑–Ω–∞—é",
            callback_data="show_word"
        )
        keyboard.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ–¥–Ω—É –ø–æ–¥ –¥—Ä—É–≥–æ–π
        
        await callback.message.answer(
            message_text,
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        user_word_state = await UserWordState.from_state(state)
        if user_word_state.is_valid():
            user_word_state.set_flag('pending_next_word', True)
            user_word_state.set_flag('pending_word_know', True)  # –ù–æ–≤—ã–π —Ñ–ª–∞–≥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–Ω–∞–Ω–∏—è
            await user_word_state.save_to_state(state)
        
    except Exception as e:
        logger.error(f"Error processing word_know: {e}", exc_info=True)
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–æ–≤–∞: {str(e)}"
        )
    
    await callback.answer()

@word_router.callback_query(F.data == "confirm_next_word")
async def process_confirm_next_word(callback: CallbackQuery, state: FSMContext):
    """
    Process confirmation to go to the next word.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'confirm_next_word' callback from {full_name} ({username})")
    
    # Get required data
    state_data = await state.get_data()
    current_word = state_data.get("current_word")
    current_word_id = state_data.get("current_word_id")
    db_user_id = state_data.get("db_user_id")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    settings = await get_user_language_settings(callback, state)
    show_debug = settings.get("show_debug", False)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª–æ–≤–∞
    user_word_state = await UserWordState.from_state(state)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É —Å–ª–æ–≤–∞
    if user_word_state.is_valid() and user_word_state.get_flag('pending_word_know', False):
        # –û–±–Ω–æ–≤–ª—è–µ–º word score –Ω–∞ 1 —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        success, result = await update_word_score(
            callback.bot,
            db_user_id,
            current_word_id,
            score=1,  # –¢–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É 1 –∑–¥–µ—Å—å
            word=current_word,
            message_obj=callback
        )
        
        if not success:
            logger.error(f"Failed to update word score")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–≤–∞")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
        if show_debug:
            debug_info = (
                f"‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:\n"
                f"–ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: 1\n"
                f"–ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {result.get('check_interval', 0)} –¥–Ω–µ–π\n"
                f"–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {format_date(result.get('next_check_date', ''))}\n"
            )
            await callback.message.answer(debug_info)
            
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
        user_word_state.remove_flag('pending_word_know')
        
    if user_word_state.is_valid():
        # Reset word_shown flag
        user_word_state.set_flag('word_shown', False)
        
        # Remove pending flag
        user_word_state.remove_flag('pending_next_word')
        
        # Advance to next word
        user_word_state.advance_to_next_word()
        
        # Save updated state
        await user_word_state.save_to_state(state)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–ª–µ–¥—É—é—â–∏–º —Å–ª–æ–≤–æ–º
        await callback.message.answer("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É...")
        
        # Show next word (–∑–∞–º–µ–Ω—è–µ–º callback –Ω–∞ callback.message)
        await show_study_word(callback.message, state)
    else:
        # Fallback to old approach if state model is invalid
        logger.warning("UserWordState invalid, using fallback approach to advance to next word")
        
        # Get current state data
        user_data = await state.get_data()
        current_index = user_data.get("current_study_index", 0) + 1
        
        # Update state with new index
        await state.update_data(current_study_index=current_index)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–ª–µ–¥—É—é—â–∏–º —Å–ª–æ–≤–æ–º
        await callback.message.answer("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É...")
        
        # Show next word (–∑–∞–º–µ–Ω—è–µ–º callback –Ω–∞ callback.message)
        await show_study_word(callback.message, state)
    
    await callback.answer()
    