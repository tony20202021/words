"""
Functions for getting and displaying words in the study process.
"""

from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.utils.api_utils import get_api_client_from_bot
from app.utils.logger import setup_logger
from app.utils.error_utils import handle_api_error
from app.utils.state_models import UserWordState
from app.bot.keyboards.study_keyboards import create_word_keyboard
from app.utils.formatting_utils import format_date
from app.utils.settings_utils import get_user_language_settings
from app.utils.formatting_utils import format_active_hints

logger = setup_logger(__name__)

async def get_words_for_study(message: Message, state: FSMContext, user_id: str, language_id: str, study_settings: dict):
    """
    Get words for study based on settings using the API's get_study_words method.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
        user_id: User ID in database
        language_id: Language ID
        study_settings: Study settings dictionary
        
    Returns:
        bool: True if words were retrieved successfully, False otherwise
    """
    # Get API client
    api_client = get_api_client_from_bot(message.bot)
    
    # Parameters for request
    study_params = {
        "start_word": study_settings.get("start_word", 1),
        "skip_marked": study_settings.get("skip_marked", False),
        "use_check_date": study_settings.get("use_check_date", True)
    }
    
    # Add limit to parameters
    limit = 100  # or other suitable value
    
    # Save show_hints and show_debug settings to state
    show_hints = study_settings.get("show_hints", True)
    show_debug = study_settings.get("show_debug", False)
    await state.update_data(show_hints=show_hints, show_debug=show_debug)
    
    # Log request details
    logger.info(
        f"Requesting study words: user_id={user_id}, language_id={language_id}, " 
        f"params={study_params}, limit={limit}, show_hints={show_hints}, show_debug={show_debug}"
    )
    
    try:
        # Request words
        words_response = await api_client.get_study_words(
            user_id, 
            language_id, 
            params=study_params,
            limit=limit,
        )
        
        # Log response status
        logger.info(f"Study words API response: success={words_response['success']}, status={words_response['status']}")
        
        # Handle 404 error (no progress)
        if not words_response["success"] and words_response["status"] == 404:
            logger.warning(f"Got 404 response, user progress not found. Trying fallback to get_words_by_language")
            
            await message.answer(
                "‚ö†Ô∏è –î–ª—è —ç—Ç–æ–≥–æ —è–∑—ã–∫–∞ –µ—â–µ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞."
            )
            
            # Try to get words without progress
            words_response = await api_client.get_words_by_language(
                language_id, 
                skip=0, 
                limit=limit,
            )
            
            logger.info(f"Fallback API response: success={words_response['success']}, status={words_response['status']}")
        
        # Handle API errors
        if not words_response["success"]:
            await handle_api_error(
                words_response, 
                message, 
                "Error getting study words",
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤"
            )
            return False
        
        # Get study words from response
        study_words = words_response["result"]
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        if study_words:
            logger.info(f"Retrieved {len(study_words)} words for study from API")
        else:
            logger.warning("No words received from API")
        
        # Check if we have words
        if not study_words or len(study_words) == 0:
            logger.warning(f"No words found for study with settings: {study_params}")
            
            await message.answer(
                "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –º–µ–Ω—é /settings."
            )
            return False
        
        # Create UserWordState and save to FSM state
        user_word_state = UserWordState(
            word_id=None,  # Will be set when accessing first word
            word_data=None,  # Will be set when accessing first word
            user_id=user_id,
            language_id=language_id,
            current_study_index=0,
            study_words=study_words,
            study_settings=study_settings  # Save full study settings including show_hints and show_debug
        )
        
        # If we have words, set current word
        if user_word_state.has_more_words():
            current_word = user_word_state.get_current_word()
            
            # Find word_id in various fields
            for id_field in ["_id", "id", "word_id"]:
                if id_field in current_word and current_word[id_field]:
                    user_word_state.word_id = current_word[id_field]
                    break
                    
            user_word_state.word_data = current_word
        
        # Save to state
        await user_word_state.save_to_state(state)
        
        # Show first word
        await show_study_word(message, state)
        return True
        
    except Exception as e:
        logger.error(f"Error getting words for study: {e}", exc_info=True)
        
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: {str(e)}"
        )
        return False

async def show_study_word(message_obj, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.
    
    Args:
        message_obj: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    user_word_state = await UserWordState.from_state(state)
    
    if not user_word_state.is_valid():
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await message_obj.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ–≤–∞.")
        return
    
    if not user_word_state.has_more_words():
        # –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
        await message_obj.answer(
            "üìù –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /settings."
        )
        return
    
    # –¢–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ
    current_word = user_word_state.get_current_word()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞ –ø–æ–∫–∞–∑–∞ —Å–ª–æ–≤–∞
    word_shown = user_word_state.get_flag("word_shown", False)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    settings = await get_user_language_settings(message_obj, state)
    show_hints = settings.get("show_hints", True)
    show_debug = settings.get("show_debug", False)  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
    active_hints = user_word_state.get_flag("active_hints", [])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
    used_hints = user_word_state.get_flag("used_hints", [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ callback –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    is_callback = isinstance(message_obj, CallbackQuery)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ format_active_hints
    bot = message_obj.bot if hasattr(message_obj, 'bot') else message_obj.message.bot
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ–≤–∞
    language_name_ru = current_word.get("language_name_ru", "")
    language_name_foreign = current_word.get("language_name_foreign", "")
    
    # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —è–∑—ã–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ª–æ–≤–µ, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if not language_name_ru or not language_name_foreign:
        current_language = state_data.get("current_language", {})
        language_name_ru = current_language.get("name_ru", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        language_name_foreign = current_language.get("name_foreign", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–ª–æ–≤–µ
    word_number = current_word.get("word_number", 0)
    translation = current_word.get("translation", "")
    word_foreign = current_word.get("word_foreign", "")
    transcription = current_word.get("transcription", "")
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–ª–æ–≤–µ
    user_word_data = current_word.get("user_word_data", {})
    is_skipped = user_word_data.get("is_skipped", False)
    check_interval = user_word_data.get("check_interval", 0)
    next_check_date = user_word_data.get("next_check_date")
    score = user_word_data.get("score", 0)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = (
        f"üìù –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ \"{language_name_ru} ({language_name_foreign})\":\n\n"
        f"—Å–ª–æ–≤–æ –Ω–æ–º–µ—Ä: {word_number}\n\n" 
    )
    
    message_text += f"üîç –ü–µ—Ä–µ–≤–æ–¥:\n <b>{translation}</b>\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ–ø—É—Å–∫–∞
    if is_skipped:
        message_text += "‚è© <b>–°—Ç–∞—Ç—É—Å: —ç—Ç–æ —Å–ª–æ–≤–æ –ø–æ–º–µ—á–µ–Ω–æ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.</b>\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
    # –∏–ª–∏ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –æ—Ü–µ–Ω–∫–∞ 1 (–∑–Ω–∞–µ—Ç —Å–ª–æ–≤–æ)
    if show_debug:
        # –í—ã–≤–æ–¥–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
        message_text += f"‚è± –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–≤–∞: {score}\n"
        message_text += f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {check_interval} (–¥–Ω–µ–π)\n"
        if next_check_date:
            formatted_date = format_date(next_check_date)
            message_text += f"üîÑ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {formatted_date} \n\n"
        else:
            message_text += "üîÑ –î–∞—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω–∞\n\n"
    elif score == 1:
        # –ï—Å–ª–∏ –æ—Ç–ª–∞–¥–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∏–∑—É—á–µ–Ω–∏–∏
        message_text += f"‚è± –í—ã –∑–Ω–∞–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ\n\n"
    
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if word_shown and word_foreign:
        message_text += f"üìù –°–ª–æ–≤–æ: <code>{word_foreign}</code>\n"
        if transcription:
            message_text += f"üîä –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <b>[{transcription}]</b>\n\n"
        else:
            message_text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∞
    if show_debug:
        message_text += f"üîç <b>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
        message_text += f"ID —Å–ª–æ–≤–∞: {user_word_state.word_id}\n"
        message_text += f"ID —è–∑—ã–∫–∞: {user_word_state.language_id}\n"
        message_text += f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏: {', '.join(active_hints) if active_hints else '–Ω–µ—Ç'}\n"
        message_text += f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏: {', '.join(used_hints) if used_hints else '–Ω–µ—Ç'}\n"
        message_text += f"–°–ª–æ–≤–æ –ø–æ–∫–∞–∑–∞–Ω–æ: {'–¥–∞' if word_shown else '–Ω–µ—Ç'}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ format_active_hints
    hint_text = await format_active_hints(
        bot=bot,
        user_id=user_word_state.user_id,
        word_id=user_word_state.word_id,
        current_word=current_word,
        active_hints=active_hints,
        include_header=True
    )
    
    message_text += hint_text
    
    # Create updated keyboard 
    keyboard = create_word_keyboard(
        current_word, 
        word_shown=word_shown, 
        show_hints=show_hints,
        active_hints=active_hints,
        used_hints=used_hints
    )
    
    # Update current message instead of sending a new one
    if is_callback:
        # –ï—Å–ª–∏ —ç—Ç–æ callback, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message_obj.message.edit_text(
                message_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"Error editing message in show_study_word: {e}", exc_info=True)
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await message_obj.message.answer(
                message_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await message_obj.answer(
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )