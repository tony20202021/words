"""
Handlers for study commands in the Language Learning Bot.
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from app.utils.api_utils import get_api_client_from_bot
from app.utils.logger import setup_logger
from app.utils.error_utils import handle_api_error, validate_state_data
from app.utils.state_models import UserWordState

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
from app.bot.states.centralized_states import HintStates, StudyStates

from app.bot.handlers.study.study_words import get_words_for_study
from app.utils.formatting_utils import format_settings_text

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏–∑—É—á–µ–Ω–∏—è
study_router = Router()

logger = setup_logger(__name__)

@study_router.message(Command("study"))
async def cmd_study(message: Message, state: FSMContext):
    """
    Handle the /study command which starts the learning process.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    # –ù–æ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º—ã —Ö–æ—Ç–∏–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_data = await state.get_data()
    await state.set_state(None)
    await state.update_data(**current_data)
    
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    logger.info(f"'/study' command from {full_name} ({username}, ID={user_id})")
    
    # Get API client
    api_client = get_api_client_from_bot(message.bot)

    if not api_client:
        logger.error(f"–û—à–∏–±–∫–∞: (API client not found in bot or dispatcher)")
        await message.answer(
            f"–û—à–∏–±–∫–∞: (API client not found in bot or dispatcher)"
        )
        return

    state_data = await state.get_data()
    is_valid = ("current_language" in state_data)
    
    if not is_valid:
        await message.answer(
            "‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —è–∑—ã–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è!\n"
            "–°–µ–π—á–∞—Å —è –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫."
        )
        
        # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        from app.bot.handlers.language_handlers import cmd_language
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        try:
            await cmd_language(message, state)
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ cmd_language —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –æ—Ç–≤–µ—Ç
        except Exception as e:
            logger.error(f"Error calling cmd_language: {e}", exc_info=True)
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –±–∞–∑–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /language, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –≤—Ä—É—á–Ω—É—é."
            )
            return
    
    # Get language data
    current_language = state_data["current_language"]
    current_language_id = current_language.get("id")
    
    if not current_language_id:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /language, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –∑–∞–Ω–æ–≤–æ."
        )
        return
    
    # Get user data
    user_response = await api_client.get_user_by_telegram_id(user_id)
    
    # Initialize db_user_id
    db_user_id = None
    
    # Handle API error
    if not user_response["success"]:
        await handle_api_error(
            user_response,
            message,
            "Error getting user data",
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
        return
    
    # Check if user exists
    users = user_response["result"]
    user = users[0] if users and len(users) > 0 else None
    
    if not user:
        # Create new user
        user_info = {
            "telegram_id": user_id,
            "username": username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name
        }
        
        create_user_response = await api_client.create_user(user_info)
        
        # Handle API error
        if not create_user_response["success"]:
            await handle_api_error(
                create_user_response,
                message,
                "Error creating user",
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
            return
        
        # Get user ID from response
        db_user_id = create_user_response["result"].get("id") or create_user_response["result"].get("_id")
    else:
        # Get user ID from existing user
        db_user_id = user.get("id") or user.get("_id")
    
    # Verify we have user ID
    if not db_user_id:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    # Double-check language exists
    language_response = await api_client.get_language(current_language_id)
    
    if not language_response["success"] or not language_response["result"]:
        await message.answer(
            "‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /language, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫."
        )
        return
    
    language = language_response["result"]
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    from app.utils.settings_utils import get_user_language_settings
    
    settings = await get_user_language_settings(message, state)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    start_word = settings.get("start_word", 1)
    skip_marked = settings.get("skip_marked", False)
    use_check_date = settings.get("use_check_date", True)
    show_hints = settings.get("show_hints", True)
    show_debug = settings.get("show_debug", True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
    await state.update_data(
        start_word=start_word,
        skip_marked=skip_marked,
        use_check_date=use_check_date,
        show_hints=show_hints,
        show_debug=show_debug,
    )
    
    # Show start message —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
    settings_text = format_settings_text(
        start_word=start_word, 
        skip_marked=skip_marked, 
        use_check_date=use_check_date,
        show_hints=show_hints,
        show_debug=show_debug,
        prefix=f"üìö –ù–∞—á–∏–Ω–∞–µ–º –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ —è–∑—ã–∫–∞: {language.get('name_ru')} ({language.get('name_foreign')})\n\n",
        suffix="\n\nüîÑ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤..."
    )
    
    await message.answer(
        settings_text,
        parse_mode="HTML",
    )
    
    # Save user ID to state
    await state.update_data(db_user_id=db_user_id)
    
    # –ù–û–í–û–ï: –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑—É—á–µ–Ω–∏—è
    # (get_words_for_study —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    await state.set_state(StudyStates.studying)
    
    # Create study settings
    study_settings = {
        "start_word": start_word,
        "skip_marked": skip_marked,
        "use_check_date": use_check_date,
        "show_hints": show_hints,
        "show_debug": show_debug,
    }
    
    # Get words for study
    await get_words_for_study(message, state, db_user_id, current_language_id, study_settings)

# –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–∑—É—á–µ–Ω–∏—è
@study_router.message(Command("study"), StudyStates.study_completed)
async def cmd_study_from_completed(message: Message, state: FSMContext):
    """
    Handle the /study command when user is in study_completed state.
    This allows restarting the study process.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    logger.info(f"'/study' command from completed state from {message.from_user.full_name}")
    
    await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è...")
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /study
    await cmd_study(message, state)

@study_router.message(Command("stats"), StudyStates.study_completed)
async def cmd_stats_from_completed(message: Message, state: FSMContext):
    """
    Handle the /stats command when user is in study_completed state.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    logger.info(f"'/stats' command from completed state from {message.from_user.full_name}")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    try:
        from app.bot.handlers.user_handlers import cmd_stats
        await cmd_stats(message, state)
    except Exception as e:
        logger.error(f"Error calling cmd_stats from completed state: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@study_router.message(Command("settings"), StudyStates.study_completed)
async def cmd_settings_from_completed(message: Message, state: FSMContext):
    """
    Handle the /settings command when user is in study_completed state.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    logger.info(f"'/settings' command from completed state from {message.from_user.full_name}")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    try:
        from app.bot.handlers.user.settings_handlers import cmd_settings
        await cmd_settings(message, state)
    except Exception as e:
        logger.error(f"Error calling cmd_settings from completed state: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≤–æ –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è
@study_router.message(Command("cancel"), StudyStates.studying)
@study_router.message(Command("cancel"), StudyStates.viewing_word_details)
@study_router.message(Command("cancel"), StudyStates.confirming_word_knowledge)
async def cmd_cancel_study(message: Message, state: FSMContext):
    """
    Handle the /cancel command during study process.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    current_state = await state.get_state()
    logger.info(f"'/cancel' command during study from {message.from_user.full_name}, state: {current_state}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑—É—á–µ–Ω–∏—è
    await state.set_state(None)
    
    await message.answer(
        "‚úÖ –ò–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω–æ.\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑—É—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /study\n"
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - /stats\n"
        "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ - /settings"
    )

@study_router.message(Command("help"), StudyStates.studying)
@study_router.message(Command("help"), StudyStates.viewing_word_details)
@study_router.message(Command("help"), StudyStates.confirming_word_knowledge)
@study_router.message(Command("help"), StudyStates.study_completed)
async def cmd_help_during_study(message: Message, state: FSMContext):
    """
    Handle the /help command during study process.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    current_state = await state.get_state()
    logger.info(f"'/help' command during study from {message.from_user.full_name}, state: {current_state}")
    
    help_text = "üìö <b>–ü–æ–º–æ—â—å –ø–æ –∏–∑—É—á–µ–Ω–∏—é —Å–ª–æ–≤:</b>\n\n"
    
    if current_state == StudyStates.study_completed.state:
        help_text += (
            "üéâ –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞!\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/study - –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ\n"
            "/stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "/settings - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "/language - –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —è–∑—ã–∫\n"
        )
    elif current_state in [StudyStates.studying.state, StudyStates.viewing_word_details.state, StudyStates.confirming_word_knowledge.state]:
        help_text += (
            "–í—ã —Å–µ–π—á–∞—Å –∏–∑—É—á–∞–µ—Ç–µ —Å–ª–æ–≤–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/cancel - –ø—Ä–µ—Ä–≤–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ\n"
            "/stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—è –∏–∑—É—á–µ–Ω–∏–µ)\n"
            "/settings - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—è –∏–∑—É—á–µ–Ω–∏–µ)\n\n"
            "<b>–ü–æ–¥—Å–∫–∞–∑–∫–∏:</b>\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
            "üéôÔ∏è –ú–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏\n"
            "‚è© –ü–æ–º–µ—á–∞–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞\n"
        )
    else:
        help_text += (
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /study –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤\n"
            "/language –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞\n"
            "/settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è"
        )
    
    await message.answer(help_text, parse_mode="HTML")

# –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è
@study_router.message(StudyStates.studying)
@study_router.message(StudyStates.viewing_word_details)
@study_router.message(StudyStates.confirming_word_knowledge)
async def handle_unknown_message_during_study(message: Message, state: FSMContext):
    """
    Handle unknown messages during study process.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    current_state = await state.get_state()
    logger.info(f"Unknown message during study from {message.from_user.full_name}, state: {current_state}, text: {message.text[:50] if message.text else 'No text'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π
    from app.utils.error_utils import is_command
    
    if message.text and is_command(message.text):
        # –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –Ω–æ –æ–Ω–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ - –∑–Ω–∞—á–∏—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await message.answer(
            f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ {message.text.split()[0]} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏:\n"
            "/cancel - –ø—Ä–µ—Ä–≤–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ\n"
            "/help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"
        )
    else:
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤.\n\n"
            "–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏:\n"
            "/cancel - –ø—Ä–µ—Ä–≤–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ\n"
            "/help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"
        )

@study_router.message(StudyStates.study_completed)
async def handle_message_in_completed_state(message: Message, state: FSMContext):
    """
    Handle messages when study is completed.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    logger.info(f"Message in completed state from {message.from_user.full_name}, text: {message.text[:50] if message.text else 'No text'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π
    from app.utils.error_utils import is_command
    
    if message.text and is_command(message.text):
        # –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –Ω–æ –æ–Ω–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ
        await message.answer(
            f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ {message.text.split()[0]} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"
            "üéâ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∏–∑—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ª–æ–≤!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/study - –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ\n"
            "/stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "/settings - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "/language - –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —è–∑—ã–∫"
        )
    else:
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞!\n\n"
            "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n"
            "/study - –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ\n"
            "/stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "/settings - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "/language - –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —è–∑—ã–∫"
        )
        