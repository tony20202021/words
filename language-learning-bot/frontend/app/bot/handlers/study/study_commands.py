"""
Handlers for study commands in the Language Learning Bot.
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from app.utils.api_utils import get_api_client_from_bot
from app.utils.logger import setup_logger
from app.utils.error_utils import handle_api_error, validate_state_data
from app.utils.state_models import UserWordState

from app.bot.handlers.study.study_states import StudyStates
from app.bot.handlers.study.study_words import get_words_for_study
from app.utils.formatting_utils import format_settings_text

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏–∑—É—á–µ–Ω–∏—è
study_router = Router()

logger = setup_logger(__name__)

@study_router.message(Command("study"))
async def cmd_study(message: Message, state: FSMContext):
    """
    Handle the /study command which starts the learning process.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    # –ù–æ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º—ã —Ö–æ—Ç–∏–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_data = await state.get_data()
    await state.set_state(None)
    await state.update_data(**current_data)
    
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    logger.info(f"'/study' command from {full_name} ({username}, ID={user_id})")
    
    # Get API client
    api_client = get_api_client_from_bot(message.bot)
    
    state_data = await state.get_data()
    is_valid = ("current_language" in state_data)
    
    if not is_valid:
        await message.answer(
            "‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —è–∑—ã–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è!\n"
            "–°–µ–π—á–∞—Å —è –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫."
        )
        
        # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        from app.bot.handlers.language_handlers import cmd_language
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        try:
            await cmd_language(message, state)
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ cmd_language —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –æ—Ç–≤–µ—Ç
        except Exception as e:
            logger.error(f"Error calling cmd_language: {e}", exc_info=True)
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –±–∞–∑–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /language, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –≤—Ä—É—á–Ω—É—é."
            )
            return
    
    # Get language data
    current_language = state_data["current_language"]
    current_language_id = current_language.get("id")
    
    if not current_language_id:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /language, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –∑–∞–Ω–æ–≤–æ."
        )
        return
    
    # Get user data
    user_response = await api_client.get_user_by_telegram_id(user_id)
    
    # Initialize db_user_id
    db_user_id = None
    
    # Handle API error
    if not user_response["success"]:
        await handle_api_error(
            user_response,
            message,
            "Error getting user data",
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
        return
    
    # Check if user exists
    users = user_response["result"]
    user = users[0] if users and len(users) > 0 else None
    
    if not user:
        # Create new user
        user_info = {
            "telegram_id": user_id,
            "username": username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name
        }
        
        create_user_response = await api_client.create_user(user_info)
        
        # Handle API error
        if not create_user_response["success"]:
            await handle_api_error(
                create_user_response,
                message,
                "Error creating user",
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
            return
        
        # Get user ID from response
        db_user_id = create_user_response["result"].get("id") or create_user_response["result"].get("_id")
    else:
        # Get user ID from existing user
        db_user_id = user.get("id") or user.get("_id")
    
    # Verify we have user ID
    if not db_user_id:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    # Double-check language exists
    language_response = await api_client.get_language(current_language_id)
    
    if not language_response["success"] or not language_response["result"]:
        await message.answer(
            "‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /language, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫."
        )
        return
    
    language = language_response["result"]
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    from app.utils.settings_utils import get_user_language_settings
    
    settings = await get_user_language_settings(message, state)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    start_word = settings.get("start_word", 1)
    skip_marked = settings.get("skip_marked", False)
    use_check_date = settings.get("use_check_date", True)
    show_hints = settings.get("show_hints", True)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä show_hints
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
    await state.update_data(
        start_word=start_word,
        skip_marked=skip_marked,
        use_check_date=use_check_date,
        show_hints=show_hints  # –°–æ—Ö—Ä–∞–Ω—è–µ–º show_hints –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    )
    
    # Show start message —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ show_hints
    settings_text = format_settings_text(
        start_word=start_word, 
        skip_marked=skip_marked, 
        use_check_date=use_check_date,
        show_hints=show_hints,  # –ü–µ—Ä–µ–¥–∞–µ–º show_hints
        prefix=f"üìö –ù–∞—á–∏–Ω–∞–µ–º –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ —è–∑—ã–∫–∞: {language.get('name_ru')} ({language.get('name_foreign')})\n\n",
        suffix="\n\nüîÑ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤..."
    )
    
    await message.answer(
        settings_text,
        parse_mode="HTML",
    )
    
    # Save user ID to state
    await state.update_data(db_user_id=db_user_id)
    
    # Set study state
    await state.set_state(StudyStates.studying)
    
    # Create study settings
    study_settings = {
        "start_word": start_word,
        "skip_marked": skip_marked,
        "use_check_date": use_check_date,
        "show_hints": show_hints  # –î–æ–±–∞–≤–ª—è–µ–º show_hints –≤ study_settings
    }
    
    # Get words for study
    await get_words_for_study(message, state, db_user_id, current_language_id, study_settings)
