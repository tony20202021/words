"""
Handlers for word evaluation actions during the study process.
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑—É—á–µ–Ω–∏—è (–∑–Ω–∞—é/–Ω–µ –∑–Ω–∞—é).
–û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞—Ä—Ç–∏–π.
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.utils.api_utils import get_api_client_from_bot
from app.utils.logger import setup_logger
from app.utils.error_utils import validate_state_data
from app.utils.state_models import UserWordState
from app.utils.word_data_utils import update_word_score
from app.utils.formatting_utils import format_date
from app.utils.settings_utils import get_user_language_settings

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
from app.bot.states.centralized_states import StudyStates

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–≤
evaluation_router = Router()

logger = setup_logger(__name__)


@evaluation_router.callback_query(F.data == "word_know", StudyStates.studying)
async def process_word_know(callback: CallbackQuery, state: FSMContext):
    """
    Process callback when user knows the word.
    –ò–ó–ú–ï–ù–ï–ù–û: –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –Ω–∞ 1 –∑–¥–µ—Å—å.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'word_know' callback from {full_name} ({username})")
    
    # Validate state data
    is_valid, state_data = await validate_state_data(
        state, 
        ["current_word", "current_word_id", "db_user_id"],
        callback,
        "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–≤–∞"
    )
    
    if not is_valid:
        logger.error(f"not is_valid")
        return
    
    # Get required data
    current_word = state_data["current_word"]
    current_word_id = state_data["current_word_id"]
    db_user_id = state_data["db_user_id"]
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    settings = await get_user_language_settings(callback, state)
    show_debug = settings.get("show_debug", False)
    
    try:
        # –ü–ï–†–ï–ù–ï–°–ï–ù–û –°–Æ–î–ê: –û–±–Ω–æ–≤–ª—è–µ–º word score –Ω–∞ 1 —Å—Ä–∞–∑—É
        success, result = await update_word_score(
            callback.bot,
            db_user_id,
            current_word_id,
            score=1,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É 1 —Å—Ä–∞–∑—É
            word=current_word,
            message_obj=callback
        )
        
        if not success:
            logger.error(f"Failed to update word score")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–≤–∞")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if 'user_word_data' not in current_word:
            current_word['user_word_data'] = {}
        current_word['user_word_data'].update(result)
        
        # Show word information
        word_foreign = current_word.get("word_foreign")
        transcription = current_word.get("transcription", "")
        
        # –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –ù–û–í–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        new_check_interval = result.get("check_interval", 0)
        new_next_check_date = result.get("next_check_date")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –û–ë–ù–û–í–õ–ï–ù–ù–û–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        message_text = f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–Ω–∞–µ—Ç–µ —ç—Ç–æ —Å–ª–æ–≤–æ.\n\n"
        message_text += f"–°–ª–æ–≤–æ: <code>{word_foreign}</code>\n\n"
        message_text += f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <b>[{transcription}]</b>\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö
        if show_debug:
            message_text += f"‚úÖ –û—Ü–µ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ 1\n"
            message_text += f"‚è± –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {new_check_interval} (–¥–Ω–µ–π)\n"
            if new_next_check_date:
                formatted_date = format_date(new_next_check_date)
                message_text += f"üîÑ –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {formatted_date}\n\n"
            else:
                message_text += "üîÑ –î–∞—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n\n"
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if new_next_check_date:
                formatted_date = format_date(new_next_check_date)
                message_text += f"üìÖ –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {formatted_date}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardBuilder()
        keyboard.button(
            text="‚úÖ –ö —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É",
            callback_data="confirm_next_word"
        )
        keyboard.button(
            text="‚ùå –û–π, –≤—Å–µ-—Ç–∞–∫–∏ –Ω–µ –∑–Ω–∞—é",
            callback_data="show_word"  
            # –í–Ω—É—Ç—Ä–∏ show_word —É–∂–µ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –Ω–∞ 0, –ø–æ—ç—Ç–æ–º—É –Ω–∏—á–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ
        )
        keyboard.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ–¥–Ω—É –ø–æ–¥ –¥—Ä—É–≥–æ–π
        
        # –ù–û–í–û–ï: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–Ω–∞–Ω–∏—è —Å–ª–æ–≤–∞
        await state.set_state(StudyStates.confirming_word_knowledge)
        
        await callback.message.answer(
            message_text,
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        user_word_state = await UserWordState.from_state(state)
        if user_word_state.is_valid():
            user_word_state.set_flag('pending_next_word', True)
            user_word_state.set_flag('pending_word_know', True)  # –§–ª–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ show_word
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            user_word_state.word_data = current_word
            await user_word_state.save_to_state(state)
        
    except Exception as e:
        logger.error(f"Error processing word_know: {e}", exc_info=True)
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–æ–≤–∞: {str(e)}"
        )
    
    await callback.answer()


@evaluation_router.callback_query(F.data == "word_dont_know", StudyStates.studying)
async def process_word_dont_know(callback: CallbackQuery, state: FSMContext):
    """
    Process callback when user doesn't know the word.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'word_dont_know' callback from {full_name} ({username})")
    
    # Validate state data
    is_valid, state_data = await validate_state_data(
        state, 
        ["current_word", "current_word_id", "db_user_id"],
        callback,
        "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–≤–∞"
    )
    
    if not is_valid:
        logger.error(f"not is_valid")
        return
    
    # Get required data
    current_word = state_data["current_word"]
    current_word_id = state_data["current_word_id"]
    db_user_id = state_data["db_user_id"]
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    settings = await get_user_language_settings(callback, state)
    show_debug = settings.get("show_debug", False)
    
    try:
        # Update word score to 0 (not known)
        success, result = await update_word_score(
            callback.bot,
            db_user_id,
            current_word_id,
            score=0,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É 0
            word=current_word,
            message_obj=callback
        )
        
        if not success:
            logger.error(f"Failed to update word score")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–≤–∞")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if 'user_word_data' not in current_word:
            current_word['user_word_data'] = {}
        current_word['user_word_data'].update(result)
        
        # Show word information
        word_foreign = current_word.get("word_foreign")
        transcription = current_word.get("transcription", "")
        translation = current_word.get("translation", "")
        
        # –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –ù–û–í–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        new_check_interval = result.get("check_interval", 0)
        new_next_check_date = result.get("next_check_date")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –û–ë–ù–û–í–õ–ï–ù–ù–û–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        message_text = f"üìö –ù–µ —Å—Ç—Ä–∞—à–Ω–æ! –ò–∑—É—á–∞–µ–º —ç—Ç–æ —Å–ª–æ–≤–æ.\n\n"
        message_text += f"–ü–µ—Ä–µ–≤–æ–¥: <b>{translation}</b>\n\n"
        message_text += f"–°–ª–æ–≤–æ: <code>{word_foreign}</code>\n\n"
        message_text += f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <b>[{transcription}]</b>\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö
        if show_debug:
            message_text += f"üìù –û—Ü–µ–Ω–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ 0\n"
            message_text += f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: {new_check_interval} (–¥–Ω–µ–π)\n"
            if new_next_check_date:
                formatted_date = format_date(new_next_check_date)
                message_text += f"üîÑ –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {formatted_date}\n\n"
            else:
                message_text += "üîÑ –î–∞—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n\n"
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            message_text += f"üí° –≠—Ç–æ —Å–ª–æ–≤–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ —Å–Ω–æ–≤–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∏–∑—É—á–µ–Ω–∏–∏.\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
        keyboard = InlineKeyboardBuilder()
        keyboard.button(
            text="‚û°Ô∏è –ö —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É",
            callback_data="confirm_next_word"
        )
        
        # –ù–û–í–û–ï: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–Ω–∞–Ω–∏—è —Å–ª–æ–≤–∞
        await state.set_state(StudyStates.confirming_word_knowledge)
        
        await callback.message.answer(
            message_text,
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        user_word_state = await UserWordState.from_state(state)
        if user_word_state.is_valid():
            user_word_state.set_flag('pending_next_word', True)
            user_word_state.set_flag('word_shown', True)  # –ü–æ–º–µ—á–∞–µ–º —Å–ª–æ–≤–æ –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–µ
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            user_word_state.word_data = current_word
            await user_word_state.save_to_state(state)
        
    except Exception as e:
        logger.error(f"Error processing word_dont_know: {e}", exc_info=True)
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–æ–≤–∞: {str(e)}"
        )
    
    await callback.answer()
    