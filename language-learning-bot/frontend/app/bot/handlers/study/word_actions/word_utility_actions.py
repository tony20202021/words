"""
Handlers for utility word actions during the study process.
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å–ª–æ–≤–∞–º–∏ (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞ –∏ —Ç.–¥.).
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from app.utils.api_utils import get_api_client_from_bot
from app.utils.logger import setup_logger
from app.utils.error_utils import validate_state_data
from app.utils.state_models import UserWordState
from app.utils.word_data_utils import update_word_score
from app.utils.settings_utils import get_user_language_settings
from app.bot.handlers.study.study_words import show_study_word

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
from app.bot.states.centralized_states import StudyStates

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
utility_router = Router()

logger = setup_logger(__name__)


@utility_router.callback_query(F.data == "toggle_word_skip", StudyStates.studying)
@utility_router.callback_query(F.data == "toggle_word_skip", StudyStates.viewing_word_details)
async def process_toggle_word_skip(callback: CallbackQuery, state: FSMContext):
    """
    Process callback when user wants to toggle the skip flag for the word.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'toggle_word_skip' callback from {full_name} ({username})")
    
    # Validate state data
    is_valid, state_data = await validate_state_data(
        state, 
        ["current_word", "current_word_id", "db_user_id"],
        callback,
        "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Å–ª–æ–≤–∞"
    )
    
    if not is_valid:
        return
    
    # Get required data
    current_word = state_data["current_word"]
    current_word_id = state_data["current_word_id"]
    db_user_id = state_data["db_user_id"]
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    settings = await get_user_language_settings(callback, state)
    show_debug = settings.get("show_debug", False)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–ª–∞–≥–∞ –ø—Ä–æ–ø—É—Å–∫–∞
    user_word_data = current_word.get("user_word_data", {})
    current_skip_status = user_word_data.get("is_skipped", False)
    
    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–ø—É—Å–∫–∞
    new_skip_status = not current_skip_status
    
    try:
        # Update word with new skip status
        success, result = await update_word_score(
            callback.bot,
            db_user_id,
            current_word_id,
            score=0,
            word=current_word,
            message_obj=callback,
            is_skipped=new_skip_status  # –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–ø—É—Å–∫–∞
        )
        
        if not success:
            return
        
        # Show word information
        word_foreign = current_word.get("word_foreign")
        transcription = current_word.get("transcription", "")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
        status_message = (
            f"‚è© –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: —Å–ª–æ–≤–æ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç {'–ø—Ä–æ–ø—É—Å–∫–∞—Ç—å—Å—è' if new_skip_status else '–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è'} –≤ –±—É–¥—É—â–µ–º.\n\n"
            f"–°–ª–æ–≤–æ: <b>{word_foreign}</b>\n"
        )
        
        if transcription:
            status_message += f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <b>[{transcription}]</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∞
        if show_debug:
            status_message += f"üîç <b>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            status_message += f"ID —Å–ª–æ–≤–∞: {current_word_id}\n"
            status_message += f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–ø—É—Å–∫–∞: {current_skip_status}\n"
            status_message += f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–ø—É—Å–∫–∞: {new_skip_status}\n\n"
        
        await callback.message.answer(
            status_message,
            parse_mode="HTML"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        user_word_state = await UserWordState.from_state(state)
        
        if user_word_state.is_valid() and user_word_state.word_data:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–ø—É—Å–∫–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            if "user_word_data" not in user_word_state.word_data:
                user_word_state.word_data["user_word_data"] = {}
                
            user_word_state.word_data["user_word_data"]["is_skipped"] = new_skip_status
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"Updated word data with new skip status: {new_skip_status}")
            logger.info(f"Word data is_skipped: {user_word_state.word_data.get('user_word_data', {}).get('is_skipped')}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await user_word_state.save_to_state(state)
            
            # Get show_hints setting
            from app.utils.settings_utils import get_show_hints_setting
            show_hints = await get_show_hints_setting(callback, state)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
            used_hints = user_word_state.get_flag("used_hints", [])
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ–≤–æ —Å–Ω–æ–≤–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ —Ñ–ª–∞–≥–æ–º –ø—Ä–æ–ø—É—Å–∫–∞
            await show_study_word(callback.message, state, need_new_message=False)
            
    except Exception as e:
        logger.error(f"Error processing toggle_word_skip: {e}", exc_info=True)
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–ª–∞–≥–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Å–ª–æ–≤–∞: {str(e)}"
        )
    
    await callback.answer()
    