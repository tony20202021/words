"""
Handlers for word navigation actions during the study process.
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑—É—á–µ–Ω–∏—è.
–û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞—Ä—Ç–∏–π —Å–ª–æ–≤.
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from app.utils.api_utils import get_api_client_from_bot
from app.utils.logger import setup_logger
from app.utils.state_models import UserWordState
from app.bot.handlers.study.study_words import show_study_word, load_next_batch
from app.utils.formatting_utils import format_date
from app.utils.settings_utils import get_user_language_settings

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
from app.bot.states.centralized_states import StudyStates

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
navigation_router = Router()

logger = setup_logger(__name__)


@navigation_router.callback_query(F.data == "next_word", StudyStates.viewing_word_details)        
async def process_next_word(callback: CallbackQuery, state: FSMContext):
    """
    Process callback to go to the next word without changing score.
    –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞—Ä—Ç–∏–π.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'next_word' callback from {full_name} ({username})")
    
    # Advance to next word
    user_word_state = await UserWordState.from_state(state)
    
    if user_word_state.is_valid():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Å–ª–æ–≤–æ –ø–æ–∫–∞–∑–∞–Ω–æ
        word_shown = user_word_state.get_flag('word_shown', False)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ —Å–ª–æ–≤–æ –µ—â–µ –Ω–µ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
        if not word_shown and user_word_state.word_data:
            current_word = user_word_state.word_data
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ
            word_foreign = current_word.get("word_foreign", "N/A")
            transcription = current_word.get("transcription", "")
            translation = current_word.get("translation", "")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–º —Å–ª–æ–≤–µ
            message_text = f"üìñ –í–æ—Ç —ç—Ç–æ —Å–ª–æ–≤–æ:\n\n"
            message_text += f"–ü–µ—Ä–µ–≤–æ–¥: <b>{translation}</b>\n\n"
            message_text += f"–°–ª–æ–≤–æ: <code>{word_foreign}</code>\n"
            
            if transcription:
                message_text += f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <b>[{transcription}]</b>\n\n"
            else:
                message_text += "\n"
            
            message_text += "üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É..."
            
            await callback.message.answer(
                message_text,
                parse_mode="HTML"
            )
        else:
            # –ï—Å–ª–∏ —Å–ª–æ–≤–æ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ - –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É...")
        
        # Reset word_shown flag
        user_word_state.set_flag('word_shown', False)
        
        # –ù–û–í–û–ï: –û—Ç–º–µ—á–∞–µ–º —Å–ª–æ–≤–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
        user_word_state.mark_word_as_processed()
        
        # Advance to next word
        success = user_word_state.advance_to_next_word()
        
        if not success:
            # –ù–û–í–û–ï: –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—Ç–∏—é
            api_client = get_api_client_from_bot(callback.bot)
            next_batch_loaded = await load_next_batch(callback.message, state, user_word_state, api_client)
            
            if next_batch_loaded:
                # –ü–∞—Ä—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏
                await state.set_state(StudyStates.studying)
                await show_study_word(callback.message, state, need_new_message=True)
                await callback.answer()
                return
            else:
                # –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤—Å–µ —Å–ª–æ–≤–∞
                await state.set_state(StudyStates.study_completed)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                session_stats = user_word_state.get_session_statistics()
                
                await callback.message.answer(
                    f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏–ª–∏ –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞!</b>\n\n"
                    f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:</b>\n"
                    f"üìö –í—Å–µ–≥–æ —Å–ª–æ–≤ –∏–∑—É—á–µ–Ω–æ: {session_stats['total_words_processed']}\n"
                    f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–∞—Ä—Ç–∏–π: {session_stats['batches_loaded']}\n"
                    f"üìà –°—Ä–µ–¥–Ω–µ–µ —Å–ª–æ–≤ –≤ –ø–∞—Ä—Ç–∏–∏: {session_stats['average_words_per_batch']:.0f}\n\n"
                    f"üèÜ –≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
                    f"üìä –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stats\n"
                    f"‚öôÔ∏è –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings\n"
                    f"üîÑ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /study",
                    parse_mode="HTML"
                )
                return
        
        # Save updated state
        await user_word_state.save_to_state(state)
        
        # –ù–û–í–û–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑—É—á–µ–Ω–∏—è
        await state.set_state(StudyStates.studying)
        
        # Show next word
        await show_study_word(callback.message, state, need_new_message=True)
    else:
        # Fallback to old approach if state model is invalid
        logger.warning("UserWordState invalid, using fallback approach to advance to next word")
        
        # Get current state data
        user_data = await state.get_data()
        current_index = user_data.get("current_study_index", 0) + 1
        
        study_words = user_data.get("study_words", [])
        
        if current_index >= len(study_words):
            # –ù–û–í–û–ï: –í fallback —Ä–µ–∂–∏–º–µ —Ç–æ–∂–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await state.set_state(StudyStates.study_completed)
            await callback.message.answer(
                "üéâ –ü–∞—Ä—Ç–∏—è —Å–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                "üìä –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stats\n"
                "‚öôÔ∏è –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑—É—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings\n"
                "üîÑ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /study"
            )
            return
        
        # Update state with new index
        await state.update_data(current_study_index=current_index)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è fallback —Å–ª—É—á–∞—è
        await callback.message.answer("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É...")
        
        # –ù–û–í–û–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑—É—á–µ–Ω–∏—è
        await state.set_state(StudyStates.studying)
        
        # Show next word
        await show_study_word(callback.message, state, need_new_message=True)
    
    await callback.answer()


@navigation_router.callback_query(F.data == "confirm_next_word", StudyStates.confirming_word_knowledge)
async def process_confirm_next_word(callback: CallbackQuery, state: FSMContext):
    """
    Process confirmation to go to the next word.
    –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ - –æ–Ω–æ —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ word_know.
    –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞—Ä—Ç–∏–π.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'confirm_next_word' callback from {full_name} ({username})")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª–æ–≤–∞
    user_word_state = await UserWordState.from_state(state)
    
    # –£–ë–†–ê–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–≤–∞ - –æ–Ω–æ —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ word_know
    # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
    
    if user_word_state.is_valid():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Å–ª–æ–≤–æ –ø–æ–∫–∞–∑–∞–Ω–æ (–≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True –ø–æ—Å–ª–µ word_know)
        word_shown = user_word_state.get_flag('word_shown', False)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ word_know - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if not word_shown and user_word_state.word_data:
            current_word = user_word_state.word_data
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ
            word_foreign = current_word.get("word_foreign", "N/A")
            transcription = current_word.get("transcription", "")
            translation = current_word.get("translation", "")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_word_data = current_word.get("user_word_data", {})
            new_check_interval = user_word_data.get("check_interval", 0)
            new_next_check_date = user_word_data.get("next_check_date")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            settings = await get_user_language_settings(callback, state)
            show_debug = settings.get("show_debug", False)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∏–∑—É—á–µ–Ω–Ω–æ–º —Å–ª–æ–≤–µ
            message_text = f"‚úÖ –°–ª–æ–≤–æ –∏–∑—É—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:\n\n"
            message_text += f"–ü–µ—Ä–µ–≤–æ–¥: <b>{translation}</b>\n\n"
            message_text += f"–°–ª–æ–≤–æ: <code>{word_foreign}</code>\n"
            
            if transcription:
                message_text += f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <b>[{transcription}]</b>\n\n"
            else:
                message_text += "\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö
            if show_debug:
                message_text += f"‚úÖ –û—Ü–µ–Ω–∫–∞: 1 (–∑–Ω–∞—é —Å–ª–æ–≤–æ)\n"
                message_text += f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {new_check_interval} (–¥–Ω–µ–π)\n"
                if new_next_check_date:
                    formatted_date = format_date(new_next_check_date)
                    message_text += f"üîÑ –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {formatted_date}\n\n"
                else:
                    message_text += "üîÑ –î–∞—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n\n"
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if new_next_check_date:
                    formatted_date = format_date(new_next_check_date)
                    message_text += f"üìÖ –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {formatted_date}\n\n"
            
            message_text += "üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É..."
            
            await callback.message.answer(
                message_text,
                parse_mode="HTML"
            )
        else:
            # –°–ª–æ–≤–æ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ (–æ–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π)
            await callback.message.answer("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É...")
        
        # Reset word_shown flag
        user_word_state.set_flag('word_shown', False)
        
        # Remove pending flags
        user_word_state.remove_flag('pending_next_word')
        user_word_state.remove_flag('pending_word_know')
        
        # –ù–û–í–û–ï: –û—Ç–º–µ—á–∞–µ–º —Å–ª–æ–≤–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
        user_word_state.mark_word_as_processed()
        
        # Advance to next word
        success = user_word_state.advance_to_next_word()
        
        if not success:
            # –ù–û–í–û–ï: –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—Ç–∏—é
            api_client = get_api_client_from_bot(callback.bot)
            next_batch_loaded = await load_next_batch(callback.message, state, user_word_state, api_client)
            
            if next_batch_loaded:
                # –ü–∞—Ä—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏
                await state.set_state(StudyStates.studying)
                await show_study_word(callback.message, state, need_new_message=True)
                await callback.answer()
                return
            else:
                # –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤—Å–µ —Å–ª–æ–≤–∞
                await state.set_state(StudyStates.study_completed)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                session_stats = user_word_state.get_session_statistics()
                
                await callback.message.answer(
                    f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏–ª–∏ –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞!</b>\n\n"
                    f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:</b>\n"
                    f"üìö –í—Å–µ–≥–æ —Å–ª–æ–≤ –∏–∑—É—á–µ–Ω–æ: {session_stats['total_words_processed']}\n"
                    f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–∞—Ä—Ç–∏–π: {session_stats['batches_loaded']}\n"
                    f"üìà –°—Ä–µ–¥–Ω–µ–µ —Å–ª–æ–≤ –≤ –ø–∞—Ä—Ç–∏–∏: {session_stats['average_words_per_batch']:.0f}\n\n"
                    f"üèÜ –≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
                    f"üìä –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stats\n"
                    f"‚öôÔ∏è –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings\n"
                    f"üîÑ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /study",
                    parse_mode="HTML"
                )
                return
        
        # Save updated state
        await user_word_state.save_to_state(state)
        
        # –ù–û–í–û–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑—É—á–µ–Ω–∏—è
        await state.set_state(StudyStates.studying)
        
        # Show next word
        await show_study_word(callback.message, state, need_new_message=True)
    else:
        # Fallback to old approach if state model is invalid
        logger.warning("UserWordState invalid, using fallback approach to advance to next word")
        
        # Get current state data
        user_data = await state.get_data()
        current_index = user_data.get("current_study_index", 0) + 1
        
        study_words = user_data.get("study_words", [])
        
        if current_index >= len(study_words):
            # –ù–û–í–û–ï: –í fallback —Ä–µ–∂–∏–º–µ —Ç–æ–∂–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await state.set_state(StudyStates.study_completed)
            await callback.message.answer(
                "üéâ –ü–∞—Ä—Ç–∏—è —Å–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                "üìä –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stats\n"
                "‚öôÔ∏è –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑—É—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings\n"
                "üîÑ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /study"
            )
            return
        
        # Update state with new index
        await state.update_data(current_study_index=current_index)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è fallback —Å–ª—É—á–∞—è
        await callback.message.answer("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É...")
        
        # –ù–û–í–û–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑—É—á–µ–Ω–∏—è
        await state.set_state(StudyStates.studying)
        
        # Show next word
        await show_study_word(callback.message, state, need_new_message=True)
    
    await callback.answer()
    