"""
Handlers for language management in administrative mode.
Updated with FSM states for better navigation control.
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from app.utils.api_utils import get_api_client_from_bot
from app.utils.logger import setup_logger
from app.bot.states.centralized_states import AdminStates, StudyStates
from app.bot.keyboards.admin_keyboards import (
    get_word_actions_keyboard
)
from app.utils.callback_constants import CallbackData
from app.bot.keyboards.admin_keyboards import get_word_actions_keyboard_from_study
from app.bot.keyboards.admin_keyboards import (
    get_word_actions_keyboard,
    get_word_actions_keyboard_from_study,  # –ù–û–í–û–ï
)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
word_router = Router()

logger = setup_logger(__name__)


@word_router.callback_query(AdminStates.viewing_language_details, F.data.startswith("search_word_by_number_"))
async def process_search_word_by_number(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤–∞ –ø–æ –Ω–æ–º–µ—Ä—É.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç callback query –æ—Ç Telegram
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –ò–∑–º–µ–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —è–∑—ã–∫–∞
    language_id = callback_query.data.split("_")[-1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —è–∑—ã–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(language_id=language_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Å–ª–æ–≤–∞
    await callback_query.message.answer(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>1</code> - –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–ø–∏—Å–∫–µ",
        parse_mode="HTML"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Å–ª–æ–≤–∞
    await state.set_state(AdminStates.input_word_number)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.answer()

@word_router.message(AdminStates.input_word_number)
async def process_word_number_input(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤–∞ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.first_name

    logger.info(f"'process_word_number_input' message from: {full_name}")

    api_client = get_api_client_from_bot(message.bot)
    
    if not api_client:
        await message.reply("–û—à–∏–±–∫–∞: API –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not message.text.isdigit():
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)."
        )
        return
    
    word_number = int(message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º ID —è–∑—ã–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    language_id = data.get('language_id')
    
    if not language_id:
        await message.reply(
            "‚ùå –û—à–∏–±–∫–∞: ID —è–∑—ã–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –ø–æ –Ω–æ–º–µ—Ä—É
    word_response = await api_client.get_word_by_number(language_id, word_number)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    if not word_response["success"]:
        await message.reply(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª–æ–≤–∞ —Å –Ω–æ–º–µ—Ä–æ–º {word_number}. "
            f"–í–æ–∑–º–æ–∂–Ω–æ, —Å–ª–æ–≤–æ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = word_response["result"]
    if not result or (isinstance(result, list) and len(result) == 0):
        await message.reply(
            f"‚ö†Ô∏è –°–ª–æ–≤–æ —Å –Ω–æ–º–µ—Ä–æ–º {word_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        )
        # ‚úÖ –ù–û–í–û–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–∞
        await state.set_state(AdminStates.viewing_language_details)
        await show_language_edit_screen(message, language_id, is_callback=False)
        return
    
    # ‚úÖ –ù–û–í–û–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤–∞
    await state.set_state(AdminStates.viewing_word_search_results)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ)
    words = result
    word = words[0] if isinstance(words, list) else words
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–ª–æ–≤–∞, –ø—Ä–æ–≤–µ—Ä—è—è —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏
    word_id = word.get('id') or word.get('_id') or word.get('word_id') or 'N/A'

    await show_word_details_screen(message, word_id, state)

        
@word_router.callback_query(AdminStates.viewing_word_search_results, F.data.startswith("edit_word_"))
@word_router.callback_query(AdminStates.viewing_word_details, F.data.startswith("edit_word_"))
@word_router.callback_query(StudyStates.studying, F.data.startswith("edit_word_"))
async def process_edit_word(callback: CallbackQuery, state: FSMContext):
    """
    Show word editing menu.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    from app.utils.callback_constants import CallbackParser
    
    # –ü–∞—Ä—Å–∏–º callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è word_id
    word_id = CallbackParser.parse_edit_word(callback.data)
    
    if not word_id:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: ID —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer()
        return
    
    logger.info(f"'edit_word' callback for word ID: {word_id}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Å–ª–æ–≤–∞
    await state.set_state(AdminStates.viewing_word_details)
    await state.update_data(editing_word_id=word_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API
    api_client = get_api_client_from_bot(callback.bot)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ
    word_response = await api_client.get_word(word_id)
    
    if not word_response["success"] or not word_response["result"]:
        error_msg = word_response.get("error", "–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {error_msg}")
        await callback.answer()
        logger.error(f"Failed to get word by ID {word_id}. Error: {error_msg}")
        return
    
    word = word_response["result"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ
    language_response = await api_client.get_language(word['language_id'])
    language_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫"
    
    if language_response["success"] and language_response["result"]:
        language = language_response["result"]
        language_name = f"{language['name_ru']} ({language['name_foreign']})"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ª–æ–≤–µ
    word_info = (
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞</b>\n\n"
        f"–Ø–∑—ã–∫: <b>{language_name}</b>\n"
        f"–ù–æ–º–µ—Ä: <b>{word.get('word_number', 'N/A')}</b>\n"
        f"–°–ª–æ–≤–æ: <b>{word.get('word_foreign', 'N/A')}</b>\n"
        f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <b>{word.get('transcription', 'N/A')}</b>\n"
        f"–ü–µ—Ä–µ–≤–æ–¥: <b>{word.get('translation', 'N/A')}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from app.bot.keyboards.admin_keyboards import get_word_edit_keyboard
    keyboard = get_word_edit_keyboard(word_id, word['language_id'])
    
    await callback.message.edit_text(
        word_info,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    await callback.answer()


@word_router.callback_query(AdminStates.viewing_word_details, F.data.startswith("edit_wordfield_foreign_"))
async def process_edit_wordfield_foreign(callback: CallbackQuery, state: FSMContext):
    """
    Start editing word foreign text.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    from app.utils.callback_constants import CallbackParser
    
    # –ü–∞—Ä—Å–∏–º callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è word_id
    field, word_id = CallbackParser.parse_edit_wordfield(callback.data)
    
    if not word_id:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: ID —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(editing_word_id=word_id, editing_field="word_foreign")
    
    await callback.message.answer(
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ:",
        parse_mode="HTML"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    await state.set_state(AdminStates.editing_word_foreign)
    
    await callback.answer()


@word_router.callback_query(AdminStates.viewing_word_details, F.data.startswith("edit_wordfield_translation_"))
async def process_edit_wordfield_translation(callback: CallbackQuery, state: FSMContext):
    """
    Start editing word translation.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    from app.utils.callback_constants import CallbackParser
    
    # –ü–∞—Ä—Å–∏–º callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è word_id
    field, word_id = CallbackParser.parse_edit_wordfield(callback.data)
    
    if not word_id:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: ID —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(editing_word_id=word_id, editing_field="translation")
    
    await callback.message.answer(
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫:",
        parse_mode="HTML"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
    await state.set_state(AdminStates.editing_word_translation)
    
    await callback.answer()


@word_router.callback_query(AdminStates.viewing_word_details, F.data.startswith("edit_wordfield_transcription_"))
async def process_edit_wordfield_transcription(callback: CallbackQuery, state: FSMContext):
    """
    Start editing word transcription.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    from app.utils.callback_constants import CallbackParser
    
    # –ü–∞—Ä—Å–∏–º callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è word_id
    field, word_id = CallbackParser.parse_edit_wordfield(callback.data)
    
    if not word_id:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: ID —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(editing_word_id=word_id, editing_field="transcription")
    
    await callback.message.answer(
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ª–æ–≤–∞:",
        parse_mode="HTML"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    await state.set_state(AdminStates.editing_word_transcription)
    
    await callback.answer()


@word_router.callback_query(AdminStates.viewing_word_details, F.data.startswith("edit_wordfield_number_"))
async def process_edit_wordfield_number(callback: CallbackQuery, state: FSMContext):
    """
    Start editing word number.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    from app.utils.callback_constants import CallbackParser
    
    # –ü–∞—Ä—Å–∏–º callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è word_id
    field, word_id = CallbackParser.parse_edit_wordfield(callback.data)
    
    if not word_id:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: ID —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(editing_word_id=word_id, editing_field="word_number")
    
    await callback.message.answer(
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å–ª–æ–≤–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞ –≤ —á–∞—Å—Ç–æ—Ç–Ω–æ–º —Å–ø–∏—Å–∫–µ:",
        parse_mode="HTML"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Å–ª–æ–≤–∞
    await state.set_state(AdminStates.editing_word_number)
    
    await callback.answer()


@word_router.message(AdminStates.editing_word_foreign)
async def process_word_foreign_input(message: Message, state: FSMContext):
    """
    Process foreign word input from admin.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    await process_word_field_update(message, state, "word_foreign", "–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞")


@word_router.message(AdminStates.editing_word_translation)
async def process_word_translation_input(message: Message, state: FSMContext):
    """
    Process translation input from admin.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    await process_word_field_update(message, state, "translation", "–ø–µ—Ä–µ–≤–æ–¥–∞")


@word_router.message(AdminStates.editing_word_transcription)
async def process_word_transcription_input(message: Message, state: FSMContext):
    """
    Process transcription input from admin.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    await process_word_field_update(message, state, "transcription", "—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")


@word_router.message(AdminStates.editing_word_number)
async def process_word_number_input(message: Message, state: FSMContext):
    """
    Process word number input from admin.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not message.text.isdigit():
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)."
        )
        return
    
    word_number = int(message.text)
    await process_word_field_update(message, state, "word_number", "–Ω–æ–º–µ—Ä–∞ —Å–ª–æ–≤–∞", word_number)


async def process_word_field_update(message: Message, state: FSMContext, field_name: str, field_display_name: str, value=None):
    """
    Common function to update word field.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
        field_name: Name of the field to update
        field_display_name: Display name for user messages
        value: Value to update (if None, uses message.text)
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    word_id = user_data.get('editing_word_id')
    
    if not word_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: ID —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API
    api_client = get_api_client_from_bot(message.bot)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_value = value if value is not None else message.text
    update_data = {field_name: update_value}
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–æ —á–µ—Ä–µ–∑ API
    try:
        update_response = await api_client.update_word(word_id, update_data)
        
        if not update_response["success"]:
            error_msg = update_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {field_display_name}: {error_msg}")
            logger.error(f"Failed to update word {word_id} field {field_name}. Error: {error_msg}")
            await state.clear()
            return
        
        await message.answer(
            f"‚úÖ {field_display_name.capitalize()} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —ç–∫—Ä–∞–Ω—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞
        await state.set_state(AdminStates.viewing_word_details)
        await show_word_edit_screen_after_update(message, word_id)
        
    except Exception as e:
        logger.error(f"Error updating word field {field_name}: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {field_display_name}: {str(e)}"
        )
        await state.clear()


async def show_word_edit_screen_after_update(message: Message, word_id: str):
    """
    Show word edit screen after successful update.
    
    Args:
        message: The message object from Telegram
        word_id: ID of the updated word
    """
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API
    api_client = get_api_client_from_bot(message.bot)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ
    word_response = await api_client.get_word(word_id)
    
    if not word_response["success"] or not word_response["result"]:
        error_msg = word_response.get("error", "–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {error_msg}")
        logger.error(f"Failed to get updated word by ID {word_id}. Error: {error_msg}")
        return
    
    word = word_response["result"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ
    language_response = await api_client.get_language(word['language_id'])
    language_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫"
    
    if language_response["success"] and language_response["result"]:
        language = language_response["result"]
        language_name = f"{language['name_ru']} ({language['name_foreign']})"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ª–æ–≤–µ
    word_info = (
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞</b>\n\n"
        f"–Ø–∑—ã–∫: <b>{language_name}</b>\n"
        f"–ù–æ–º–µ—Ä: <b>{word.get('word_number', 'N/A')}</b>\n"
        f"–°–ª–æ–≤–æ: <b>{word.get('word_foreign', 'N/A')}</b>\n"
        f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <b>{word.get('transcription', 'N/A')}</b>\n"
        f"–ü–µ—Ä–µ–≤–æ–¥: <b>{word.get('translation', 'N/A')}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from app.bot.keyboards.admin_keyboards import get_word_edit_keyboard
    keyboard = get_word_edit_keyboard(word_id, word['language_id'])
    
    await message.answer(
        word_info,
        parse_mode="HTML",
        reply_markup=keyboard
    )


@word_router.callback_query(AdminStates.viewing_word_details, F.data == CallbackData.BACK_TO_WORD_DETAILS)
@word_router.callback_query(F.data == CallbackData.BACK_TO_WORD_DETAILS)
async def process_back_to_word_details(callback: CallbackQuery, state: FSMContext):
    """
    Handle going back to word details from edit menu.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_data = await state.get_data()
    word_id = user_data.get('editing_word_id')
    
    if not word_id:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: ID —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer()
        return
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —ç–∫—Ä–∞–Ω—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–æ–≤–∞
    await show_word_details_screen(callback, word_id, state)
    
    await callback.answer()


async def show_word_details_screen(message_or_callback: CallbackQuery, word_id: str, state):
    """
    Show word details screen.
    
    Args:
        callback: The callback query from Telegram
        word_id: ID of the word
    """
    user_id = message_or_callback.from_user.id
    username = message_or_callback.from_user.username
    full_name = message_or_callback.from_user.full_name

    logger.info(f"'show_edit_word' from: {full_name}")

    if isinstance(message_or_callback, CallbackQuery):
        message = message_or_callback.message
    else:
        message = message_or_callback

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API
    api_client = get_api_client_from_bot(message_or_callback.bot)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ
    word_response = await api_client.get_word(word_id)
    
    if not word_response["success"] or not word_response["result"]:
        error_msg = word_response.get("error", "–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await message.answer(f"–û—à–∏–±–∫–∞: {error_msg}")
        logger.error(f"Failed to get word by ID {word_id}. Error: {error_msg}")
        return
    
    word = word_response["result"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ
    language_id = word['language_id']
    language_response = await api_client.get_language(language_id)
    language_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫"
    
    if language_response["success"] and language_response["result"]:
        language = language_response["result"]
        language_name = f"{language['name_ru']} ({language['name_foreign']})"
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = ""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è 
    state_data = await state.get_data()

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ db_user_id
    db_user_id = state_data.get('db_user_id')
    
    if db_user_id:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞
        user_word_response = await api_client.get_user_word_data(db_user_id, word_id)
        
        if user_word_response["success"] and user_word_response["result"]:
            user_word_data = user_word_response["result"]
            
            # –§–ª–∞–≥ –ø—Ä–æ–ø—É—Å–∫–∞ —Å–ª–æ–≤–∞
            is_skipped = user_word_data.get("is_skipped", False)
            
            # –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏
            check_interval = user_word_data.get("check_interval", 0)
            
            # –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            next_check_date = user_word_data.get("next_check_date")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            formatted_next_check_date = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            if next_check_date:
                try:
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
                    from app.utils.formatting_utils import format_date_standard
                    formatted_next_check_date = format_date_standard(next_check_date)
                except Exception as e:
                    logger.error(f"Error formatting date: {e}")
                    formatted_next_check_date = str(next_check_date).split('T')[0]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            user_info = (
                f"\n<b>–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({username}):</b>\n"
                f"–§–ª–∞–≥ –ø—Ä–æ–ø—É—Å–∫–∞: <b>{'–î–∞' if is_skipped else '–ù–µ—Ç'}</b>\n"
                f"–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{check_interval} –¥–Ω–µ–π</b>\n"
                f"–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{formatted_next_check_date}</b>\n"
            )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ª–æ–≤–µ
    word_info = (
        f"üìñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ–≤–µ</b>\n\n"
        f"–Ø–∑—ã–∫: <b>{language_name}</b>\n"
        f"–ù–æ–º–µ—Ä: <b>{word.get('word_number', 'N/A')}</b>\n"
        f"–°–ª–æ–≤–æ: <code>{word.get('word_foreign', 'N/A')}</code>\n"
        f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <code>{word.get('transcription', 'N/A')}</code>\n"
        f"–ü–µ—Ä–µ–≤–æ–¥: <code>{word.get('translation', 'N/A')}</code>\n"
        f"ID: <code>{word_id}</code>"
        f"{user_info}"
    )
    
    from_study = state_data.get("return_to_study", False)

    # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if from_study:
        keyboard = get_word_actions_keyboard_from_study(word_id, language_id)
    else:
        keyboard = get_word_actions_keyboard(word_id, language_id)

    
    await message.answer(
        word_info,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
@word_router.callback_query(AdminStates.viewing_word_search_results, F.data.startswith("delete_word_"))
@word_router.callback_query(AdminStates.viewing_word_details, F.data.startswith("delete_word_"))
@word_router.callback_query(F.data.startswith("delete_word_"))
async def process_delete_word(callback: CallbackQuery, state: FSMContext):
    """
    Start word deletion process with confirmation.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    from app.utils.callback_constants import CallbackParser
    
    # –ü–∞—Ä—Å–∏–º callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è word_id
    word_id = CallbackParser.parse_delete_word(callback.data)
    
    if not word_id:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: ID —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer()
        return
    
    logger.info(f"'delete_word' callback for word ID: {word_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API
    api_client = get_api_client_from_bot(callback.bot)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
    word_response = await api_client.get_word(word_id)
    
    if not word_response["success"] or not word_response["result"]:
        error_msg = word_response.get("error", "–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {error_msg}")
        await callback.answer()
        logger.error(f"Failed to get word by ID {word_id}. Error: {error_msg}")
        return
    
    word = word_response["result"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ
    language_response = await api_client.get_language(word['language_id'])
    language_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫"
    
    if language_response["success"] and language_response["result"]:
        language = language_response["result"]
        language_name = f"{language['name_ru']} ({language['name_foreign']})"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
    await state.set_state(AdminStates.confirming_word_deletion)
    await state.update_data(deleting_word_id=word_id, word_language_id=word['language_id'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    confirmation_message = (
        f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞</b>\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–ª–æ–≤–æ?\n\n"
        f"–Ø–∑—ã–∫: <b>{language_name}</b>\n"
        f"–ù–æ–º–µ—Ä: <b>{word.get('word_number', 'N/A')}</b>\n"
        f"–°–ª–æ–≤–æ: <b>{word.get('word_foreign', 'N/A')}</b>\n"
        f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <b>{word.get('transcription', 'N/A')}</b>\n"
        f"–ü–µ—Ä–µ–≤–æ–¥: <b>{word.get('translation', 'N/A')}</b>\n\n"
        f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç:\n"
        f"‚Ä¢ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞\n"
        f"‚Ä¢ –í—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞\n"
        f"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑—É—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–æ!"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    from app.bot.keyboards.admin_keyboards import get_word_delete_confirmation_keyboard
    keyboard = get_word_delete_confirmation_keyboard(word_id)
    
    await callback.message.edit_text(
        confirmation_message,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    await callback.answer()


@word_router.callback_query(AdminStates.confirming_word_deletion, F.data.startswith("confirm_word_delete_"))
@word_router.callback_query(F.data.startswith("confirm_word_delete_"))
async def process_confirm_word_delete(callback: CallbackQuery, state: FSMContext):
    """
    Confirm and execute word deletion.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    from app.utils.callback_constants import CallbackParser
    
    # –ü–∞—Ä—Å–∏–º callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è word_id
    word_id = CallbackParser.parse_confirm_word_delete(callback.data)
    
    if not word_id:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: ID —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer()
        return
    
    logger.info(f"'confirm_word_delete' callback for word ID: {word_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    language_id = user_data.get('word_language_id')
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API
    api_client = get_api_client_from_bot(callback.bot)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
    word_response = await api_client.get_word(word_id)
    word_info = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–ª–æ–≤–æ"
    
    if word_response["success"] and word_response["result"]:
        word = word_response["result"]
        word_info = f"{word.get('word_foreign', 'N/A')} - {word.get('translation', 'N/A')}"
    
    # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ —á–µ—Ä–µ–∑ API
    try:
        delete_response = await api_client.delete_word(word_id)
        
        if not delete_response["success"]:
            error_msg = delete_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {error_msg}")
            logger.error(f"Failed to delete word {word_id}. Error: {error_msg}")
            await callback.answer()
            return
        
        # –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        result = delete_response["result"]
        success_message = f"‚úÖ –°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!\n\n"
        
        if isinstance(result, dict) and result.get('message'):
            success_message += f"–°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message')}"
        else:
            success_message += f"–£–¥–∞–ª–µ–Ω–æ —Å–ª–æ–≤–æ: {word_info}"
        
        await callback.message.answer(success_message)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        logger.info(f"Word {word_id} ({word_info}) successfully deleted by admin")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —ç–∫—Ä–∞–Ω—É —è–∑—ã–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å language_id
        if language_id:
            await state.set_state(AdminStates.viewing_language_details)
            await show_language_edit_screen_callback(callback, language_id)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç language_id, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω–∫—É
            await state.set_state(AdminStates.main_menu)
            from app.bot.handlers.admin.admin_basic_handlers import handle_admin_mode
            await handle_admin_mode(callback, state, is_callback=True)
        
    except Exception as e:
        logger.error(f"Error deleting word {word_id}: {e}")
        await callback.message.answer(
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {str(e)}"
        )
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        await state.clear()
    
    await callback.answer()


@word_router.callback_query(AdminStates.confirming_word_deletion, F.data.startswith("cancel_word_delete_"))
@word_router.callback_query(F.data.startswith("cancel_word_delete_"))
async def process_cancel_word_delete(callback: CallbackQuery, state: FSMContext):
    """
    Cancel word deletion and return to word details.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    from app.utils.callback_constants import CallbackParser
    
    # –ü–∞—Ä—Å–∏–º callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è word_id
    word_id = CallbackParser.parse_cancel_word_delete(callback.data)
    
    if not word_id:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: ID —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer()
        return
    
    logger.info(f"'cancel_word_delete' callback for word ID: {word_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    language_id = user_data.get('word_language_id')
    
    await callback.message.answer("üö´ –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º —Å–ª–æ–≤–∞
    await state.set_state(AdminStates.viewing_word_details)
    await state.update_data(editing_word_id=word_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å–ª–æ–≤–∞
    await show_word_details_screen(callback, word_id)
    
    await callback.answer()


async def get_word_usage_statistics(api_client, word_id: str) -> dict:
    """
    Get usage statistics for a word before deletion.
    
    Args:
        api_client: API client instance
        word_id: ID of the word
        
    Returns:
        dict: Usage statistics
    """
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏–∑—É—á–∞—é—â–∏—Ö —ç—Ç–æ —Å–ª–æ–≤–æ
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        return {
            "users_studying": 0,
            "total_hints_created": 0,
            "total_study_sessions": 0
        }
    except Exception as e:
        logger.error(f"Error getting word usage statistics for {word_id}: {e}")
        return {
            "users_studying": "N/A",
            "total_hints_created": "N/A", 
            "total_study_sessions": "N/A"
        }


async def safe_delete_word_with_checks(api_client, word_id: str, word_info: dict) -> tuple:
    """
    Safely delete word with additional checks and logging.
    
    Args:
        api_client: API client instance
        word_id: ID of the word to delete
        word_info: Information about the word
        
    Returns:
        tuple: (success: bool, message: str, details: dict)
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        usage_stats = await get_word_usage_statistics(api_client, word_id)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        delete_response = await api_client.delete_word(word_id)
        
        if delete_response["success"]:
            return True, "–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ", {
                "word_info": word_info,
                "usage_stats": usage_stats,
                "api_response": delete_response["result"]
            }
        else:
            error_msg = delete_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API")
            return False, f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {error_msg}", {}
            
    except Exception as e:
        logger.error(f"Critical error in safe_delete_word_with_checks for word {word_id}: {e}")
        return False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", {}


async def process_bulk_word_operations(callback: CallbackQuery, state: FSMContext, operation: str):
    """
    Handle bulk operations on words (delete multiple, export, etc.).
    Placeholder for future functionality.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
        operation: Type of bulk operation
    """
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∞ –≤ –±—É–¥—É—â–µ–º –¥–ª—è:
    # - –ú–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    # - –≠–∫—Å–ø–æ—Ä—Ç–∞ —Å–ª–æ–≤ –≤ —Ñ–∞–π–ª
    # - –ú–∞—Å—Å–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    await callback.message.answer(
        f"üöß –§—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π ({operation}) –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö"
    )
    await callback.answer()


def log_admin_word_action(action: str, word_id: str, word_info: str, admin_user_id: int, admin_username: str):
    """
    Log administrative actions with words for audit purposes.
    
    Args:
        action: Type of action (edit, delete, etc.)
        word_id: ID of the word
        word_info: Information about the word
        admin_user_id: Telegram ID of the admin
        admin_username: Username of the admin
    """
    logger.info(
        f"ADMIN_ACTION: {action} | "
        f"Word: {word_id} ({word_info}) | "
        f"Admin: {admin_user_id} (@{admin_username})"
    )


@word_router.callback_query(F.data == CallbackData.BACK_TO_STUDY_FROM_ADMIN)
async def process_back_to_study_from_admin_handler(callback: CallbackQuery, state: FSMContext):
    """
    Handle return to study from admin mode (admin module handler).
    This is a backup handler if the one in study_word_actions.py doesn't catch it.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    logger.info(f"Admin module: 'back_to_study_from_admin' callback from {callback.from_user.full_name}")
    
    # Redirect to the main handler in study module
    from app.bot.handlers.study.study_word_actions import process_back_to_study_from_admin
    await process_back_to_study_from_admin(callback, state)


async def show_word_details_screen_from_study(callback: CallbackQuery, word_id: str, from_study: bool = True):
    """
    Show word details screen when coming from study mode.
    
    Args:
        callback: The callback query from Telegram
        word_id: ID of the word
        from_study: Whether coming from study mode
    """
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API
    api_client = get_api_client_from_bot(callback.bot)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ
    word_response = await api_client.get_word(word_id)
    
    if not word_response["success"] or not word_response["result"]:
        error_msg = word_response.get("error", "–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {error_msg}")
        logger.error(f"Failed to get word by ID {word_id}. Error: {error_msg}")
        return
    
    word = word_response["result"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ
    language_response = await api_client.get_language(word['language_id'])
    language_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫"
    
    if language_response["success"] and language_response["result"]:
        language = language_response["result"]
        language_name = f"{language['name_ru']} ({language['name_foreign']})"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ª–æ–≤–µ
    word_info = (
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–∑ –∏–∑—É—á–µ–Ω–∏—è</b>\n\n"
        f"–Ø–∑—ã–∫: <b>{language_name}</b>\n"
        f"–ù–æ–º–µ—Ä: <b>{word.get('word_number', 'N/A')}</b>\n"
        f"–°–ª–æ–≤–æ: <code>{word.get('word_foreign', 'N/A')}</code>\n"
        f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <code>{word.get('transcription', 'N/A')}</code>\n"
        f"–ü–µ—Ä–µ–≤–æ–¥: <code>{word.get('translation', 'N/A')}</code>\n"
        f"ID: <code>{word_id}</code>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = get_word_actions_keyboard_from_study(word_id, word['language_id'])
    
    await callback.message.answer(
        word_info,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@word_router.callback_query(F.data.startswith(CallbackData.ADMIN_EDIT_WORD_FROM_STUDY), StudyStates.studying)
async def process_edit_word_from_study(callback: CallbackQuery, state: FSMContext):
    """
    Show word editing menu when coming from study mode.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    from app.utils.callback_constants import CallbackParser
    
    # –ü–∞—Ä—Å–∏–º callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è word_id
    word_id = CallbackParser.parse_admin_edit_from_study(callback.data)
    
    if not word_id:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: ID —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer()
        return
    
    logger.info(f"'edit_word_from_study' callback for word ID: {word_id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏–∑—É—á–µ–Ω–∏—é
    await state.update_data(
        return_to_study=True,
    )

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API
    api_client = get_api_client_from_bot(callback.bot)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ
    word_response = await api_client.get_word(word_id)
    
    if not word_response["success"] or not word_response["result"]:
        error_msg = word_response.get("error", "–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {error_msg}")
        await callback.answer()
        logger.error(f"Failed to get word by ID {word_id}. Error: {error_msg}")
        return
    
    word = word_response["result"]
        
    await callback.answer()

    await show_word_details_screen(callback, word_id, state)

