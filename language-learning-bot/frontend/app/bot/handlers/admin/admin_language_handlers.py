"""
Handlers for language management in administrative mode.
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.utils.api_utils import get_api_client_from_bot
from app.utils.logger import setup_logger
from app.bot.handlers.admin.admin_states import AdminStates
from app.bot.keyboards.admin_keyboards import (
    get_admin_keyboard, 
    get_languages_keyboard,
    get_edit_language_keyboard,
    get_back_to_languages_keyboard,
    get_word_actions_keyboard
)
from app.utils.formatting_utils import format_date_standard

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–∞–º–∏
language_router = Router()

logger = setup_logger(__name__)

@language_router.message(Command("managelang"))
async def cmd_manage_languages(message: Message, state: FSMContext):
    """
    Handle the /managelang command which shows language management options.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    logger.info(f"'/managelang' command from {full_name} ({username})")
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await handle_language_management(message, state, is_callback=False)

@language_router.callback_query(F.data == "create_language")
async def process_create_language(callback: CallbackQuery, state: FSMContext):
    """
    Start creating a new language.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'create_language' callback from {full_name} ({username})")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã
    api_client = get_api_client_from_bot(callback.bot)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_response = await api_client.get_user_by_telegram_id(user_id)
    
    if not user_response["success"]:
        error_msg = user_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {error_msg}")
        await callback.answer()
        logger.error(f"Failed to get user data during create_language. Error: {error_msg}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
    users = user_response["result"]
    user = users[0] if users and isinstance(users, list) and len(users) > 0 else None
    
    if not user or not user.get("is_admin", False):
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await callback.answer()
        return
    
    await callback.message.answer(
        "üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —è–∑—ã–∫–∞
    await state.set_state(AdminStates.creating_language_name)
    
    await callback.answer()

@language_router.message(AdminStates.creating_language_name)
async def process_language_name(message: Message, state: FSMContext):
    """
    Process language name input from admin.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(language_name_ru=message.text)
    
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º: {message.text}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –Ω–∞ —è–∑—ã–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞:"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    await state.set_state(AdminStates.creating_language_native_name)

@language_router.message(AdminStates.creating_language_native_name)
async def process_language_native_name(message: Message, state: FSMContext):
    """
    Process language native name input from admin.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    name_ru = user_data.get('language_name_ru')
    name_foreign = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã
    api_client = get_api_client_from_bot(message.bot)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —è–∑—ã–∫ —á–µ—Ä–µ–∑ API
    try:
        language_data = {
            "name_ru": name_ru,
            "name_foreign": name_foreign
        }
        
        create_response = await api_client.create_language(language_data)
        
        if not create_response["success"]:
            error_msg = create_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —è–∑—ã–∫–∞: {error_msg}")
            logger.error(f"Failed to create language. Error: {error_msg}")
            await state.clear()
            return
        
        result = create_response["result"]
        
        await message.answer(
            f"‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"ID: {result.get('id')}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º: {result.get('name_ru')}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —è–∑—ã–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {result.get('name_foreign')}"
        )
        
    except Exception as e:
        logger.error(f"Error creating language: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —è–∑—ã–∫–∞: {str(e)}"
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@language_router.message(AdminStates.editing_language_name)
async def process_edit_language_name(message: Message, state: FSMContext):
    """
    Process edited language name from admin.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    language_id = user_data.get('editing_language_id')
    
    if not language_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: ID —è–∑—ã–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã
    api_client = get_api_client_from_bot(message.bot)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ —á–µ—Ä–µ–∑ API
    try:
        update_data = {
            "name_ru": message.text
        }
        
        update_response = await api_client.update_language(language_id, update_data)
        
        if not update_response["success"]:
            error_msg = update_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞: {error_msg}")
            logger.error(f"Failed to update language {language_id}. Error: {error_msg}")
            await state.clear()
            return
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–∞
        await process_edit_language_after_update(message, language_id)
        
    except Exception as e:
        logger.error(f"Error updating language: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞: {str(e)}"
        )
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

@language_router.message(AdminStates.editing_language_native_name)
async def process_edit_language_native_name(message: Message, state: FSMContext):
    """
    Process edited language native name from admin.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    language_id = user_data.get('editing_language_id')
    
    if not language_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: ID —è–∑—ã–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã
    api_client = get_api_client_from_bot(message.bot)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ —á–µ—Ä–µ–∑ API
    try:
        update_data = {
            "name_foreign": message.text
        }
        
        update_response = await api_client.update_language(language_id, update_data)
        
        if not update_response["success"]:
            error_msg = update_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞: {error_msg}")
            logger.error(f"Failed to update language {language_id}. Error: {error_msg}")
            await state.clear()
            return
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–∞
        await process_edit_language_after_update(message, language_id)
        
    except Exception as e:
        logger.error(f"Error updating language: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞: {str(e)}"
        )
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

@language_router.callback_query(F.data.startswith("edit_name_ru_"))
async def process_edit_name_ru(callback: CallbackQuery, state: FSMContext):
    """
    Start editing language Russian name.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —è–∑—ã–∫–∞ –∏–∑ callback_data
    language_id = callback.data.split("_")[-1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(editing_language_id=language_id)
    
    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
    await state.set_state(AdminStates.editing_language_name)
    
    await callback.answer()

@language_router.callback_query(F.data.startswith("edit_name_foreign_"))
async def process_edit_name_foreign(callback: CallbackQuery, state: FSMContext):
    """
    Start editing language native name.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —è–∑—ã–∫–∞ –∏–∑ callback_data
    language_id = callback.data.split("_")[-1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(editing_language_id=language_id)
    
    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –Ω–∞ —è–∑—ã–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞:"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    await state.set_state(AdminStates.editing_language_native_name)
    
    await callback.answer()

@language_router.callback_query(F.data.startswith("delete_language_"))
async def process_delete_language(callback: CallbackQuery, state: FSMContext):
    """
    Delete a language after confirmation.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —è–∑—ã–∫–∞ –∏–∑ callback_data
    language_id = callback.data.split("_")[-1]
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã
    api_client = get_api_client_from_bot(callback.bot)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ –∏–∑ API
    language_response = await api_client.get_language(language_id)
    
    if not language_response["success"] or not language_response["result"]:
        error_msg = language_response.get("error", "–Ø–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {error_msg}")
        await callback.answer()
        logger.error(f"Failed to get language by ID {language_id}. Error: {error_msg}")
        return
    
    language = language_response["result"]
    
    # –°–æ–∑–¥–∞–µ–º –±–∏–ª–¥–µ—Ä –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
        callback_data=f"confirm_delete_{language_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=f"cancel_delete_{language_id}"
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder.adjust(2)
    
    await callback.message.answer(
        f"üóëÔ∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —è–∑—ã–∫?\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {language.get('name_ru')} ({language.get('name_foreign')})\n\n"
        f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–ª–æ–≤–∞, "
        f"—Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º —è–∑—ã–∫–æ–º, –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–æ!",
        reply_markup=builder.as_markup()
    )
    
    await callback.answer()

@language_router.callback_query(F.data.startswith("confirm_delete_"))
async def process_confirm_delete_language(callback: CallbackQuery, state: FSMContext):
    """
    Confirm language deletion.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —è–∑—ã–∫–∞ –∏–∑ callback_data
    language_id = callback.data.split("_")[-1]
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã
    api_client = get_api_client_from_bot(callback.bot)
    
    # –£–¥–∞–ª—è–µ–º —è–∑—ã–∫ —á–µ—Ä–µ–∑ API
    try:
        delete_response = await api_client.delete_language(language_id)
        
        if not delete_response["success"]:
            error_msg = delete_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞: {error_msg}")
            logger.error(f"Failed to delete language {language_id}. Error: {error_msg}")
            await callback.answer()
            return
        
        result = delete_response["result"]
        
        await callback.message.answer(
            f"‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message', '–Ø–∑—ã–∫ —É–¥–∞–ª–µ–Ω')}"
        )
        
    except Exception as e:
        logger.error(f"Error deleting language: {e}")
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞: {str(e)}"
        )
    
    await callback.answer()

@language_router.callback_query(F.data.startswith("cancel_delete_"))
async def process_cancel_delete_language(callback: CallbackQuery, state: FSMContext):
    """
    Cancel language deletion.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    await callback.message.answer("üö´ –£–¥–∞–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()

@language_router.callback_query(F.data.startswith("search_word_by_number_"))
async def process_search_word_by_number(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤–∞ –ø–æ –Ω–æ–º–µ—Ä—É.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç callback query –æ—Ç Telegram
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –ò–∑–º–µ–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —è–∑—ã–∫–∞
    language_id = callback_query.data.split("_")[-1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —è–∑—ã–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(language_id=language_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Å–ª–æ–≤–∞
    await callback_query.message.answer(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>1</code> - –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–ø–∏—Å–∫–µ",
        parse_mode="HTML"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Å–ª–æ–≤–∞
    await state.set_state(AdminStates.input_word_number)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.answer()

@language_router.message(AdminStates.input_word_number)
async def process_word_number_input(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤–∞ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.first_name

    api_client = get_api_client_from_bot(message.bot)
    
    if not api_client:
        await message.reply("–û—à–∏–±–∫–∞: API –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not message.text.isdigit():
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)."
        )
        return
    
    word_number = int(message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º ID —è–∑—ã–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    language_id = data.get('language_id')
    
    if not language_id:
        await message.reply(
            "‚ùå –û—à–∏–±–∫–∞: ID —è–∑—ã–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –ø–æ –Ω–æ–º–µ—Ä—É
    word_response = await api_client.get_word_by_number(language_id, word_number)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    if not word_response["success"]:
        await message.reply(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª–æ–≤–∞ —Å –Ω–æ–º–µ—Ä–æ–º {word_number}. "
            f"–í–æ–∑–º–æ–∂–Ω–æ, —Å–ª–æ–≤–æ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = word_response["result"]
    if not result or (isinstance(result, list) and len(result) == 0):
        await message.reply(
            f"‚ö†Ô∏è –°–ª–æ–≤–æ —Å –Ω–æ–º–µ—Ä–æ–º {word_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–∞
        await show_language_edit_screen(message, language_id, is_callback=False)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ)
    words = result
    word = words[0] if isinstance(words, list) else words
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ
    language_response = await api_client.get_language(language_id)
    language_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫"
    
    if language_response["success"] and language_response["result"]:
        language_name = language_response["result"]["name_ru"]
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–ª–æ–≤–∞, –ø—Ä–æ–≤–µ—Ä—è—è —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏
    word_id = word.get('id') or word.get('_id') or word.get('word_id') or 'N/A'
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = ""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ db_user_id
    db_user_id = data.get('db_user_id')
    
    if db_user_id:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞
        user_word_response = await api_client.get_user_word_data(db_user_id, word_id)
        
        if user_word_response["success"] and user_word_response["result"]:
            user_word_data = user_word_response["result"]
            
            # –§–ª–∞–≥ –ø—Ä–æ–ø—É—Å–∫–∞ —Å–ª–æ–≤–∞
            is_skipped = user_word_data.get("is_skipped", False)
            
            # –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏
            check_interval = user_word_data.get("check_interval", 0)
            
            # –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            next_check_date = user_word_data.get("next_check_date")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            formatted_next_check_date = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            if next_check_date:
                try:
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
                    from app.utils.formatting_utils import format_date_standard
                    formatted_next_check_date = format_date_standard(next_check_date)
                except Exception as e:
                    logger.error(f"Error formatting date: {e}")
                    formatted_next_check_date = str(next_check_date).split('T')[0]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            user_info = (
                f"\n<b>–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({username}):</b>\n"
                f"–§–ª–∞–≥ –ø—Ä–æ–ø—É—Å–∫–∞: <b>{'–î–∞' if is_skipped else '–ù–µ—Ç'}</b>\n"
                f"–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{check_interval} –¥–Ω–µ–π</b>\n"
                f"–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{formatted_next_check_date}</b>\n"
            )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ª–æ–≤–µ
    word_info = (
        f"üìñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ–≤–µ</b> üìñ\n\n"
        f"–Ø–∑—ã–∫: <b>{language_name}</b>\n"
        f"–ù–æ–º–µ—Ä: <b>{word.get('word_number', 'N/A')}</b>\n"
        f"–°–ª–æ–≤–æ: <b>{word.get('word_foreign', 'N/A')}</b>\n"
        f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <b>{word.get('transcription', 'N/A')}</b>\n"
        f"–ü–µ—Ä–µ–≤–æ–¥: <b>{word.get('translation', 'N/A')}</b>\n"
        f"ID: <code>{word_id}</code>\n"
        f"{user_info}"
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_word_actions_keyboard(word_id, language_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ
    await message.reply(
        word_info,
        parse_mode="HTML",
        reply_markup=keyboard
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()

async def handle_language_management(message_or_callback, state: FSMContext, is_callback=False):
    """
    Common handler logic for language management.
    
    Args:
        message_or_callback: The message or callback object from Telegram
        state: The FSM state context
        is_callback: Whether this is called from a callback handler
    """
    if is_callback:
        user_id = message_or_callback.from_user.id
        username = message_or_callback.from_user.username
        full_name = message_or_callback.from_user.full_name
        # –î–ª—è callback –∏—Å–ø–æ–ª—å–∑—É–µ–º message –∏–∑ callback
        message = message_or_callback.message
    else:
        user_id = message_or_callback.from_user.id
        username = message_or_callback.from_user.username
        full_name = message_or_callback.from_user.full_name
        # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ message –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º message
        message = message_or_callback

    logger.info(f"Language management requested by {full_name} ({username})")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã
    api_client = get_api_client_from_bot(message.bot)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_response = await api_client.get_user_by_telegram_id(user_id)
    
    if not user_response["success"]:
        error_msg = user_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {error_msg}")
        logger.error(f"Failed to get user data. Error: {error_msg}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
    users = user_response["result"]
    user = users[0] if users and isinstance(users, list) and len(users) > 0 else None
    
    if not user or not user.get("is_admin", False):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –∏–∑ API
    languages_response = await api_client.get_languages()
    
    if not languages_response["success"]:
        error_msg = languages_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —è–∑—ã–∫–æ–≤: {error_msg}")
        logger.error(f"Failed to get languages. Error: {error_msg}")
        return
    
    languages = languages_response["result"] or []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = "üåç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞–º–∏\n\n"
    
    # –ï—Å–ª–∏ —è–∑—ã–∫–∏ –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if languages:
        message_text += "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤:\n"
        for i, lang in enumerate(languages, 1):
            message_text += f"{i}. {lang['name_ru']} ({lang['name_foreign']})\n"
        
        message_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:"
    else:
        message_text += "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —è–∑—ã–∫–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —è–∑—ã–∫:"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = get_languages_keyboard(languages)
    
    await message.answer(message_text, reply_markup=keyboard)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    return True

@language_router.callback_query(F.data == "back_to_admin")
async def process_back_to_admin_from_languages(callback: CallbackQuery, state: FSMContext):
    """
    Process callback to return to admin menu from language management.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'back_to_admin' callback from languages menu by {full_name} ({username})")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    from app.bot.handlers.admin.admin_basic_handlers import handle_admin_mode
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é, –ø–µ—Ä–µ–¥–∞–≤–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    await handle_admin_mode(callback, state, is_callback=True)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer()

@language_router.callback_query(F.data == "back_to_languages")
async def process_back_to_languages(callback: CallbackQuery, state: FSMContext):
    """
    Handle going back to languages list from language edit screen.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'back_to_languages' callback from language edit by {full_name} ({username})")
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ —è–∑—ã–∫–æ–≤
    await handle_language_management(callback, state, is_callback=True)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer()
    
async def show_language_edit_screen(message_or_callback, language_id: str, is_callback=False):
    """
    Show language edit screen.
    
    Args:
        message_or_callback: The message or callback object from Telegram
        language_id: The ID of the language to edit
        is_callback: Whether this is called from a callback handler
    """
    if is_callback:
        message = message_or_callback.message
    else:
        message = message_or_callback
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã
    api_client = get_api_client_from_bot(message.bot)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ –∏–∑ API
    language_response = await api_client.get_language(language_id)
    
    if not language_response["success"] or not language_response["result"]:
        error_msg = language_response.get("error", "–Ø–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await message.answer(f"–û—à–∏–±–∫–∞: {error_msg}")
        logger.error(f"Failed to get language by ID {language_id}. Error: {error_msg}")
        return
    
    language = language_response["result"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —è–∑—ã–∫–µ
    word_count_response = await api_client.get_word_count_by_language(language_id)
    word_count = "N/A"  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if word_count_response["success"]:
        word_count = word_count_response["result"]["count"] if word_count_response["result"] else "0"
    else:
        logger.error(f"Failed to get word count for language {language_id}. Error: {word_count_response.get('error')}")    

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    created_at = format_date_standard(language.get('created_at', 'N/A'))
    updated_at = format_date_standard(language.get('updated_at', 'N/A'))
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ admin_keyboards.py
    keyboard = get_edit_language_keyboard(language_id)
    
    await message.answer(
        f"üîπ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞</b> üîπ\n\n"
        f"ID: {language['id']}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ (—Ä—É—Å): <b>{language['name_ru']}</b>\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ (–æ—Ä–∏–≥.): <b>{language['name_foreign']}</b>\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: <b>{word_count}</b>\n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <b>{created_at}</b>\n"
        f"–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: <b>{updated_at}</b>",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    # –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã, —É—Å—Ç–∞–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä
    # —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –∑–∞—Ö–≤–∞—Ç –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    if not is_callback:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –∫–ª–∞—Å—Å—ã –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Ñ–∞–π–ª–∞
        from app.bot.handlers.admin.admin_states import AdminStates
        from aiogram.fsm.context import FSMContext
        
        if hasattr(message, 'bot') and hasattr(message.bot, 'fsm'):
            await message.bot.fsm.set_state(message.from_user.id, AdminStates.viewing_language)

@language_router.callback_query(F.data.startswith("edit_language_"))
async def process_edit_language(callback: CallbackQuery, state: FSMContext):
    """
    Show language edit options.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —è–∑—ã–∫–∞ –∏–∑ callback_data
    language_id = callback.data.split("_")[-1]
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
    logger.info(f"'edit_language_' callback for language ID: {language_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã
    api_client = get_api_client_from_bot(callback.bot)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_response = await api_client.get_user_by_telegram_id(callback.from_user.id)
    
    if not user_response["success"]:
        error_msg = user_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {error_msg}")
        await callback.answer()
        logger.error(f"Failed to get user data during edit_language. Error: {error_msg}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
    users = user_response["result"]
    user = users[0] if users and isinstance(users, list) and len(users) > 0 else None
    
    if not user or not user.get("is_admin", False):
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —è–∑—ã–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(editing_language_id=language_id)
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await show_language_edit_screen(callback, language_id, is_callback=True)
    
    await callback.answer()

async def process_edit_language_after_update(message: Message, language_id: str):
    """
    Show language edit screen after update.
    
    Args:
        message: The message object from Telegram
        language_id: The ID of the edited language
    """
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await show_language_edit_screen(message, language_id, is_callback=False)