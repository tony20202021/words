"""
Basic admin handlers for common commands like /admin and /stats.
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from app.utils.api_utils import get_api_client_from_bot
from app.utils.logger import setup_logger
from app.bot.keyboards.admin_keyboards import get_admin_keyboard
from app.bot.handlers.admin.admin_language_handlers import cmd_manage_languages
from app.bot.handlers.admin.admin_language_handlers import handle_language_management
from app.utils.callback_constants import CallbackData

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_router = Router()

logger = setup_logger(__name__)

async def handle_admin_mode(message_or_callback, state: FSMContext, is_callback=False):
    """
    Common handler logic for admin mode activation.
    
    Args:
        message_or_callback: The message or callback object from Telegram
        state: The FSM state context
        is_callback: Whether this is called from a callback handler
    """
    if is_callback:
        user_id = message_or_callback.from_user.id
        username = message_or_callback.from_user.username
        full_name = message_or_callback.from_user.full_name
        # –î–ª—è callback –∏—Å–ø–æ–ª—å–∑—É–µ–º message –∏–∑ callback
        message = message_or_callback.message
    else:
        user_id = message_or_callback.from_user.id
        username = message_or_callback.from_user.username
        full_name = message_or_callback.from_user.first_name
        # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ message –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º message
        message = message_or_callback
    
    logger.info(f"Admin mode activation for {full_name} ({username})")
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    # –ù–æ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º—ã —Ö–æ—Ç–∏–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_data = await state.get_data()
    await state.set_state(None)
    await state.update_data(**current_data)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã
    api_client = get_api_client_from_bot(message.bot)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    logger.debug("User data: %s", user_data)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ API
    user_response = await api_client.get_user_by_telegram_id(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    if not user_response["success"]:
        error_msg = user_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {error_msg}")
        logger.error(f"Failed to get user data during admin mode activation. Error: {error_msg}")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
    users = user_response["result"]
    user = users[0] if users and isinstance(users, list) and len(users) > 0 else None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        user_data = {
            "telegram_id": user_id,
            "username": username,
            "first_name": full_name,
            "last_name": message_or_callback.from_user.last_name if not is_callback else None,
            "is_admin": False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        }
        create_response = await api_client.create_user(user_data)
        
        if not create_response["success"]:
            error_msg = create_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {error_msg}")
            logger.error(f"Failed to create user during admin mode activation. Error: {error_msg}")
            return False
            
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not user.get("is_admin", False):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return False
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ admin_keyboards.py
    keyboard = get_admin_keyboard()
    
    await message.answer(
        "‚úÖ –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞–º–∏ - —Å–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤\n"
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä, –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
        "‚¨ÖÔ∏è –í—ã—Ö–æ–¥ - –≤–æ–∑–≤—Ä–∞—Ç –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º",
        reply_markup=keyboard
    )
    
    return True

@admin_router.message(Command("admin"))
async def cmd_admin(message: Message, state: FSMContext):
    """
    Handle the /admin command which activates admin mode.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.first_name

    logger.info(f"'/admin' command from {full_name} ({username})")
    
    await handle_admin_mode(message, state)

@admin_router.callback_query(F.data == CallbackData.BACK_TO_ADMIN)
async def process_back_to_admin(callback: CallbackQuery, state: FSMContext):
    """
    Handle the 'back_to_admin' callback which returns to admin mode.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'back_to_admin' callback from {full_name} ({username})")
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    success = await handle_admin_mode(callback, state, is_callback=True)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer()

@admin_router.callback_query(F.data == CallbackData.BACK_TO_START)
async def process_back_to_main(callback: CallbackQuery, state: FSMContext):
    """
    Handle the 'back_to_start' callback which exits admin mode and returns to the main screen.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'back_to_start' callback from {full_name} ({username})")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    current_data = await state.get_data()
    important_data = {
        key: current_data[key] 
        for key in ["db_user_id", "current_language"] 
        if key in current_data
    }
    await state.clear()
    await state.update_data(**important_data)
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await callback.message.answer("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã start
    from app.bot.handlers.user.basic_handlers import handle_start_command
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é, –ø–µ—Ä–µ–¥–∞–≤–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    await handle_start_command(
        callback.message, 
        state, 
        user_id=user_id, 
        username=username, 
        full_name=full_name,
        is_callback=True
    )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer()

@admin_router.callback_query(F.data == CallbackData.ADMIN_LANGUAGES)
async def process_admin_languages(callback: CallbackQuery, state: FSMContext):
    """
    Handle the 'admin_languages' callback which redirects to language management.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'admin_languages' callback from {full_name} ({username})")
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    success = await handle_language_management(callback, state, is_callback=True)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer()

async def handle_stats(message_or_callback, state: FSMContext, is_callback=False):
    """
    Common handler logic for statistics.
    
    Args:
        message_or_callback: The message or callback object from Telegram
        state: The FSM state context
        is_callback: Whether this is called from a callback handler
    """
    if is_callback:
        user_id = message_or_callback.from_user.id
        username = message_or_callback.from_user.username
        full_name = message_or_callback.from_user.full_name
        # –î–ª—è callback –∏—Å–ø–æ–ª—å–∑—É–µ–º message –∏–∑ callback
        message = message_or_callback.message
    else:
        user_id = message_or_callback.from_user.id
        username = message_or_callback.from_user.username
        full_name = message_or_callback.from_user.full_name
        # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ message –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º message
        message = message_or_callback

    logger.info(f"Statistics requested by {full_name} ({username})")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã
    api_client = get_api_client_from_bot(message.bot)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_response = await api_client.get_user_by_telegram_id(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    if not user_response["success"]:
        error_msg = user_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {error_msg}")
        logger.error(f"Failed to get user data. Error: {error_msg}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
    users = user_response["result"]
    user = users[0] if users and isinstance(users, list) and len(users) > 0 else None
    
    if not user or not user.get("is_admin", False):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤
    languages_response = await api_client.get_languages()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    if not languages_response["success"]:
        error_msg = languages_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —è–∑—ã–∫–æ–≤: {error_msg}")
        logger.error(f"Failed to get languages. Error: {error_msg}")
        return
        
    languages = languages_response["result"] or []
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
    users_response = await api_client.get_users_count()
    print(users_response)
    
    if users_response["success"] and "count" in users_response.get("result", {}):
        total_users = users_response["result"]["count"]
    
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–ª–æ–≤–∞–º
    languages_stats = []
    
    for language in languages:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ API
        word_count_response = await api_client.get_word_count_by_language(language['id'])
        word_count = word_count_response.get("result", {}).get("count", 0) if word_count_response.get("success") else 0
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —è–∑—ã–∫–∞
        active_users_response = await api_client.get_language_active_users(language['id'])
        
        if active_users_response["success"] and "count" in active_users_response.get("result", {}):
            active_users = active_users_response["result"]["count"]
        
        languages_stats.append({
            'id': language['id'],
            'name': f"{language['name_ru']} ({language['name_foreign']})",
            'word_count': word_count,
            'active_users': active_users
        })
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞\n\n"
    stats_message += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    stats_message += f"üî§ –í—Å–µ–≥–æ —è–∑—ã–∫–æ–≤: {len(languages)}\n\n"
    stats_message += f"üåç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º:\n"
    
    for lang_stat in languages_stats:
        stats_message += f"- {lang_stat['name']}: {lang_stat['word_count']} —Å–ª–æ–≤"
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –¥–æ—Å—Ç—É–ø–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
        if lang_stat['active_users'] != "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö":
            stats_message += f", {lang_stat['active_users']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        stats_message += "\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await message.answer(stats_message)
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    await handle_admin_mode(message_or_callback, state, is_callback=is_callback)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    return True

@admin_router.message(Command("bot_stats"))
async def cmd_bot_stats(message: Message, state: FSMContext):
    """
    Handle the /bot_stats command which shows administrative statistics.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.first_name

    logger.info(f"'/bot_stats' command from {full_name} ({username})")
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await handle_stats(message, state, is_callback=False)

@admin_router.callback_query(F.data == CallbackData.ADMIN_STATS_CALLBACK)
async def process_admin_stats(callback: CallbackQuery, state: FSMContext):
    """
    Handle the 'admin_stats' callback which shows usage statistics.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'admin_stats' callback from {full_name} ({username})")
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    success = await handle_stats(callback, state, is_callback=True)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer()

@admin_router.callback_query(F.data == CallbackData.ADMIN_USERS)
async def process_admin_users(callback: CallbackQuery, state: FSMContext):
    """
    Handle the 'admin_users' callback which shows user management.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'admin_users' callback from {full_name} ({username})")
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    success = await handle_user_management(callback, state, is_callback=True)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer()


@admin_router.callback_query(F.data.startswith("users_page_"))
async def process_users_page(callback: CallbackQuery, state: FSMContext):
    """
    Handle pagination for users list.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = int(callback.data.split("_")[-1])
    
    logger.info(f"Users page {page} requested")
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
    await handle_user_management(callback, state, is_callback=True, page=page)
    
    await callback.answer()


@admin_router.callback_query(F.data.startswith("view_user_"))
async def process_view_user(callback: CallbackQuery, state: FSMContext):
    """
    Handle viewing detailed user information.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.data.split("_")[-1]
    
    logger.info(f"View user {user_id} requested")
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await show_user_details(callback, state, user_id)
    
    await callback.answer()


@admin_router.callback_query(F.data.startswith("user_stats_"))
async def process_user_stats(callback: CallbackQuery, state: FSMContext):
    """
    Handle viewing detailed user statistics.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.data.split("_")[-1]
    
    logger.info(f"User stats for {user_id} requested")
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_user_statistics(callback, state, user_id)
    
    await callback.answer()


@admin_router.callback_query(F.data.startswith("toggle_admin_"))
async def process_toggle_admin(callback: CallbackQuery, state: FSMContext):
    """
    Handle toggling admin rights for a user.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.data.split("_")[-1]
    
    logger.info(f"Toggle admin rights for {user_id} requested")
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await toggle_user_admin_rights(callback, state, user_id)
    
    await callback.answer()


@admin_router.callback_query(F.data == CallbackData.PAGE_INFO)
async def process_page_info(callback: CallbackQuery, state: FSMContext):
    """
    Handle page info button (does nothing, just answers callback).
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")


async def handle_user_management(message_or_callback, state: FSMContext, is_callback=False, page=0):
    """
    Common handler logic for user management.
    
    Args:
        message_or_callback: The message or callback object from Telegram
        state: The FSM state context
        is_callback: Whether this is called from a callback handler
        page: Page number for pagination (default: 0)
    """
    if is_callback:
        user_id = message_or_callback.from_user.id
        username = message_or_callback.from_user.username
        full_name = message_or_callback.from_user.full_name
        message = message_or_callback.message
    else:
        user_id = message_or_callback.from_user.id
        username = message_or_callback.from_user.username
        full_name = message_or_callback.from_user.full_name
        message = message_or_callback

    logger.info(f"User management requested by {full_name} ({username})")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API
    api_client = get_api_client_from_bot(message.bot)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_response = await api_client.get_user_by_telegram_id(user_id)
    
    if not user_response["success"]:
        error_msg = user_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {error_msg}")
        logger.error(f"Failed to get user data. Error: {error_msg}")
        return
    
    users = user_response["result"]
    user = users[0] if users and isinstance(users, list) and len(users) > 0 else None
    
    if not user or not user.get("is_admin", False):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_users_response = await api_client.get_users(skip=0, limit=1000)  # –ü–æ–ª—É—á–∞–µ–º –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    if not all_users_response["success"]:
        error_msg = all_users_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {error_msg}")
        logger.error(f"Failed to get users list. Error: {error_msg}")
        return
    
    all_users = all_users_response["result"] or []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"
    
    if all_users:
        total_users = len(all_users)
        admins_count = sum(1 for u in all_users if u.get("is_admin", False))
        
        message_text += f"üìà –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        message_text += f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admins_count}\n"
        message_text += f"üë§ –û–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users - admins_count}\n\n"
        message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        from app.bot.keyboards.admin_keyboards import get_users_keyboard
        keyboard = get_users_keyboard(all_users, page=page)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ callback
        if is_callback:
            try:
                await message.edit_text(message_text, reply_markup=keyboard)
            except Exception as e:
                logger.error(f"Error editing message: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await message.answer(message_text, reply_markup=keyboard)
        else:
            await message.answer(message_text, reply_markup=keyboard)
    else:
        message_text += "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        await message.answer(message_text)
    
    return True

async def show_user_details(callback: CallbackQuery, state: FSMContext, user_id: str):
    """
    Show detailed information about a specific user.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
        user_id: ID of the user to show details for
    """
    api_client = get_api_client_from_bot(callback.bot)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_response = await api_client.get_users(skip=0, limit=1000)
    
    if not user_response["success"]:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    all_users = user_response["result"] or []
    user = None
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for u in all_users:
        if u.get('_id') == user_id or u.get('id') == user_id:
            user = u
            break
    
    if not user:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    languages_response = await api_client.get_languages()
    languages = languages_response["result"] if languages_response["success"] else []
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —è–∑—ã–∫–∞–º
    language_stats = []
    
    for language in languages:
        lang_id = language.get('_id', language.get('id'))
        progress_response = await api_client.get_user_progress(user_id, lang_id)
        
        if progress_response["success"] and progress_response["result"]:
            progress = progress_response["result"]
            words_studied = progress.get('words_studied', 0)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —è–∑—ã–∫–∏, –≥–¥–µ –µ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∏–∑—É—á–µ–Ω–æ > 0 —Å–ª–æ–≤)
            if words_studied > 0:
                language_stats.append({
                    'name': f"{language['name_ru']} ({language['name_foreign']})",
                    'words_studied': words_studied,
                    'words_known': progress.get('words_known', 0),
                    'total_words': progress.get('total_words', 0),
                    'progress_percentage': progress.get('progress_percentage', 0)
                })
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
    user_info += f"ID: <code>{user_id}</code>\n"
    user_info += f"Telegram ID: <code>{user.get('telegram_id', 'N/A')}</code>\n"
    user_info += f"–ò–º—è: <b>{user.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</b>\n"
    
    if user.get('last_name'):
        user_info += f"–§–∞–º–∏–ª–∏—è: <b>{user.get('last_name')}</b>\n"
    
    if user.get('username'):
        user_info += f"Username: <b>@{user.get('username')}</b>\n"
    
    user_info += f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <b>{'–î–∞' if user.get('is_admin', False) else '–ù–µ—Ç'}</b>\n"
    
    # –î–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if user.get('created_at'):
        from app.utils.formatting_utils import format_date_standard
        created_date = format_date_standard(user.get('created_at'))
        user_info += f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <b>{created_date}</b>\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º - –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑—É—á–µ–Ω–Ω—ã–µ —è–∑—ã–∫–∏
    if language_stats:
        user_info += f"\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑—É—á–µ–Ω–∏—è:</b>\n"
        for stat in language_stats:
            user_info += f"\n‚Ä¢ {stat['name']}:\n"
            user_info += f"  –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {stat['words_studied']}\n"  
            user_info += f"  –ò–∑–≤–µ—Å—Ç–Ω–æ —Å–ª–æ–≤: {stat['words_known']}\n"
            user_info += f"  –í—Å–µ–≥–æ —Å–ª–æ–≤: {stat['total_words']}\n"
            user_info += f"  –ü—Ä–æ–≥—Ä–µ—Å—Å: {stat['progress_percentage']:.1f}%\n"
    else:
        user_info += f"\nüìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –∏–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    from app.bot.keyboards.admin_keyboards import get_user_detail_keyboard
    keyboard = get_user_detail_keyboard(user_id)
    
    await callback.message.edit_text(
        user_info,
        parse_mode="HTML",
        reply_markup=keyboard
    )

async def show_user_statistics(callback: CallbackQuery, state: FSMContext, user_id: str):
    """
    Show detailed statistics for a specific user.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
        user_id: ID of the user to show statistics for
    """
    api_client = get_api_client_from_bot(callback.bot)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏
    user_response = await api_client.get_users(skip=0, limit=1000)
    user = None
    
    if user_response["success"]:
        all_users = user_response["result"] or []
        for u in all_users:
            if u.get('_id') == user_id or u.get('id') == user_id:
                user = u
                break
    
    user_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if user:
        user_name = user.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        if user.get('username'):
            user_name += f" (@{user.get('username')})"
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    languages_response = await api_client.get_languages()
    languages = languages_response["result"] if languages_response["success"] else []
    
    stats_text = f"üìà <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
    stats_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user_name}</b>\n\n"
    
    total_studied = 0
    total_known = 0
    total_available = 0
    
    for language in languages:
        lang_id = language.get('_id', language.get('id'))
        progress_response = await api_client.get_user_progress(user_id, lang_id)
        
        if progress_response["success"] and progress_response["result"]:
            progress = progress_response["result"]
            
            words_studied = progress.get('words_studied', 0)
            words_known = progress.get('words_known', 0)
            total_words = progress.get('total_words', 0)
            progress_percentage = progress.get('progress_percentage', 0)
            
            if words_studied > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —è–∑—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑—É—á–∞–ª–∏—Å—å
                stats_text += f"üåç <b>{language['name_ru']} ({language['name_foreign']})</b>\n"
                stats_text += f"  üìö –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {words_studied}\n"
                stats_text += f"  ‚úÖ –ò–∑–≤–µ—Å—Ç–Ω–æ —Å–ª–æ–≤: {words_known}\n"
                stats_text += f"  üìñ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {total_words}\n"
                stats_text += f"  üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percentage:.1f}%\n\n"
                
                total_studied += words_studied
                total_known += words_known
                total_available += total_words
    
    if total_studied > 0:
        overall_progress = (total_studied / total_available * 100) if total_available > 0 else 0
        stats_text += f"üéØ <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        stats_text += f"  üìö –í—Å–µ–≥–æ –∏–∑—É—á–µ–Ω–æ: {total_studied}\n"
        stats_text += f"  ‚úÖ –í—Å–µ–≥–æ –∏–∑–≤–µ—Å—Ç–Ω–æ: {total_known}\n"
        stats_text += f"  üìñ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {total_available}\n"
        stats_text += f"  üìä –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {overall_progress:.1f}%\n"
    else:
        stats_text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –∏–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤."
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"view_user_{user_id}")]
    ])
    
    await callback.message.edit_text(
        stats_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )


async def toggle_user_admin_rights(callback: CallbackQuery, state: FSMContext, user_id: str):
    """
    Toggle admin rights for a specific user.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
        user_id: ID of the user to toggle admin rights for
    """
    api_client = get_api_client_from_bot(callback.bot)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_response = await api_client.get_users(skip=0, limit=1000)
    user = None
    
    if user_response["success"]:
        all_users = user_response["result"] or []
        for u in all_users:
            if u.get('_id') == user_id or u.get('id') == user_id:
                user = u
                break
    
    if not user:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    current_admin_status = user.get('is_admin', False)
    new_admin_status = not current_admin_status
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_data = {"is_admin": new_admin_status}
    update_response = await api_client.update_user(user_id, update_data)
    
    if not update_response["success"]:
        error_msg = update_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤: {error_msg}")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    user_name = user.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    if user.get('username'):
        user_name += f" (@{user.get('username')})"
    
    action = "–ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞" if new_admin_status else "–ª–∏—à–µ–Ω –ø—Ä–∞–≤"
    status_text = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" if new_admin_status else "–æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
    
    success_message = f"‚úÖ {user_name} {action} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è {status_text}."
    
    await callback.message.answer(success_message)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_user_details(callback, state, user_id)

@admin_router.message(Command("users"))
async def cmd_manage_users(message: Message, state: FSMContext):
    """
    Handle the /users command which shows user management.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.first_name

    logger.info(f"'/users' command from {full_name} ({username})")
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await handle_user_management(message, state)