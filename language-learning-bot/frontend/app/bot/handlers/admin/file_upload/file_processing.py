"""
Handlers for file upload processing.
Updated with FSM states for better navigation control.
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.utils.api_utils import get_api_client_from_bot
from app.utils.logger import setup_logger
from app.bot.states.centralized_states import AdminStates
from app.utils.callback_constants import CallbackData
from app.bot.keyboards.admin_keyboards import get_upload_settings_keyboard

logger = setup_logger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
file_router = Router()

# TODO –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —ç—Ç–æ–º—É —è–∑—ã–∫—É
# —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é clien API
# –∏ –¥–æ–±–∞–≤–∏—Ç—å  –≤—ã–∑–æ–≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —è–∑—ã–∫—É) - –≤ –∞–¥–º–∏–Ω/—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–º
# —Å–¥–µ–ª–∞—Ç—å –Ω—É–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ client API, backend

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_COLUMN_NUMBER = 0
DEFAULT_COLUMN_WORD = 1
DEFAULT_COLUMN_TRANSCRIPTION = 2
DEFAULT_COLUMN_TRANSLATION = 3

@file_router.message(Command("upload"))
async def cmd_upload(message: Message, state: FSMContext):
    """
    Handle the /upload command which starts file upload process.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    logger.info(f"'/upload' command from {full_name} ({username})")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã
    api_client = get_api_client_from_bot(message.bot)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_response = await api_client.get_user_by_telegram_id(user_id)
    
    if not user_response["success"]:
        error_msg = user_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {error_msg}")
        logger.error(f"Failed to get user data during /upload command. Error: {error_msg}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
    users = user_response["result"]
    user = users[0] if users and isinstance(users, list) and len(users) > 0 else None
    
    if not user or not user.get("is_admin", False):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –∏–∑ API
    languages_response = await api_client.get_languages()
    
    if not languages_response["success"]:
        error_msg = languages_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —è–∑—ã–∫–æ–≤: {error_msg}")
        logger.error(f"Failed to get languages during /upload command. Error: {error_msg}")
        return
    
    languages = languages_response["result"] or []
    
    if not languages or len(languages) == 0:
        await message.answer(
            "üì§ –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —è–∑—ã–∫ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /managelang"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    
    for language in languages:
        builder.add(InlineKeyboardButton(
            text=f"{language['name_ru']} ({language['name_foreign']})",
            callback_data=f"upload_to_lang_{language['id']}"
        ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ø–æ 1 –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥)
    builder.adjust(1)
    
    await message.answer(
        "üì§ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤:",
        reply_markup=builder.as_markup()
    )

@file_router.message(AdminStates.waiting_file)
async def process_file_upload(message: Message, state: FSMContext):
    """
    Process file upload from admin.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if not message.document:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx)"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    file_name = message.document.file_name
    if not file_name.endswith('.xlsx'):
        await message.answer(
            "‚ùå –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å .xlsx"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    language_id = user_data.get('selected_language_id')
    
    if not language_id:
        await message.answer("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω —è–∑—ã–∫. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /upload")
        await state.clear()
        return
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    try:
        file = await message.bot.get_file(message.document.file_id)
        file_data = await message.bot.download_file(file.file_path)
    except Exception as e:
        logger.error(f"Error downloading file: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(file_data=file_data, file_name=file_name)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await state.update_data(
        has_headers=False, 
        clear_existing=False,
        column_number=DEFAULT_COLUMN_NUMBER,
        column_word=DEFAULT_COLUMN_WORD,
        column_transcription=DEFAULT_COLUMN_TRANSCRIPTION,
        column_translation=DEFAULT_COLUMN_TRANSLATION
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
    await state.set_state(AdminStates.configuring_upload_settings)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    builder = get_upload_settings_keyboard(
        language_id,
        column_number=DEFAULT_COLUMN_NUMBER,
        column_word=DEFAULT_COLUMN_WORD,
        column_transcription=DEFAULT_COLUMN_TRANSCRIPTION,
        column_translation=DEFAULT_COLUMN_TRANSLATION
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫
    column_settings = (
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫:\n"
        f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ number: {DEFAULT_COLUMN_NUMBER}\n"
        f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ word: {DEFAULT_COLUMN_WORD}\n"
        f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ transcription: {DEFAULT_COLUMN_TRANSCRIPTION}\n"
        f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ translation: {DEFAULT_COLUMN_TRANSLATION}\n"
    )
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:\n\n"
        '‚úÖ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏: "–ù–µ—Ç"\n'
        '‚úÖ –û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ–≤–∞: "–ù–µ—Ç"\n\n'
        f"{column_settings}\n"
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
        reply_markup=builder
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
@file_router.callback_query(AdminStates.configuring_upload_settings, F.data == CallbackData.CONFIRM_UPLOAD)
async def process_upload_confirmation_from_settings(callback: CallbackQuery, state: FSMContext):
    """
    Process upload confirmation from upload settings state.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    logger.info("Upload confirmation from settings state")
    
    # ‚úÖ –ù–û–í–û–ï: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    await state.set_state(AdminStates.confirming_file_upload)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    from app.bot.handlers.admin.file_upload.column_configuration import process_upload_confirmation
    await process_upload_confirmation(callback, state)

# ‚úÖ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω–∫—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
@file_router.callback_query(AdminStates.configuring_upload_settings, F.data == CallbackData.BACK_TO_ADMIN)
@file_router.callback_query(AdminStates.waiting_file, F.data == CallbackData.BACK_TO_ADMIN)
async def process_back_to_admin_from_upload(callback: CallbackQuery, state: FSMContext):
    """
    Handle going back to admin menu from file upload process.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    logger.info("Back to admin from file upload process")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    await state.clear()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    from app.bot.handlers.admin.admin_basic_handlers import handle_admin_mode
    await handle_admin_mode(callback, state, is_callback=True)
    
    await callback.answer()
    