"""
Handlers for column type selection and processing.
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.utils.logger import setup_logger
from app.bot.states.centralized_states import AdminStates
from app.utils.callback_constants import CallbackData

logger = setup_logger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–ª–æ–Ω–∫–∏
column_type_router = Router()

@column_type_router.callback_query(AdminStates.configuring_columns, F.data.startswith(CallbackData.SELECT_COLUMN_TYPE))
async def process_select_column_type(callback: CallbackQuery, state: FSMContext):
    """
    Process column type selection.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —è–∑—ã–∫–∞ –∏–∑ callback_data
    language_id = callback.data.split(":")[-1]
    logger.info(f"Column type selection for language ID: {language_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
    user_data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –±–∏–ª–¥–µ—Ä –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–ª–æ–Ω–∫–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    column_types = [
        ("number", "–ö–æ–ª–æ–Ω–∫–∞ –Ω–æ–º–µ—Ä–∞", "select_number"),
        ("word", "–ö–æ–ª–æ–Ω–∫–∞ —Å–ª–æ–≤–∞", "select_word"),
        ("transcription", "–ö–æ–ª–æ–Ω–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏", "select_transcription"),
        ("translation", "–ö–æ–ª–æ–Ω–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞", "select_translation"),
    ]
    
    for col_type, display_name, callback_data in column_types:
        current_value = user_data.get(f"column_{col_type}")
        value_text = f" (—Å–µ–π—á–∞—Å: {current_value})" if current_value is not None else ""
        builder.add(InlineKeyboardButton(
            text=f"üìä {display_name}{value_text}",
            callback_data=callback_data
        ))
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.add(InlineKeyboardButton(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å",
        callback_data="confirm_upload"
    ))
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
        callback_data="back_to_settings"
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ø–æ 1 –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥)
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–ª–æ–Ω–∫–∏ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤–≤–µ—Å—Ç–∏ –µ—ë –Ω–æ–º–µ—Ä\n"
        "(–Ω—É–º–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0)",
        reply_markup=builder.as_markup()
    )
    
    await callback.answer()

@column_type_router.callback_query(AdminStates.configuring_columns, F.data.startswith("select_"))
async def process_column_type_selection(callback: CallbackQuery, state: FSMContext):
    """
    Process column type selection and prompt for column index.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ callback_data
    column_type = callback.data.split("_")[-1]
    logger.info(f"Selected column type: {column_type}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    user_data = await state.get_data()
    current_value = user_data.get(f"column_{column_type}")
    current_info = f" (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value})" if current_value is not None else ""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        selected_column_type=column_type,
        column_settings_message_id=callback.message.message_id,
        column_settings_chat_id=callback.message.chat.id
    )
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–æ–ª–æ–Ω–∫–∏
    await state.set_state(AdminStates.input_column_number)
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–æ–ª–æ–Ω–∫–∏
    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è {column_type}{current_info} (–Ω–∞—á–∏–Ω–∞—è —Å 0):"
    )
    
    await callback.answer()

@column_type_router.message(AdminStates.input_column_number)
async def process_column_number_input(message: Message, state: FSMContext):
    """
    Process column number input.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    column_type = user_data.get('selected_column_type')
    message_id = user_data.get('column_settings_message_id')
    
    if not column_type:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏
    try:
        column_index = int(message.text)
        if column_index < 0:
            raise ValueError("–ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 0")
    except ValueError:
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
        error_message = await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ (—Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)"
        )
        # –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        await error_message.delete_delayed(delay=5)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    column_key = f"column_{column_type}"
    await state.update_data({column_key: column_index})
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
    await state.set_state(AdminStates.configuring_columns)
    
    # –°–æ–∑–¥–∞–µ–º –±–∏–ª–¥–µ—Ä –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–ª–æ–Ω–∫–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    column_types = [
        ("number", "–ö–æ–ª–æ–Ω–∫–∞ –Ω–æ–º–µ—Ä–∞", "select_number"),
        ("word", "–ö–æ–ª–æ–Ω–∫–∞ —Å–ª–æ–≤–∞", "select_word"),
        ("transcription", "–ö–æ–ª–æ–Ω–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏", "select_transcription"),
        ("translation", "–ö–æ–ª–æ–Ω–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞", "select_translation"),
    ]
    
    for col_type, display_name, callback_data in column_types:
        current_value = user_data.get(f"column_{col_type}")
        value_text = f" (—Å–µ–π—á–∞—Å: {current_value})" if current_value is not None else ""
        builder.add(InlineKeyboardButton(
            text=f"üìä {display_name}{value_text}",
            callback_data=callback_data
        ))
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.add(InlineKeyboardButton(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å",
        callback_data="confirm_upload"
    ))
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
        callback_data="back_to_settings"
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ø–æ 1 –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥)
    builder.adjust(1)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
    current_settings = []
    for col_type, display_name, _ in column_types:
        col_key = f"column_{col_type}"
        col_value = user_data.get(col_key)
        if col_value is not None:
            current_settings.append(f"‚úÖ {display_name}: {col_value}")
    
    settings_text = "\n".join(current_settings) if current_settings else "–ö–æ–ª–æ–Ω–∫–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=message_id,
            text=f"üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n\n"
                f"‚úÖ {column_key.replace('column_', '–ö–æ–ª–æ–Ω–∫–∞ ')} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {column_index}\n\n"
                f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫:\n{settings_text}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É:",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"Error updating message: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            f"üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n\n"
            f"‚úÖ {column_key.replace('column_', '–ö–æ–ª–æ–Ω–∫–∞ ')} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {column_index}\n\n"
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫:\n{settings_text}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É:",
            reply_markup=builder.as_markup()
        )
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
    try:
        await message.delete()
    except Exception as e:
        logger.error(f"Error deleting message: {e}")