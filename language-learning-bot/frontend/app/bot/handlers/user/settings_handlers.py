"""
Settings handlers for Language Learning Bot.
UPDATED: Support for individual hint settings management.
FIXED: Removed code duplication, improved architecture, separated concerns.
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.utils.api_utils import get_api_client_from_bot
from app.utils.logger import setup_logger
from app.utils.error_utils import handle_api_error, validate_state_data, safe_api_call
from app.utils.settings_utils import (
    get_user_language_settings, 
    save_user_language_settings,
    display_language_settings
)
from app.utils.hint_settings_utils import (
    toggle_individual_hint_setting,
    bulk_update_hint_settings
)
from app.utils.callback_constants import (
    CallbackData,
    is_hint_setting_callback,
    get_hint_setting_from_callback
)
from app.utils.hint_constants import get_hint_setting_name
from app.bot.states.centralized_states import SettingsStates

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings_router = Router()

logger = setup_logger(__name__)

# –ù–û–í–û–ï: –í—ã–Ω–µ—Å–µ–Ω–Ω–∞—è –æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def _ensure_user_exists(message_or_callback, api_client) -> str:
    """
    Ensure user exists in database and return user ID.
    –ù–û–í–û–ï: –í—ã–Ω–µ—Å–µ–Ω–∞ –æ–±—â–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        message_or_callback: Message or CallbackQuery object
        api_client: API client instance
        
    Returns:
        str: Database user ID or None if failed
    """
    # Extract user info regardless of message type
    if hasattr(message_or_callback, 'from_user'):
        user = message_or_callback.from_user
    else:
        user = message_or_callback.message.from_user
    
    user_id = user.id
    username = user.username
    
    # Try to get existing user
    success, users = await safe_api_call(
        lambda: api_client.get_user_by_telegram_id(user_id),
        message_or_callback,
        "–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    
    if not success:
        return None
    
    # Check if user exists
    existing_user = users[0] if users and len(users) > 0 else None
    
    if existing_user:
        return existing_user.get("id")
    
    # Create new user if doesn't exist
    new_user_data = {
        "telegram_id": user_id,
        "username": username,
        "first_name": user.first_name,
        "last_name": user.last_name
    }
    
    success, created_user = await safe_api_call(
        lambda: api_client.create_user(new_user_data),
        message_or_callback,
        "—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    
    return created_user.get("id") if success and created_user else None

async def _validate_language_selected(state: FSMContext, message_or_callback) -> bool:
    """
    Validate that user has selected a language.
    –ù–û–í–û–ï: –í—ã–Ω–µ—Å–µ–Ω–∞ –æ–±—â–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞.
    
    Args:
        state: FSM context
        message_or_callback: Message or CallbackQuery object
        
    Returns:
        bool: True if language is selected
    """
    state_data = await state.get_data()
    current_language = state_data.get("current_language")
    
    if not current_language or not current_language.get("id"):
        error_message = (
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /language\n\n"
            "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è."
        )
        
        if isinstance(message_or_callback, CallbackQuery):
            await message_or_callback.answer("–Ø–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω", show_alert=True)
            await message_or_callback.message.answer(error_message)
        else:
            await message_or_callback.answer(error_message)
        
        return False
    
    return True

@settings_router.message(Command("settings"))
async def cmd_settings(message: Message, state: FSMContext):
    """
    Handle the /settings command which shows and allows changing learning settings.
    UPDATED: Simplified using common utilities, better error handling.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    logger.info(f"'/settings' command from {full_name} ({username})")

    # Get API client
    api_client = get_api_client_from_bot(message.bot)
    if not api_client:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # Ensure user exists
    db_user_id = await _ensure_user_exists(message, api_client)
    if not db_user_id:
        return  # Error already handled in _ensure_user_exists

    # Update state with user ID
    await state.update_data(db_user_id=db_user_id)

    # Validate language selection
    if not await _validate_language_selected(state, message):
        return
    
    # Set state for settings viewing
    await state.set_state(SettingsStates.viewing_settings)
    
    # Display current settings with individual hint settings
    await display_language_settings(
        message_or_callback=message,
        state=state,
        prefix="",
        suffix="\n\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É.",
        is_callback=False
    )

# –û–ë–ù–û–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫
@settings_router.callback_query(lambda c: is_hint_setting_callback(c.data))
async def process_hint_setting_toggle(callback: CallbackQuery, state: FSMContext):
    """
    Process callback to toggle individual hint setting.
    –û–ë–ù–û–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    full_name = callback.from_user.full_name
    username = callback.from_user.username

    # Get setting key from callback data
    setting_key = get_hint_setting_from_callback(callback.data)
    if not setting_key:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏")
        logger.warning(f"Unknown hint setting callback: {callback.data}")
        return
    
    setting_name = get_hint_setting_name(setting_key)
    logger.info(f"'{callback.data}' callback from {full_name} ({username}) - toggling {setting_name}")
    
    # Validate language selection
    if not await _validate_language_selected(state, callback):
        return
    
    # Toggle the setting using centralized utility
    success, new_value = await toggle_individual_hint_setting(
        message_or_callback=callback,
        state=state,
        setting_key=setting_key
    )
    
    if success:
        status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_value else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
        await callback.answer(f"‚úÖ {setting_name}: {status_text}")
        
        # Refresh settings display
        await display_language_settings(
            message_or_callback=callback,
            state=state,
            prefix=f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ¬´{setting_name}¬ª {status_text}!\n\n",
            suffix="\n\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É.",
            is_callback=True
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

# –û–ë–ù–û–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –æ–±—â–∏–º–∏ —É—Ç–∏–ª–∏—Ç–∞–º–∏
@settings_router.callback_query(F.data == CallbackData.SETTINGS_START_WORD)
async def process_settings_start_word(callback: CallbackQuery, state: FSMContext):
    """
    Handle start word setting change.
    –û–ë–ù–û–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫.
    """
    logger.info(f"Start word setting from {callback.from_user.full_name}")
    
    # Validate language selection
    if not await _validate_language_selected(state, callback):
        return
    
    await state.set_state(SettingsStates.waiting_start_word)
    
    await callback.message.answer(
        "üî¢ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>1</code> - –Ω–∞—á–∞—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>100</code> - –Ω–∞—á–∞—Ç—å —Å–æ 100-–≥–æ —Å–ª–æ–≤–∞\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode="HTML"
    )
    
    await callback.answer()

@settings_router.message(SettingsStates.waiting_start_word)
async def process_start_word_input(message: Message, state: FSMContext):
    """
    Process start word input from user.
    –û–ë–ù–û–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        start_word = int(message.text.strip())
        
        # Validate input range
        if start_word < 1:
            await message.answer("‚ùå –ù–æ–º–µ—Ä —Å–ª–æ–≤–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        if start_word > 50000:  # Increased reasonable limit
            await message.answer("‚ùå –ù–æ–º–µ—Ä —Å–ª–æ–≤–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º: 50000. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # Get and update settings
        success = await _update_setting(message, state, "start_word", start_word)
        
        if success:
            await message.answer(
                f"‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: <b>{start_word}</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –∏–∑—É—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞.",
                parse_mode="HTML"
            )
            
            # Return to settings view
            await state.set_state(SettingsStates.viewing_settings)
            
            # Show updated settings
            await display_language_settings(
                message_or_callback=message,
                state=state,
                prefix="‚öôÔ∏è <b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è</b>\n\n",
                is_callback=False
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞ (—á–∏—Å–ª–æ).\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>1</code> –∏–ª–∏ <code>100</code>",
            parse_mode="HTML"
        )

# –ù–û–í–û–ï: –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def _update_setting(message_or_callback, state: FSMContext, setting_key: str, new_value) -> bool:
    """
    Update a single setting value.
    –ù–û–í–û–ï: –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª—é–±–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
    
    Args:
        message_or_callback: Message or CallbackQuery object
        state: FSM context
        setting_key: Setting key to update
        new_value: New value for the setting
        
    Returns:
        bool: True if successful
    """
    try:
        # Get current settings
        current_settings = await get_user_language_settings(message_or_callback, state)
        current_settings[setting_key] = new_value
        
        # Save updated settings
        return await save_user_language_settings(message_or_callback, state, current_settings)
        
    except Exception as e:
        logger.error(f"Error updating setting {setting_key}: {e}")
        return False

# –û–ë–ù–û–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ toggle —Å –æ–±—â–µ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
@settings_router.callback_query(F.data == CallbackData.SETTINGS_TOGGLE_SKIP_MARKED)
async def process_toggle_skip_marked(callback: CallbackQuery, state: FSMContext):
    """Handle skip marked words toggle."""
    await _handle_boolean_toggle(
        callback, state, "skip_marked", 
        true_text="–ø—Ä–æ–ø—É—Å–∫–∞—Ç—å", false_text="–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å",
        setting_name="–ü–æ–º–µ—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞"
    )

@settings_router.callback_query(F.data == CallbackData.SETTINGS_TOGGLE_CHECK_DATE)
async def process_toggle_check_date(callback: CallbackQuery, state: FSMContext):
    """Handle check date toggle."""
    await _handle_boolean_toggle(
        callback, state, "use_check_date", 
        true_text="—É—á–∏—Ç—ã–≤–∞—Ç—å", false_text="–Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å",
        setting_name="–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"
    )

@settings_router.callback_query(F.data == CallbackData.SETTINGS_TOGGLE_SHOW_DEBUG)
async def process_toggle_show_debug(callback: CallbackQuery, state: FSMContext):
    """Handle debug info toggle."""
    await _handle_boolean_toggle(
        callback, state, "show_debug", 
        true_text="–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å", false_text="—Å–∫—Ä—ã–≤–∞—Ç—å",
        setting_name="–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    )

# –ù–û–í–û–ï: –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ boolean toggle
async def _handle_boolean_toggle(
    callback: CallbackQuery, 
    state: FSMContext, 
    setting_key: str, 
    true_text: str, 
    false_text: str, 
    setting_name: str
):
    """
    Handle boolean setting toggle.
    –ù–û–í–û–ï: –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö boolean –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    
    Args:
        callback: The callback query
        state: FSM context
        setting_key: Setting key to toggle
        true_text: Text to show when value is True
        false_text: Text to show when value is False
        setting_name: Human-readable setting name
    """
    logger.info(f"Toggle {setting_key} from {callback.from_user.full_name}")
    
    # Validate language selection
    if not await _validate_language_selected(state, callback):
        return
    
    # Get current settings
    try:
        current_settings = await get_user_language_settings(callback, state)
        current_value = current_settings.get(setting_key, False)
        new_value = not current_value
        
        # Update settings
        success = await _update_setting(callback, state, setting_key, new_value)
        
        if success:
            status_text = true_text if new_value else false_text
            await callback.answer(f"‚úÖ {setting_name}: {status_text}")
            
            # Refresh display
            await display_language_settings(
                message_or_callback=callback,
                state=state,
                prefix="‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è</b>\n\n",
                is_callback=True
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            
    except Exception as e:
        logger.error(f"Error toggling {setting_key}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

# –û–ë–ù–û–í–õ–ï–ù–û: Bulk operations –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫
@settings_router.callback_query(F.data == "enable_all_hints")
async def process_enable_all_hints(callback: CallbackQuery, state: FSMContext):
    """Handle enable all hints action."""
    await _handle_bulk_hints_action(callback, state, enable_all=True)

@settings_router.callback_query(F.data == "disable_all_hints")
async def process_disable_all_hints(callback: CallbackQuery, state: FSMContext):
    """Handle disable all hints action."""
    await _handle_bulk_hints_action(callback, state, enable_all=False)

# –ù–û–í–û–ï: –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è bulk –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
async def _handle_bulk_hints_action(callback: CallbackQuery, state: FSMContext, enable_all: bool):
    """
    Handle bulk hint settings action.
    –ù–û–í–û–ï: –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫.
    
    Args:
        callback: The callback query
        state: FSM context
        enable_all: True to enable all hints, False to disable all
    """
    action_text = "–≤–∫–ª—é—á–∏—Ç—å" if enable_all else "–æ—Ç–∫–ª—é—á–∏—Ç—å"
    logger.info(f"{action_text.capitalize()} all hints from {callback.from_user.full_name}")
    
    # Validate language selection
    if not await _validate_language_selected(state, callback):
        return
    
    success = await bulk_update_hint_settings(callback, state, enable_all=enable_all)
    
    if success:
        result_text = "–≤–∫–ª—é—á–µ–Ω—ã" if enable_all else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await callback.answer(f"‚úÖ –í—Å–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ {result_text}")
        
        # Refresh display
        await display_language_settings(
            message_or_callback=callback,
            state=state,
            prefix="‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è</b>\n\n",
            is_callback=True
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")

# Quick start word options - –û–ë–ù–û–í–õ–ï–ù–û —Å –æ–±—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
@settings_router.callback_query(F.data.startswith("quick_start_word_"))
async def process_quick_start_word(callback: CallbackQuery, state: FSMContext):
    """
    Handle quick start word selection.
    –û–ë–ù–û–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫.
    """
    try:
        # Extract word number from callback data
        word_num_str = callback.data.replace("quick_start_word_", "")
        start_word = int(word_num_str)
        
        logger.info(f"Quick start word {start_word} from {callback.from_user.full_name}")
        
        # Validate language selection
        if not await _validate_language_selected(state, callback):
            return
        
        # Update setting
        success = await _update_setting(callback, state, "start_word", start_word)
        
        if success:
            await callback.answer(f"‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ: {start_word}")
            
            # Return to settings view
            await state.set_state(SettingsStates.viewing_settings)
            
            # Show updated settings
            await display_language_settings(
                message_or_callback=callback,
                state=state,
                prefix="‚öôÔ∏è <b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è</b>\n\n",
                is_callback=True
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            
    except (ValueError, IndexError) as e:
        logger.error(f"Error processing quick start word: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞")

# Cancel handlers - moved to cancel_handlers.py, these are just for invalid input
@settings_router.message(SettingsStates.waiting_start_word)
async def handle_invalid_start_word(message: Message, state: FSMContext):
    """
    Handle invalid input during start word setting.
    –û–ë–ù–û–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50000).\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞:\n"
        "‚Ä¢ <code>1</code> - –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "‚Ä¢ <code>50</code> - –ø—è—Ç–∏–¥–µ—Å—è—Ç–æ–µ —Å–ª–æ–≤–æ\n"
        "‚Ä¢ <code>100</code> - —Å–æ—Ç–æ–µ —Å–ª–æ–≤–æ\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode="HTML"
    )

# Export router
__all__ = ['settings_router']
