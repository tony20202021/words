"""
Statistics command handlers for Language Learning Bot.
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.utils.api_utils import get_api_client_from_bot
from app.utils.logger import setup_logger

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
stats_router = Router()

# Set up logging
logger = setup_logger(__name__)

@stats_router.message(Command("stats"))
async def cmd_stats(message: Message, state: FSMContext):
    """
    Handle the /stats command which shows user statistics.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_data = await state.get_data()
    await state.set_state(None)
    await state.update_data(**current_data)
    
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    logger.info(f"'/stats' command from {full_name} ({username})")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã
    api_client = get_api_client_from_bot(message.bot)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    logger.debug("User data: %s", user_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_response = await api_client.get_user_by_telegram_id(user_id)
    
    if not user_response["success"]:
        logger.error(f"Failed to get user with Telegram ID {user_id}: {user_response['error']}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
        
    users = user_response["result"]
    user = users[0] if users and len(users) > 0 else None
    
    db_user_id = None
    if not user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        new_user_data = {
            "telegram_id": user_id,
            "username": username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name
        }
        create_response = await api_client.create_user(new_user_data)
        if not create_response["success"]:
            logger.error(f"Failed to create user with Telegram ID {user_id}: {create_response['error']}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        db_user_id = create_response["result"].get("id") if create_response["result"] else None
    else:
        db_user_id = user.get("id")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –∏–∑ API
    languages_response = await api_client.get_languages()
    
    if not languages_response["success"]:
        logger.error(f"Failed to get languages: {languages_response['error']}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —è–∑—ã–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
        
    languages = languages_response["result"] or []
    
    if not languages:
        await message.answer(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —è–∑—ã–∫–∞–º
    user_progress_by_language = []
    languages_without_progress = []
    
    for language in languages:
        language_id = language.get("id")
        language_name_ru = language.get("name_ru")
        language_name_foreign = language.get("name_foreign")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —è–∑—ã–∫–µ
        word_count_response = await api_client.get_word_count_by_language(language_id)
        total_words = word_count_response.get("result", {}).get("count", 0) if word_count_response.get("success") else 0
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–ª–æ–≤ –≤ —è–∑—ã–∫–µ
        language["total_words"] = total_words
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞
        try:
            progress_response = await api_client.get_user_progress(db_user_id, language_id)
            
            if progress_response["success"] and progress_response["result"]:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∏–∑—É—á–µ–Ω–æ —Å–ª–æ–≤ –±–æ–ª—å—à–µ 0
                progress = progress_response["result"]
                if progress.get("words_studied", 0) > 0:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–ª–æ–≤ –≤ —è–∑—ã–∫–µ
                    progress["total_words"] = total_words
                    user_progress_by_language.append(progress)
                else:
                    languages_without_progress.append(language)
            else:
                languages_without_progress.append(language)
        except Exception as e:
            logger.error(f"Error getting progress for language {language_id}: {e}")
            languages_without_progress.append(language)
    
    if not user_progress_by_language and not languages_without_progress:
        await message.answer(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏–∑—É—á–µ–Ω–∏—é —è–∑—ã–∫–æ–≤.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Å –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /language"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–∑—É—á–µ–Ω–∏—é —è–∑—ã–∫–æ–≤\n\n"
    
    if user_progress_by_language:
        for progress in user_progress_by_language:
            lang_name = progress.get("language_name_ru")
            lang_name_foreign = progress.get("language_name_foreign")
            total_words = progress.get("total_words", 0)
            words_studied = progress.get("words_studied", 0)
            words_known = progress.get("words_known", 0)
            words_skipped = progress.get("words_skipped", 0)
            progress_percentage = progress.get("progress_percentage", 0)
            last_study_date = progress.get("last_study_date")
            
            stats_text += f"üîπ {lang_name} ({lang_name_foreign}):\n"
            stats_text += f"  - –í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ —è–∑—ã–∫–µ: {total_words}\n"
            stats_text += f"  - –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {words_studied}\n"
            stats_text += f"  - –ò–∑–≤–µ—Å—Ç–Ω–æ —Å–ª–æ–≤: {words_known}\n"
            stats_text += f"  - –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–ª–æ–≤: {words_skipped}\n"
            stats_text += f"  - –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percentage:.1f}%\n"
            
            if last_study_date:
                stats_text += f"  - –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –∏–∑—É—á–µ–Ω–∏—è: {last_study_date.split('T')[0]}\n"
            
            stats_text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–∞—Ö –±–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if languages_without_progress:
        stats_text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –±–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n"
        for language in languages_without_progress:
            lang_name = language.get("name_ru")
            lang_name_foreign = language.get("name_foreign")
            total_words = language.get("total_words", 0)
            
            stats_text += f"- {lang_name} ({lang_name_foreign}) - {total_words} —Å–ª–æ–≤\n"
    
    await message.answer(stats_text)