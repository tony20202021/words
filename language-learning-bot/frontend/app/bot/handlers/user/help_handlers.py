"""
Help command handlers for Language Learning Bot.
FIXED: Removed code duplication, improved architecture, better user experience.
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.utils.api_utils import get_api_client_from_bot
from app.utils.logger import setup_logger
from app.utils.error_utils import safe_api_call
from app.bot.states.centralized_states import UserStates
from app.bot.keyboards.user_keyboards import create_help_keyboard

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
help_router = Router()

# Set up logging
logger = setup_logger(__name__)

# –ù–û–í–û–ï: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def _ensure_user_exists(user_info, api_client) -> bool:
    """
    Ensure user exists in database (simplified version for help context).
    –ù–û–í–û–ï: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–ø—Ä–∞–≤–∫–∏ - –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
    
    Args:
        user_info: User information from Telegram
        api_client: API client instance
        
    Returns:
        bool: True if user exists or was created successfully
    """
    user_id = user_info.id
    
    # Check if user exists
    success, users = await safe_api_call(
        lambda: api_client.get_user_by_telegram_id(user_id),
        None,  # No message object for error handling
        "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        handle_errors=False
    )
    
    if not success:
        return False
    
    # User already exists
    if users and len(users) > 0:
        return True
    
    # Create new user
    new_user_data = {
        "telegram_id": user_id,
        "username": user_info.username,
        "first_name": user_info.first_name,
        "last_name": user_info.last_name
    }
    
    success, _ = await safe_api_call(
        lambda: api_client.create_user(new_user_data),
        None,
        "—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        handle_errors=False
    )
    
    return success

def _get_help_content() -> dict:
    """
    Get structured help content.
    –ù–û–í–û–ï: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ø—Ä–∞–≤–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏.
    
    Returns:
        dict: Structured help content with sections
    """
    return {
        "title": "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞",
        "description": (
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞—Ç—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ "
            "—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è."
        ),
        "sections": {
            "commands": {
                "title": "üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
                "items": [
                    "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º",
                    "/language - –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è", 
                    "/study - –ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤",
                    "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è",
                    "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                    "/hint - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö",
                    "/cancel - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"
                ]
            },
            "process": {
                "title": "üîπ –ü—Ä–æ—Ü–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è:",
                "items": [
                    "1. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∫–æ–º–∞–Ω–¥–æ–π /language",
                    "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /settings",
                    "3. –ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /study",
                    "4. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –≤—ã –º–æ–∂–µ—Ç–µ:",
                    "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏",
                    "   ‚Ä¢ –û—Ç–º–µ—Ç–∏—Ç—å —Å–ª–æ–≤–æ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–µ",
                    "   ‚Ä¢ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ–≤–æ"
                ]
            },
            "repetition": {
                "title": "üîπ –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:",
                "items": [
                    "‚Ä¢ –ï—Å–ª–∏ –≤—ã –æ—Ç–º–µ—Ç–∏–ª–∏ —Å–ª–æ–≤–æ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–µ, –µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤ 2 —Ä–∞–∑–∞",
                    "‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: 1, 2, 4, 8, 16, 32 –¥–Ω—è",
                    "‚Ä¢ –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ —Å–ª–æ–≤–æ, –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –¥–æ 1 –¥–Ω—è",
                    "‚Ä¢ –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ç–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è"
                ]
            },
            "hints": {
                "title": "üîπ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫:",
                "items": [
                    "‚Ä¢ –§–æ–Ω–µ—Ç–∏–∫–∞ - —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ —Å–ª–æ–≥–∏",
                    "‚Ä¢ –ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è - —Å–≤—è–∑—å —Å –ø–æ—Ö–æ–∂–∏–º–∏ –ø–æ –∑–≤—É—á–∞–Ω–∏—é —Å–ª–æ–≤–∞–º–∏",
                    "‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏–µ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç",
                    "‚Ä¢ –ù–∞–ø–∏—Å–∞–Ω–∏–µ - –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–µ–º—ã –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                    "‚Ä¢ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–æ–∂–Ω–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –≤–∫–ª—é—á–∞—Ç—å/–æ—Ç–∫–ª—é—á–∞—Ç—å —Ç–∏–ø—ã –ø–æ–¥—Å–∫–∞–∑–æ–∫"
                ]
            }
        },
        "footer": "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞ (@Anton_Mikhalev)."
    }

def _format_help_text(help_content: dict) -> str:
    """
    Format help content into readable text.
    –ù–û–í–û–ï: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        help_content: Structured help content
        
    Returns:
        str: Formatted help text
    """
    text = f"{help_content['title']}\n\n"
    text += f"{help_content['description']}\n\n"
    
    for section_key, section in help_content['sections'].items():
        text += f"{section['title']}\n"
        for item in section['items']:
            text += f"{item}\n"
        text += "\n"
    
    text += help_content['footer']
    
    return text

@help_router.message(Command("help"))
async def cmd_help(message: Message, state: FSMContext):
    """
    Handle the /help command which shows bot instructions.
    –û–ë–ù–û–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, —É–ª—É—á—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    logger.info(f"'/help' command from {full_name} ({username})")

    # Set state for viewing help
    await state.set_state(UserStates.viewing_help)
    
    # Preserve existing state data
    current_data = await state.get_data()
    await state.update_data(**current_data)

    # Get API client and ensure user exists (best effort, non-blocking)
    api_client = get_api_client_from_bot(message.bot)
    if api_client:
        user_exists = await _ensure_user_exists(message.from_user, api_client)
        if user_exists:
            logger.debug(f"User {user_id} ensured in database")
        else:
            logger.warning(f"Could not ensure user {user_id} exists in database")
    else:
        logger.warning("API client not available for user creation")

    # Get and format help content
    help_content = _get_help_content()
    help_text = _format_help_text(help_content)
    
    # Create interactive keyboard for better UX
    keyboard = create_help_keyboard()
    
    # Send help message
    await message.answer(
        help_text,
        reply_markup=keyboard,
        parse_mode="HTML" if "<" in help_text else None
    )

# –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–º–æ—â–∏
@help_router.callback_query(F.data == "start_study_from_help")
async def process_start_study_from_help(callback: CallbackQuery, state: FSMContext):
    """
    Handle study start from help keyboard.
    
    Args:
        callback: The callback query
        state: FSM context
    """
    logger.info(f"Start study from help by {callback.from_user.full_name}")
    
    # Check if language is selected
    state_data = await state.get_data()
    current_language = state_data.get("current_language")
    
    if not current_language or not current_language.get("id"):
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫!", show_alert=True)
        await callback.message.answer(
            "‚ö†Ô∏è –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–∑—É—á–µ–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∫–æ–º–∞–Ω–¥–æ–π /language"
        )
        return
    
    await callback.answer("üéì –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–∑—É—á–µ–Ω–∏—é...")
    await callback.message.answer(
        "üéì –û—Ç–ª–∏—á–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /study –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤.\n\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings"
    )

@help_router.callback_query(F.data == "select_language_from_help")
async def process_select_language_from_help(callback: CallbackQuery, state: FSMContext):
    """
    Handle language selection from help keyboard.
    
    Args:
        callback: The callback query
        state: FSM context
    """
    logger.info(f"Select language from help by {callback.from_user.full_name}")
    
    await callback.answer("üåç –í—ã–±–æ—Ä —è–∑—ã–∫–∞...")
    await callback.message.answer(
        "üåç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /language –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏–∑—É—á–µ–Ω–∏—è.\n\n"
        "–í–∞–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤."
    )

@help_router.callback_query(F.data == "show_settings_from_help")
async def process_show_settings_from_help(callback: CallbackQuery, state: FSMContext):
    """
    Handle settings display from help keyboard.
    
    Args:
        callback: The callback query
        state: FSM context
    """
    logger.info(f"Show settings from help by {callback.from_user.full_name}")
    
    # Check if language is selected
    state_data = await state.get_data()
    current_language = state_data.get("current_language")
    
    if not current_language or not current_language.get("id"):
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫!", show_alert=True)
        await callback.message.answer(
            "‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∫–æ–º–∞–Ω–¥–æ–π /language"
        )
        return
    
    await callback.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏...")
    await callback.message.answer(
        "‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /settings –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—É—á–µ–Ω–∏—è.\n\n"
        "–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤\n"
        "‚Ä¢ –í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å —É—á–µ—Ç –¥–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∏–ø—ã –ø–æ–¥—Å–∫–∞–∑–æ–∫\n"
        "‚Ä¢ –í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
    )

@help_router.callback_query(F.data == "show_stats_from_help")
async def process_show_stats_from_help(callback: CallbackQuery, state: FSMContext):
    """
    Handle statistics display from help keyboard.
    
    Args:
        callback: The callback query
        state: FSM context
    """
    logger.info(f"Show stats from help by {callback.from_user.full_name}")
    
    await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...")
    await callback.message.answer(
        "üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑—É—á–µ–Ω–∏—è.\n\n"
        "–í —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ:\n"
        "‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞–∂–¥–æ–º—É —è–∑—ã–∫—É\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤\n"
        "‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Å–≤–æ–µ–Ω–∏—è —è–∑—ã–∫–∞\n"
        "‚Ä¢ –î–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑—É—á–µ–Ω–∏—è\n"
        "‚Ä¢ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
    )

# –ù–û–í–û–ï: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@help_router.callback_query(F.data == "help_about_hints")
async def process_help_about_hints(callback: CallbackQuery, state: FSMContext):
    """
    Handle detailed hints information request.
    
    Args:
        callback: The callback query
        state: FSM context
    """
    logger.info(f"Help about hints by {callback.from_user.full_name}")
    
    await callback.answer("üí° –ü–æ–¥—Ä–æ–±–Ω–æ –æ –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö...")
    
    hints_help = (
        "üí° <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö</b>\n\n"
        
        "üéµ <b>–§–æ–Ω–µ—Ç–∏–∫–∞ (–∑–≤—É—á–∞–Ω–∏–µ –ø–æ —Å–ª–æ–≥–∞–º):</b>\n"
        "–†–∞–∑–±–∏–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è\n"
        "–ü—Ä–∏–º–µ—Ä: hello ‚Üí hel-lo\n\n"
        
        "üí° <b>–ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –¥–ª—è —Ñ–æ–Ω–µ—Ç–∏–∫–∏:</b>\n"
        "–°–≤—è–∑—å –∑–≤—É—á–∞–Ω–∏—è —Å –∑–Ω–∞–∫–æ–º—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
        "–ü—Ä–∏–º–µ—Ä: cat –∑–≤—É—á–∏—Ç –∫–∞–∫ '–∫—ç—Ç'\n\n"
        
        "üß† <b>–ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è:</b>\n"
        "–°–≤—è–∑—å –∑–Ω–∞—á–µ–Ω–∏—è —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏–ª–∏ –æ–±—Ä–∞–∑–∞–º–∏\n"
        "–ü—Ä–∏–º–µ—Ä: dog ‚Üí —Å–æ–±–∞–∫–∞ ‚Üí –≤–µ—Ä–Ω—ã–π –¥—Ä—É–≥\n\n"
        
        "‚úçÔ∏è <b>–ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è:</b>\n"
        "–ú–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–µ–º—ã –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
        "–ü—Ä–∏–º–µ—Ä: –¥—Ä—É–≥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º friend ‚Äî F-R-I-E-N-D\n\n"
        
        "‚öôÔ∏è –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (/settings) –≤—ã –º–æ–∂–µ—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –∏ –æ—Ç–∫–ª—é—á–∞—Ç—å –∫–∞–∂–¥—ã–π —Ç–∏–ø –ø–æ–¥—Å–∫–∞–∑–æ–∫.\n\n"
        
        "‚ùóÔ∏è <b>–í–∞–∂–Ω–æ:</b> –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª—é–±–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–ª–æ–≤–∞ –∫ 1 –¥–Ω—é."
    )
    
    await callback.message.answer(hints_help, parse_mode="HTML")

@help_router.callback_query(F.data == "help_contact_admin")
async def process_help_contact_admin(callback: CallbackQuery, state: FSMContext):
    """
    Handle admin contact information request.
    
    Args:
        callback: The callback query
        state: FSM context
    """
    logger.info(f"Help contact admin by {callback.from_user.full_name}")
    
    await callback.answer("üë®‚Äçüíº –ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    
    admin_contact = (
        "üë®‚Äçüíº <b>–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
        
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞, "
        "–≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n\n"
        
        "üì± Telegram: @Anton_Mikhalev\n"
        "üìß Email: anton.v.mikhalev@gmail.com\n\n"
        
        "üîß <b>–ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ:</b>\n"
        "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞\n"
        "‚Ä¢ –ß—Ç–æ –≤—ã –¥–µ–ª–∞–ª–∏, –∫–æ–≥–¥–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞\n"
        "‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)\n\n"
        
        "‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤"
    )
    
    await callback.message.answer(admin_contact, parse_mode="HTML")

# –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏
async def get_contextual_help(current_state: str) -> str:
    """
    Get contextual help based on current user state.
    –ù–û–í–û–ï: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    
    Args:
        current_state: Current FSM state
        
    Returns:
        str: Contextual help message
    """
    context_help = {
        "UserStates:selecting_language": (
            "üåç –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —è–∑—ã–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        ),
        "SettingsStates:viewing_settings": (
            "‚öôÔ∏è –í—ã –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞."
        ),
        "StudyStates:studying": (
            "üìö –í—ã –∏–∑—É—á–∞–µ—Ç–µ —Å–ª–æ–≤–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∑–Ω–∞–Ω–∏—è —Å–ª–æ–≤ –∏–ª–∏ /cancel –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
        ),
        "StudyStates:study_completed": (
            "üéâ –ò–∑—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /study –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ –∏–ª–∏ /language –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ —è–∑—ã–∫–∞."
        )
    }
    
    return context_help.get(
        current_state,
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É."
    )

# Export router and utilities
__all__ = [
    'help_router',
    'get_contextual_help'
]
