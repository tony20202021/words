"""
Basic user command handlers for Language Learning Bot.
Handles start, help, and other basic commands.
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.utils.api_utils import get_api_client_from_bot
from app.utils.logger import setup_logger
from app.utils.error_utils import handle_api_error

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
basic_router = Router()

# Set up logging
logger = setup_logger(__name__)

async def handle_start_command(message, state: FSMContext, user_id=None, username=None, full_name=None, is_callback=False):
    """
    Common handler logic for start command.
    
    Args:
        message: The message object from Telegram (–∏–ª–∏ callback.message –ø—Ä–∏ is_callback=True)
        state: The FSM state context
        user_id: User ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ callback)
        username: Username (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ callback)
        full_name: Full name (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ callback)
        is_callback: Whether this is called from a callback handler
    """
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    await state.clear()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–±–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ª–∏–±–æ –±–µ—Ä–µ–º –∏–∑ message
    if not user_id:
        user_id = message.from_user.id
    if not username:
        username = message.from_user.username
    if not full_name:
        full_name = message.from_user.first_name
    
    logger.info(f"Start command handler for {full_name} ({username})")

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã
    api_client = get_api_client_from_bot(message.bot)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∫–ª–∏–µ–Ω—Ç–∞
    if api_client is None:
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. "
            "–ë–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ "
            "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        logger.error(f"API client not available during start command from {full_name} ({username})")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    logger.debug("User data: %s", user_data)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    welcome_message = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {full_name}!\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤!\n\n"
    )

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_response = await api_client.get_user_by_telegram_id(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    if not user_response["success"]:
        error_msg = user_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        welcome_message += (
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞.\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {error_msg}\n\n"
            f"–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ø—Ä–∞–≤–∫–æ–π: /help"
        )
        await message.answer(welcome_message)
        logger.error(f"Failed to get user data during start command. Error: {error_msg}")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
    users = user_response["result"]
    user = users[0] if users and isinstance(users, list) and len(users) > 0 else None

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
    db_user_id = None
    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user_data = {
            "telegram_id": user_id,
            "username": username,
            "first_name": message.from_user.first_name if not is_callback else full_name,
            "last_name": message.from_user.last_name if not is_callback else None
        }
        
        create_response = await api_client.create_user(new_user_data)
        
        if not create_response["success"]:
            error_msg = create_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            welcome_message += (
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {error_msg}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            await message.answer(welcome_message)
            logger.error(f"Failed to create user during start command. Error: {error_msg}")
            return
            
        created_user = create_response["result"]
        db_user_id = created_user.get("id") if created_user else None
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
        db_user_id = user.get("id")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –∏–∑ API
    languages_response = await api_client.get_languages()
    
    if not languages_response["success"]:
        error_msg = languages_response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        welcome_message += (
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤.\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {error_msg}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await message.answer(welcome_message)
        logger.error(f"Failed to get languages during start command. Error: {error_msg}")
        return
    
    languages = languages_response["result"] or []
    
    # –î–æ–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —è–∑—ã–∫–∞—Ö
    if languages:
        welcome_message += f"üåç –í —Å–∏—Å—Ç–µ–º–µ –¥–æ—Å—Ç—É–ø–Ω–æ {len(languages)} —è–∑—ã–∫–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.\n\n"
    else:
        welcome_message += "üåç –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if db_user_id:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(db_user_id=db_user_id)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —è–∑—ã–∫–∞–º
        user_progress_by_language = []
        
        for language in languages:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞
            try:
                progress_response = await api_client.get_user_progress(db_user_id, language.get("id"))
                
                if progress_response["success"] and progress_response["result"]:
                    user_progress_by_language.append(progress_response["result"])
            except Exception as e:
                logger.error(f"Error getting progress for language {language.get('id')}: {e}")
        
        if user_progress_by_language:
            welcome_message += "üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —è–∑—ã–∫–∞–º:\n"
            for progress in user_progress_by_language:
                lang_name = progress.get("language_name_ru")
                progress_percentage = progress.get("progress_percentage", 0)
                welcome_message += f"- {lang_name}: {progress_percentage:.1f}%\n"
        else:
            welcome_message += (
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∏–∑—É—á–µ–Ω–∏—é —è–∑—ã–∫–æ–≤.\n"
                "–ù–∞—á–Ω–∏—Ç–µ —Å –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /language\n"
            )
    else:
        welcome_message += (
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∏–∑—É—á–µ–Ω–∏—é —è–∑—ã–∫–æ–≤.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Å –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /language\n"
        )
    
    welcome_message += (
        "\n–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/language - –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n"
        "/study - –ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )
    
    await message.answer(welcome_message)
    
    return True

@basic_router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """
    Handle the /start command for new users.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    await handle_start_command(message, state)

@basic_router.callback_query(F.data == "back_to_start")
async def process_back_to_main(callback: CallbackQuery, state: FSMContext):
    """
    Process callback to return to the main menu.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'back_to_start' callback from {full_name} ({username})")
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
    await handle_start_command(
        callback.message, 
        state, 
        user_id=callback.from_user.id,
        username=callback.from_user.username,
        full_name=callback.from_user.full_name,
        is_callback=True
    )
    
    await callback.answer()