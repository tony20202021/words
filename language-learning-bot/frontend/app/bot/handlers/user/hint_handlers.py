"""
Hint information command handlers for Language Learning Bot.
FIXED: Removed code duplication, improved architecture, better user experience.
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.utils.logger import setup_logger
from app.utils.hint_constants import (
    get_all_hint_types, 
    get_hint_name, 
    get_hint_icon,
)
from app.bot.states.centralized_states import UserStates
from app.utils.message_utils import get_user_info, get_message_from_callback

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–¥—Å–∫–∞–∑–æ–∫
hint_router = Router()

# Set up logging
logger = setup_logger(__name__)

def _get_hint_info_content() -> dict:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏.
    
    Returns:
        dict: Structured hint information with all details
    """
    return {
        "title": "üí° –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫",
        "description": (
            "–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –≤–∞–º –ª—É—á—à–µ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞! "
            "–û–Ω–∏ –≤—ã—Å—Ç—Ä–æ–µ–Ω—ã –≤ –ª–æ–≥–∏—á–µ—Å–∫—É—é —Ü–µ–ø–æ—á–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –≤—Å–ø–æ–º–Ω–∏—Ç—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞."
        ),
        "hint_types": {
            hint_type: {
                "name": get_hint_name(hint_type),
                "icon": get_hint_icon(hint_type),
                "description": _get_hint_type_description(hint_type)
            }
            for hint_type in get_all_hint_types()
        },
        "usage": {
            "title": "üéØ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏:",
            "steps": [
                "1. –í–æ –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤ (/study) –≤—ã —É–≤–∏–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫",
                "2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ç–∏–ø –ø–æ–¥—Å–∫–∞–∑–∫–∏",
                "3. –ï—Å–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–π—Ç–µ –µ—ë",
                "4. –ï—Å–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –µ—Å—Ç—å - –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ",
                "5. –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–æ —Å–ª–æ–≤–æ–º"
            ]
        },
        "settings": {
            "title": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫:",
            "description": (
                "–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (/settings) –≤—ã –º–æ–∂–µ—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –∏ –æ—Ç–∫–ª—é—á–∞—Ç—å "
                "–∫–∞–∂–¥—ã–π —Ç–∏–ø –ø–æ–¥—Å–∫–∞–∑–æ–∫. –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –Ω–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤–æ –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è."
            )
        },
        "important": {
            "title": "‚ùóÔ∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:",
            "points": [
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª—é–±–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–º–Ω–∏—Ç —Å–ª–æ–≤–æ",
                "‚Ä¢ –°–ª–æ–≤–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å",
                "‚Ä¢ –ü–æ–¥—Å–∫–∞–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏",
                "‚Ä¢ –ü–æ–¥—Å–∫–∞–∑–∫–∏ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è"
            ]
        },
        "use_settings": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥—Å–∫–∞–∑–æ–∫",
        "footer": "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help",
    }

def _get_hint_type_description(hint_type: str) -> str:
    """
    –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏.
    
    Args:
        hint_type: Type of hint
        
    Returns:
        str: Detailed description of the hint type
    """
    descriptions = {
        "meaning": (
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã, –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–ª–æ–≤–∞. "
            "–ü–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏–¥—É–º–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏."
        ),
        "phoneticassociation": (
            "–ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –∑–≤—É—á–∞–Ω–∏—è —Å–ª–æ–≥–æ–≤ –∏–ª–∏ —á–∞—Å—Ç–µ–π —Å–ª–æ–≤–∞ - —Å –∑–Ω–∞–∫–æ–º—ã–º–∏ —Ä—É—Å—Å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏–ª–∏ –∑–≤—É–∫–∞–º–∏. "
            "–û—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —Ä—É—Å—Å–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è."
            "–ü–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏–¥—É–º–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–º—É –∑–≤—É—á–∞–Ω–∏—é."
        ),
        "phoneticsound": (
            "–†–∞–∑–±–∏–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ —Å–ª–æ–≥–∏ –∏ –∑–≤—É–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. "
            "–û—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–≤—É—á–∞–Ω–∏—è."
            "–ü–æ–º–æ–≥–∞–µ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç—å, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—å —Å–ª–æ–≤–æ –ø–æ —á–∞—Å—Ç—è–º."
        ),
        "writing": (
            "–ú–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–µ–º—ã –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–ª–æ–≤–∞. "
            "–ú–æ–∂–µ—Ç –æ—Å–Ω–æ–≤—ã–≤–∞—Ç—å—Å—è –Ω–∞ –ª—é–±–æ–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π."
            "–û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —è–∑—ã–∫–æ–≤ —Å –Ω–µ–ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ –∞–ª—Ñ–∞–≤–∏—Ç–∞–º–∏ –∏–ª–∏ —Å–ª–æ–∂–Ω—ã–º –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º."
        )
    }
    
    return descriptions.get(hint_type, "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

def _format_hint_info_text(hint_info: dict, user_hint_settings: dict = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö —Å —É—á–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    
    Args:
        hint_info: Structured hint information  
        user_hint_settings: User's individual hint settings
        
    Returns:
        str: Formatted hint information text
    """
    text = f"{hint_info['title']}\n\n"
    text += f"{hint_info['description']}\n\n"
    
    # Add hint types information
    text += "üîç <b>–¢–∏–ø—ã –ø–æ–¥—Å–∫–∞–∑–æ–∫:</b>\n\n"
    
    for hint_type, info in hint_info['hint_types'].items():
        icon = info['icon']
        name = info['name']
        description = info['description']
        
        # Check if this hint type is enabled in user settings  
        if user_hint_settings:
            setting_key = f"show_{hint_type}" if hint_type == "hint_meaning" else f"show_hint_{hint_type}"
            # Map hint types to setting keys properly
            setting_mapping = {
                "meaning": "show_hint_meaning",
                "phoneticassociation": "show_hint_phoneticassociation", 
                "phoneticsound": "show_hint_phoneticsound",
                "writing": "show_hint_writing"
            }
            setting_key = setting_mapping.get(hint_type, f"show_hint_{hint_type}")
            is_enabled = user_hint_settings.get(setting_key, True)
            status = "‚úÖ" if is_enabled else "‚ùå"
        else:
            status = "‚ùì"
        
        text += f"{status} {icon} <b>{name}</b>\n{description}\n\n"
    
    # Add usage information
    text += f"{hint_info['usage']['title']}\n"
    for step in hint_info['usage']['steps']:
        text += f"{step}\n"
    text += "\n"
    
    # Add settings information
    text += f"{hint_info['settings']['title']}\n"
    text += f"{hint_info['settings']['description']}\n\n"
    
    # Add important information
    text += f"{hint_info['important']['title']}\n"
    for point in hint_info['important']['points']:
        text += f"{point}\n"
    text += "\n"
    
    text += hint_info['use_settings']
    text += "\n"
    text += "\n"

    text += hint_info['footer']
    
    return text

@hint_router.message(Command("hint"))
async def cmd_hint(message: Message, state: FSMContext):
    await process_hint(message, state)

@hint_router.callback_query(F.data == "show_hint_info")
async def process_show_hint_info_callback(callback: CallbackQuery, state: FSMContext):
    """
    Process callback to show hint information.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    logger.info(f"'show_hint_info' callback from {callback.from_user.full_name}")
    
    await callback.answer("üí° –û –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö...")
    
    await process_hint(callback, state)

async def process_hint(message_or_callback, state: FSMContext):
    """
    Handle the /hint command which provides information about hint functionality.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    user_id, username, full_name = get_user_info(message_or_callback)
    message = get_message_from_callback(message_or_callback)

    logger.info(f"'/hint' command from {full_name} ({username})")

    # Set state for viewing hint info
    await state.set_state(UserStates.viewing_hint_info)
    
    # Get and format hint information
    hint_info = _get_hint_info_content()
    hint_text = _format_hint_info_text(hint_info, user_hint_settings=None)
    

    # Send hint information
    await message.answer(hint_text, parse_mode="HTML")

# Export router and utilities
__all__ = [
    'hint_router',
]
