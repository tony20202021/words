"""
Hint information command handlers for Language Learning Bot.
FIXED: Removed code duplication, improved architecture, better user experience.
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.utils.api_utils import get_api_client_from_bot
from app.utils.logger import setup_logger
from app.utils.error_utils import safe_api_call
from app.utils.hint_constants import (
    get_all_hint_types, 
    get_hint_name, 
    get_hint_icon,
    HINT_SETTING_KEYS,
    get_hint_setting_name
)
from app.utils.hint_settings_utils import get_individual_hint_settings
from app.bot.states.centralized_states import UserStates

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–¥—Å–∫–∞–∑–æ–∫
hint_router = Router()

# Set up logging
logger = setup_logger(__name__)

# –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def _ensure_user_exists_quietly(user_info, api_client) -> bool:
    """
    Ensure user exists in database (quiet version for info context).
    –ù–û–í–û–ï: –¢–∏—Ö–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫.
    
    Args:
        user_info: User information from Telegram
        api_client: API client instance
        
    Returns:
        bool: True if user exists or was created successfully
    """
    user_id = user_info.id
    
    # Check if user exists
    success, users = await safe_api_call(
        lambda: api_client.get_user_by_telegram_id(user_id),
        None,
        "–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö",
        handle_errors=False
    )
    
    if not success:
        return False
    
    # User already exists
    if users and len(users) > 0:
        return True
    
    # Create new user
    new_user_data = {
        "telegram_id": user_id,
        "username": user_info.username,
        "first_name": user_info.first_name,
        "last_name": user_info.last_name
    }
    
    success, _ = await safe_api_call(
        lambda: api_client.create_user(new_user_data),
        None,
        "—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö",
        handle_errors=False
    )
    
    return success

def _get_hint_info_content() -> dict:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏.
    
    Returns:
        dict: Structured hint information with all details
    """
    return {
        "title": "üí° –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫",
        "description": (
            "–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –≤–∞–º –ª—É—á—à–µ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞! "
            "–û–Ω–∏ –≤—ã—Å—Ç—Ä–æ–µ–Ω—ã –≤ –ª–æ–≥–∏—á–µ—Å–∫—É—é —Ü–µ–ø–æ—á–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –≤—Å–ø–æ–º–Ω–∏—Ç—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞."
        ),
        "hint_types": {
            hint_type: {
                "name": get_hint_name(hint_type),
                "icon": get_hint_icon(hint_type),
                "description": _get_hint_type_description(hint_type)
            }
            for hint_type in get_all_hint_types()
        },
        "usage": {
            "title": "üéØ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏:",
            "steps": [
                "1. –í–æ –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤ (/study) –≤—ã —É–≤–∏–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫",
                "2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ç–∏–ø –ø–æ–¥—Å–∫–∞–∑–∫–∏",
                "3. –ï—Å–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–π—Ç–µ –µ—ë",
                "4. –ï—Å–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –µ—Å—Ç—å - –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ",
                "5. –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–æ —Å–ª–æ–≤–æ–º"
            ]
        },
        "settings": {
            "title": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫:",
            "description": (
                "–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (/settings) –≤—ã –º–æ–∂–µ—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –∏ –æ—Ç–∫–ª—é—á–∞—Ç—å "
                "–∫–∞–∂–¥—ã–π —Ç–∏–ø –ø–æ–¥—Å–∫–∞–∑–æ–∫. –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –Ω–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤–æ –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è."
            )
        },
        "important": {
            "title": "‚ùóÔ∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:",
            "points": [
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª—é–±–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–º–Ω–∏—Ç —Å–ª–æ–≤–æ",
                "‚Ä¢ –°–ª–æ–≤–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å",
                "‚Ä¢ –ü–æ–¥—Å–∫–∞–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏",
                "‚Ä¢ –ü–æ–¥—Å–∫–∞–∑–∫–∏ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è"
            ]
        },
        "use_settings": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥—Å–∫–∞–∑–æ–∫",
        "footer": "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help",
    }

def _get_hint_type_description(hint_type: str) -> str:
    """
    –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏.
    
    Args:
        hint_type: Type of hint
        
    Returns:
        str: Detailed description of the hint type
    """
    descriptions = {
        "meaning": (
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã, –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–ª–æ–≤–∞. "
            "–ü–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏–¥—É–º–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–π –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏."
        ),
        "phoneticassociation": (
            "–ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –∑–≤—É—á–∞–Ω–∏—è —Å–ª–æ–≥–æ–≤ –∏–ª–∏ —á–∞—Å—Ç–µ–π —Å–ª–æ–≤–∞ - —Å –∑–Ω–∞–∫–æ–º—ã–º–∏ —Ä—É—Å—Å–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏–ª–∏ –∑–≤—É–∫–∞–º–∏. "
            "–û—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —Ä—É—Å—Å–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è."
            "–ü–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏–¥—É–º–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–º—É –∑–≤—É—á–∞–Ω–∏—é."
        ),
        "phoneticsound": (
            "–†–∞–∑–±–∏–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ —Å–ª–æ–≥–∏ –∏ –∑–≤—É–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. "
            "–û—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–≤—É—á–∞–Ω–∏—è."
            "–ü–æ–º–æ–≥–∞–µ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç—å, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—å —Å–ª–æ–≤–æ –ø–æ —á–∞—Å—Ç—è–º."
        ),
        "writing": (
            "–ú–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–µ–º—ã –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–ª–æ–≤–∞. "
            "–ú–æ–∂–µ—Ç –æ—Å–Ω–æ–≤—ã–≤–∞—Ç—å—Å—è –Ω–∞ –ª—é–±–æ–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π."
            "–û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —è–∑—ã–∫–æ–≤ —Å –Ω–µ–ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ –∞–ª—Ñ–∞–≤–∏—Ç–∞–º–∏ –∏–ª–∏ —Å–ª–æ–∂–Ω—ã–º –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º."
        )
    }
    
    return descriptions.get(hint_type, "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

def _format_hint_info_text(hint_info: dict, user_hint_settings: dict = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö —Å —É—á–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    
    Args:
        hint_info: Structured hint information  
        user_hint_settings: User's individual hint settings
        
    Returns:
        str: Formatted hint information text
    """
    text = f"{hint_info['title']}\n\n"
    text += f"{hint_info['description']}\n\n"
    
    # Add hint types information
    text += "üîç <b>–¢–∏–ø—ã –ø–æ–¥—Å–∫–∞–∑–æ–∫:</b>\n\n"
    
    for hint_type, info in hint_info['hint_types'].items():
        icon = info['icon']
        name = info['name']
        description = info['description']
        
        # Check if this hint type is enabled in user settings  
        if user_hint_settings:
            setting_key = f"show_{hint_type}" if hint_type == "hint_meaning" else f"show_hint_{hint_type}"
            # Map hint types to setting keys properly
            setting_mapping = {
                "meaning": "show_hint_meaning",
                "phoneticassociation": "show_hint_phoneticassociation", 
                "phoneticsound": "show_hint_phoneticsound",
                "writing": "show_hint_writing"
            }
            setting_key = setting_mapping.get(hint_type, f"show_hint_{hint_type}")
            is_enabled = user_hint_settings.get(setting_key, True)
            status = "‚úÖ" if is_enabled else "‚ùå"
        else:
            status = "‚ùì"
        
        text += f"{status} {icon} <b>{name}</b>\n{description}\n\n"
    
    # Add usage information
    text += f"{hint_info['usage']['title']}\n"
    for step in hint_info['usage']['steps']:
        text += f"{step}\n"
    text += "\n"
    
    # Add settings information
    text += f"{hint_info['settings']['title']}\n"
    text += f"{hint_info['settings']['description']}\n\n"
    
    # Add important information
    text += f"{hint_info['important']['title']}\n"
    for point in hint_info['important']['points']:
        text += f"{point}\n"
    text += "\n"
    
    text += hint_info['use_settings']
    text += "\n"
    text += "\n"

    text += hint_info['footer']
    
    return text

@hint_router.message(Command("hint"))
async def cmd_hint(message: Message, state: FSMContext):
    await process_hint(message, state)

@hint_router.callback_query(F.data == "show_hint_info")
async def process_show_hint_info_callback(callback: CallbackQuery, state: FSMContext):
    """
    Process callback to show hint information.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    logger.info(f"'show_hint_info' callback from {callback.from_user.full_name}")
    
    await callback.answer("üí° –û –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö...")
    
    await process_hint(callback, state)

async def process_hint(message_or_callback, state: FSMContext):
    """
    Handle the /hint command which provides information about hint functionality.
    
    Args:
        message: The message object from Telegram
        state: The FSM state context
    """
    user_id = message_or_callback.from_user.id
    username = message_or_callback.from_user.username
    full_name = message_or_callback.from_user.full_name

    logger.info(f"'/hint' command from {full_name} ({username})")

    # Set state for viewing hint info
    await state.set_state(UserStates.viewing_hint_info)
    
    # Get and format hint information
    hint_info = _get_hint_info_content()
    hint_text = _format_hint_info_text(hint_info, user_hint_settings=None)
    
    if isinstance(message_or_callback, CallbackQuery):
        message = message_or_callback.message
    else:
        message = message_or_callback

    # Send hint information
    await message.answer(hint_text, parse_mode="HTML")

# –ù–û–í–û–ï: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
@hint_router.callback_query(F.data == "hint_detailed_info")
async def process_hint_detailed_info(callback: CallbackQuery, state: FSMContext):
    """
    Handle request for detailed hint information.
    
    Args:
        callback: The callback query
        state: FSM context
    """
    logger.info(f"Detailed hint info requested by {callback.from_user.full_name}")
    
    await callback.answer("üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è...")
    
    detailed_info = _get_detailed_hint_examples()
    await callback.message.answer(detailed_info, parse_mode="HTML")

def _get_detailed_hint_examples() -> str:
    """
    Get detailed examples for each hint type.
    –ù–û–í–û–ï: –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫.
    
    Returns:
        str: Formatted examples text
    """
    return (
        "üìñ <b>–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ–¥—Å–∫–∞–∑–æ–∫</b>\n\n"
        
        "üéµ <b>–ó–≤—É—á–∞–Ω–∏–µ –ø–æ —Å–ª–æ–≥–∞–º (–§–æ–Ω–µ—Ç–∏–∫–∞):</b>\n"
        "–°–ª–æ–≤–æ: beautiful\n"
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞: beau-ti-ful (–±—å—é-—Ç–∏-—Ñ—É–ª)\n"
        "–ü–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–±–∏—Ç—å —Å–ª–æ–∂–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ —á–∞—Å—Ç–∏\n\n"
        
        "üí° <b>–ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –¥–ª—è —Ñ–æ–Ω–µ—Ç–∏–∫–∏:</b>\n"
        "–°–ª–æ–≤–æ: cat\n"
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∑–≤—É—á–∏—Ç –∫–∞–∫ '–∫—ç—Ç' - –ø–æ—Ö–æ–∂–µ –Ω–∞ '–∫–æ—Ç'\n"
        "–°–≤—è–∑—ã–≤–∞–µ—Ç –∑–≤—É—á–∞–Ω–∏–µ —Å –∑–Ω–∞–∫–æ–º—ã–º–∏ –∑–≤—É–∫–∞–º–∏\n\n"
        
        "üß† <b>–ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è:</b>\n"
        "–°–ª–æ–≤–æ: dog\n"
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞: —Å–æ–±–∞–∫–∞ = –≤–µ—Ä–Ω—ã–π –¥—Ä—É–≥ = –ª—É—á—à–∏–π –¥—Ä—É–≥ —á–µ–ª–æ–≤–µ–∫–∞\n"
        "–°–æ–∑–¥–∞–µ—Ç —Å–º—ã—Å–ª–æ–≤—ã–µ —Å–≤—è–∑–∏ –∏ –æ–±—Ä–∞–∑—ã\n\n"
        
        "‚úçÔ∏è <b>–ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è:</b>\n"
        "–°–ª–æ–≤–æ: friend\n"
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞: F-R-I-E-N-D = Forever Reliable, Intelligent, Encouraging, Nice, Dear\n"
        "–ü–æ–º–æ–≥–∞–µ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –±—É–∫–≤\n\n"
        
        "üí≠ <b>–°–æ–≤–µ—Ç—ã –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ–¥—Å–∫–∞–∑–æ–∫:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —è—Ä–∫–∏–µ, –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–µ—Å—è –æ–±—Ä–∞–∑—ã\n"
        "‚Ä¢ –°–≤—è–∑—ã–≤–∞–π—Ç–µ —Å –ª–∏—á–Ω—ã–º –æ–ø—ã—Ç–æ–º\n"
        "‚Ä¢ –ù–µ –¥–µ–ª–∞–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º–∏\n"
        "‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏ —É–ª—É—á—à–∞–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏"
    )

@hint_router.callback_query(F.data == "hint_settings_info")
async def process_hint_settings_info(callback: CallbackQuery, state: FSMContext):
    """
    Handle request for hint settings information.
    
    Args:
        callback: The callback query
        state: FSM context
    """
    logger.info(f"Hint settings info requested by {callback.from_user.full_name}")
    
    await callback.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫...")
    
    settings_info = _get_hint_settings_info()
    await callback.message.answer(settings_info, parse_mode="HTML")

def _get_hint_settings_info() -> str:
    """
    Get information about hint settings.
    –ù–û–í–û–ï: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫.
    
    Returns:
        str: Formatted settings information
    """
    settings_text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫</b>\n\n"
        
        "–í —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (/settings) –≤—ã –º–æ–∂–µ—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–º —Ç–∏–ø–æ–º –ø–æ–¥—Å–∫–∞–∑–æ–∫:\n\n"
    )
    
    # Add information about each setting
    for setting_key in HINT_SETTING_KEYS:
        setting_name = get_hint_setting_name(setting_key)
        if setting_name:
            settings_text += f"‚Ä¢ <b>{setting_name}</b>\n"
    
    settings_text += (
        "\n<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:</b>\n"
        "‚úÖ –í–∫–ª—é—á–∏—Ç—å - –ø–æ–¥—Å–∫–∞–∑–∫–∏ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è\n"
        "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å - –ø–æ–¥—Å–∫–∞–∑–∫–∏ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –±—É–¥—É—Ç —Å–∫—Ä—ã—Ç—ã\n"
        "üîÑ –ì—Ä—É–ø–ø–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ - –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Å—Ä–∞–∑—É\n\n"
        
        "<b>–ó–∞—á–µ–º –æ—Ç–∫–ª—é—á–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏?</b>\n"
        "‚Ä¢ –ï—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤–∞–º –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç\n"
        "‚Ä¢ –î–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –∏–∑—É—á–µ–Ω–∏—è\n"
        "‚Ä¢ –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–æ –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è\n"
        "‚Ä¢ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–∑—É—á–µ–Ω–∏—è\n\n"
        
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /settings –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–¥—Å–∫–∞–∑–æ–∫."
    )
    
    return settings_text

# –ù–û–í–û–ï: Utility functions for other modules  
async def get_user_hint_preferences(message_or_callback, state: FSMContext) -> dict:
    """
    Get user's hint preferences with fallback.
    –ù–û–í–û–ï: –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º.
    
    Args:
        message_or_callback: Message or CallbackQuery object
        state: FSM context
        
    Returns:
        dict: User's hint preferences or default values
    """
    try:
        return await get_individual_hint_settings(message_or_callback, state)
    except Exception as e:
        logger.warning(f"Could not get hint preferences: {e}")
        # Return default settings if we can't get user preferences
        return {key: True for key in HINT_SETTING_KEYS}

def format_hint_status_summary(hint_settings: dict) -> str:
    """
    Format a brief summary of hint settings status.
    –ù–û–í–û–ï: –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫.
    
    Args:
        hint_settings: User's hint settings
        
    Returns:
        str: Brief status summary
    """
    if not hint_settings:
        return "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    enabled_count = sum(1 for enabled in hint_settings.values() if enabled)
    total_count = len(hint_settings)
    
    if enabled_count == total_count:
        return f"–í—Å–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã ({total_count}/{total_count})"
    elif enabled_count == 0:
        return f"–í—Å–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã (0/{total_count})"
    else:
        return f"–ü–æ–¥—Å–∫–∞–∑–∫–∏: {enabled_count}/{total_count} –≤–∫–ª—é—á–µ–Ω–æ"

# Export router and utilities
__all__ = [
    'hint_router',
    'get_user_hint_preferences',
    'format_hint_status_summary'
]
