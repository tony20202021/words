"""
Handlers for language selection and management in the Language Learning Bot.
These handlers allow users to select languages for learning and administrators to manage languages.
"""

from aiogram import Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.utils.api_utils import get_api_client_from_bot
from app.utils.logger import setup_logger
from app.utils.settings_utils import get_user_language_settings
from app.utils.formatting_utils import format_settings_text
from app.utils.settings_utils import get_user_language_settings

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —è–∑—ã–∫–æ–≤
language_router = Router()

logger = setup_logger(__name__)


async def get_available_languages(api_client):
    """
    Get list of available languages.
    
    Args:
        api_client: API client instance
    
    Returns:
        API response with languages list in result field
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ —á–µ—Ä–µ–∑ API –∫–ª–∏–µ–Ω—Ç
    response = await api_client.get_languages()
    return response


async def get_language_by_id(api_client, language_id):
    """
    Get language by ID.
    
    Args:
        api_client: API client instance
        language_id: Language ID to retrieve
    
    Returns:
        API response with language data in result field
    """
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ ID —á–µ—Ä–µ–∑ API –∫–ª–∏–µ–Ω—Ç
    response = await api_client.get_language(language_id)
    return response


@language_router.message(Command("language"))
async def cmd_language(message: Message, state: FSMContext):
    """
    Handle the /language command which shows available languages.
    
    Args:
        message: The message object from Telegram
    """
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    # –ù–æ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º—ã —Ö–æ—Ç–∏–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_data = await state.get_data()
    await state.set_state(None)
    await state.update_data(**current_data)

    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    logger.info(f"'/language' command from {full_name} ({username})")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã
    api_client = get_api_client_from_bot(message.bot)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    logger.debug("User data: %s", user_data)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—è –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    api_response = await get_available_languages(api_client)

    if not api_response['success']:
        await message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —è–∑—ã–∫–æ–≤: (status={api_response['status']}) error={api_response['error']}"
        )
        return

    languages = api_response['result']
    
    if not languages:
        await message.answer(
            "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤. "
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_language = user_data.get("current_language")
    current_language_id = current_language.get("id") if current_language else None
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —è–∑—ã–∫–∞–º
    db_user_id = user_data.get("db_user_id")
    
    # –ï—Å–ª–∏ –Ω–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–ª—É—á–∏–º –µ–≥–æ –∏–∑ API
    if not db_user_id:
        user_response = await api_client.get_user_by_telegram_id(user_id)
        if user_response['success'] and user_response['result']:
            users = user_response['result']
            user = users[0] if users else None
            if user:
                db_user_id = user.get("id")
                await state.update_data(db_user_id=db_user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ —è–∑—ã–∫–∞–º
    languages_with_progress = []
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    if db_user_id:
        for language in languages:
            lang_id = language.get("id")
            word_count_response = await api_client.get_word_count_by_language(lang_id)
            total_words = word_count_response.get("result", {}).get("count", 0) if word_count_response.get("success") else 0
            
            progress_response = await api_client.get_user_progress(db_user_id, lang_id)
            progress = None
            if progress_response.get("success") and progress_response.get("result"):
                progress = progress_response.get("result")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —è–∑—ã–∫–µ
            lang_data = {
                "id": lang_id,
                "name_ru": language.get("name_ru"),
                "name_foreign": language.get("name_foreign"),
                "total_words": total_words,
                "progress": progress,
                "is_current": lang_id == current_language_id
            }
            languages_with_progress.append(lang_data)

            if (lang_id == current_language_id):
                current_language.update(lang_data)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        for language in languages:
            lang_id = language.get("id")
            word_count_response = await api_client.get_word_count_by_language(lang_id)
            total_words = word_count_response.get("result", {}).get("count", 0) if word_count_response.get("success") else 0
            
            lang_data = {
                "id": lang_id,
                "name_ru": language.get("name_ru"),
                "name_foreign": language.get("name_foreign"),
                "total_words": total_words,
                "progress": None,
                "is_current": lang_id == current_language_id
            }
            languages_with_progress.append(lang_data)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ
    languages_text = ""
    if current_language:
        total_words = current_language.get("total_words", 0)
        progress = current_language.get("progress")
        languages_text += f"üîπ –¢–µ–∫—É—â–∏–π —è–∑—ã–∫: {current_language.get('name_ru')} ({current_language.get('name_foreign')})"
        if progress:
            progress_percentage = progress.get("progress_percentage", 0)
            words_studied = progress.get("words_studied", 0)
            languages_text += f" - –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percentage:.1f}% ({words_studied} –∏–∑—É—á–µ–Ω–æ)"
    
    languages_text += "\n\n"
    languages_text += "üåç –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–∞—Ö –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    for lang in languages_with_progress:
        if not lang.get("is_current"):
            lang_name = lang.get("name_ru")
            lang_name_foreign = lang.get("name_foreign")
            total_words = lang.get("total_words", 0)
            progress = lang.get("progress")
            
            languages_text += f"‚Ä¢ {lang_name} ({lang_name_foreign}) - {total_words} —Å–ª–æ–≤"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if progress:
                progress_percentage = progress.get("progress_percentage", 0)
                words_studied = progress.get("words_studied", 0)
                if words_studied > 0:
                    languages_text += f" - –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percentage:.1f}% ({words_studied} –∏–∑—É—á–µ–Ω–æ)"
            
            languages_text += "\n"
    
    languages_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
    languages_text += "\n\n–î—Ä—É–≥–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    languages_text += "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
    languages_text += "/study - –ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤\n"
    languages_text += "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è\n"
    languages_text += "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
    languages_text += "/start - –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    keyboard_builder = InlineKeyboardBuilder()
    for lang in languages_with_progress:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        button_text = f"{lang['name_ru']} ({lang['name_foreign']})"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–ª–æ–≤
        button_text += f" - {lang['total_words']} —Å–ª."
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
        if lang.get("progress"):
            if lang['progress'].get('words_studied', 0) > 0:
                button_text += f" - {lang['progress'].get('progress_percentage', 0):.1f}%"
        
        keyboard_builder.button(
            text=button_text,
            callback_data=f"lang_select_{lang['id']}"
        )
    keyboard_builder.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
    
    await message.answer(languages_text, reply_markup=keyboard_builder.as_markup())

@language_router.callback_query(F.data.startswith("lang_select_"))
async def process_language_selection(callback: CallbackQuery, state: FSMContext):
    """
    Process language selection callback.
    
    Args:
        callback: The callback query from Telegram
        state: The FSM state context
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    full_name = callback.from_user.full_name

    logger.info(f"'=lang_select_' command from {full_name} ({username})")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç API —Å –ø–æ–º–æ—â—å—é —É—Ç–∏–ª–∏—Ç—ã
    api_client = get_api_client_from_bot(callback.bot)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    logger.debug("User data: %s", user_data)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —è–∑—ã–∫–∞ –∏–∑ callback_data
    language_id = callback.data.split("_")[2]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ –∏—Å–ø–æ–ª—å–∑—É—è –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    language_response = await get_language_by_id(api_client, language_id)
    
    if not language_response['success'] or not language_response['result']:
        await callback.answer("–û—à–∏–±–∫–∞: —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    language = language_response['result']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(current_language=language)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    api_response = await api_client.get_user_by_telegram_id(user_id)
    if not api_response['success']:
        await callback.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É: (status={api_response['status']}) error={api_response['error']}" +
            "/n" +
            "api_response={api_response}"
        )
        return
    
    users = api_response['result']
    user = users[0] if users and len(users) > 0 else None
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if not user:
        user_data = {
            "telegram_id": user_id,
            "username": username,
            "first_name": callback.from_user.first_name,
            "last_name": callback.from_user.last_name
        }
        create_response = await api_client.create_user(user_data)
        if not create_response['success']:
            logger.error(f"Failed to create user with Telegram ID {user_id}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        user = create_response['result']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    db_user_id = user.get("id")
    await state.update_data(db_user_id=db_user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —è–∑—ã–∫—É
    api_response = await api_client.get_user_progress(user["id"], language_id)
    if not api_response['success'] and api_response['status'] == 404:
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ–º 404, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —è–∑—ã–∫–∞
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress = {
            "words_studied": 0,
            "words_known": 0,
            "words_skipped": 0,
            "total_words": 0,
            "progress_percentage": 0
        }
    else:
        progress = api_response['result']
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    settings = await get_user_language_settings(callback, state)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
    await state.update_data(
        start_word=settings.get("start_word", 1),
        skip_marked=settings.get("skip_marked", False),
        use_check_date=settings.get("use_check_date", True),
        show_hints=settings.get("show_hints", True)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–¥—Å–∫–∞–∑–æ–∫
    )

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings_prefix = "‚öôÔ∏è –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —è–∑—ã–∫–∞:\n"
    settings_text = format_settings_text(
        start_word=settings.get("start_word", 1),
        skip_marked=settings.get("skip_marked", False),
        use_check_date=settings.get("use_check_date", True),
        show_hints=settings.get("show_hints", True),
        prefix=settings_prefix
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await callback.message.answer(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —è–∑—ã–∫: <b>{language['name_ru']} ({language['name_foreign']})</b>\n\n"
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç—Ç–æ–º—É —è–∑—ã–∫—É:\n"
        f"- –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {progress.get('words_studied', 0)}\n"
        f"- –ò–∑–≤–µ—Å—Ç–Ω–æ —Å–ª–æ–≤: {progress.get('words_known', 0)}\n"
        f"- –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–ª–æ–≤: {progress.get('words_skipped', 0)}\n"
        f"- –í—Å–µ–≥–æ —Å–ª–æ–≤: {progress.get('total_words', 0)}\n\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress.get('progress_percentage', 0):.1f}%\n\n"
        f"{settings_text}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        f"- –ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /study\n"
        f"- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /settings\n"
        f"- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /stats",
        parse_mode="HTML",
    )    

    await callback.answer()

def register_handlers(dp: Dispatcher):
    """
    Register all language handlers.
    
    Args:
        dp: The dispatcher instance
    """
    # –î–ª—è aiogram 3.x –∏—Å–ø–æ–ª—å–∑—É–µ–º include_router
    dp.include_router(language_router)
