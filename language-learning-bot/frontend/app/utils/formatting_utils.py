"""
Utility functions for formatting.
UPDATED: Support for individual hint settings display.
"""

from datetime import datetime
import locale
from typing import Dict, Any, List, Optional

from app.utils.logger import setup_logger
from app.utils.hint_constants import HINT_SETTING_KEYS, get_hint_setting_name

logger = setup_logger(__name__)

def format_date(date_str):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑ ISO —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
    
    Args:
        date_str: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO –∏–ª–∏ 'N/A'
    
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
    """
    if not date_str or date_str == 'N/A':
        return 'N/A'
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
        try:
            locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
        except locale.Error:
            # –ï—Å–ª–∏ —Ä—É—Å—Å–∫–∞—è –ª–æ–∫–∞–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é
            locale.setlocale(locale.LC_TIME, '')
        
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏, –ø–∞—Ä—Å–∏–º –µ–µ
        if isinstance(date_str, str):
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ISO –¥–∞—Ç—É
            if 'T' in date_str:
                date_part = date_str.split('T')[0]
            else:
                date_part = date_str
                
            date_obj = datetime.strptime(date_part, '%Y-%m-%d')
        else:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç datetime, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
            date_obj = date_str
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –≤–∏–¥–µ "–¥–µ–Ω—å –º–µ—Å—è—Ü –≥–æ–¥"
        # %d - –¥–µ–Ω—å –º–µ—Å—è—Ü–∞, %B - –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞, %Y - –≥–æ–¥ –≤ 4-—Ö –∑–Ω–∞—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        formatted_date = date_obj.strftime('%d %B %Y')
        
        return formatted_date
    except Exception as e:
        logger.error(f"Error formatting date: {e}")
        return str(date_str)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
format_date_standard = format_date

def format_settings_text(
    start_word, 
    skip_marked, 
    use_check_date, 
    show_debug, 
    hint_settings,
    prefix="", 
    suffix=""
):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—É—á–µ–Ω–∏—è.
    
    Args:
        start_word: –ù–æ–º–µ—Ä —Å–ª–æ–≤–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è
        skip_marked: –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –ª–∏ –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        use_check_date: –£—á–∏—Ç—ã–≤–∞—Ç—å –ª–∏ –¥–∞—Ç—É –ø—Ä–æ–≤–µ—Ä–∫–∏
        show_debug: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        hint_settings: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ (–ù–û–í–û–ï)
        prefix: –¢–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        suffix: –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    settings_text = f"{prefix}"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings_text += f"–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ: <b>{start_word}</b>\n"
    
    # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    skip_status = "–ü—Ä–æ–ø—É—Å–∫–∞—Ç—å ‚ùå" if skip_marked else "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å ‚úÖ"
    settings_text += f"–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: <b>{skip_status}</b>\n"
    
    # –°—Ç–∞—Ç—É—Å —É—á–µ—Ç–∞ –¥–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
    date_status = "–£—á–∏—Ç—ã–≤–∞—Ç—å ‚úÖ (–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ª–æ–≤–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –¥–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏)" if use_check_date else "–ù–µ —É—á–∏—Ç—ã–≤–∞—Ç—å ‚ùå (–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)"
    settings_text += f"–ü–µ—Ä–∏–æ–¥ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: <b>{date_status}</b>\n"
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    settings_text += f"üí° <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫:</b>\n"
    
    for setting_key in HINT_SETTING_KEYS:
        setting_name = get_hint_setting_name(setting_key)
        setting_value = hint_settings.get(setting_key, True)
        status = "–í–∫–ª—é—á–µ–Ω–æ ‚úÖ" if setting_value else "–û—Ç–∫–ª—é—á–µ–Ω–æ ‚ùå"
        settings_text += f"   ‚Ä¢ {setting_name}: <b>{status}</b>\n"
    
    # –°—Ç–∞—Ç—É—Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    debug_status = "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å ‚úÖ" if show_debug else "–°–∫—Ä—ã–≤–∞—Ç—å ‚ùå"
    settings_text += f"üîç –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: <b>{debug_status}</b>"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
    if suffix:
        settings_text += suffix
    
    return settings_text

def format_study_word_message(
    language_name_ru, 
    language_name_foreign, 
    word_number, 
    translation, 
    is_skipped, 
    score,
    check_interval, 
    next_check_date,
    score_changed=False,
    show_word=False,
    word_foreign=None,
    transcription=None
):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑—É—á–µ–Ω–∏—è.
    
    Args:
        language_name_ru: –ù–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        language_name_foreign: –ù–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º
        word_number: –ù–æ–º–µ—Ä —Å–ª–æ–≤–∞
        translation: –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞
        is_skipped: –§–ª–∞–≥ –ø—Ä–æ–ø—É—Å–∫–∞ —Å–ª–æ–≤–∞
        check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
        next_check_date: –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        show_word: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Å–∞–º–æ —Å–ª–æ–≤–æ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        word_foreign: –°–ª–æ–≤–æ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        transcription: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–ª–æ–≤–∞
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    message = (
        f"üìù –Ø–∑—ã–∫: \"{language_name_ru} ({language_name_foreign})\":\n\n"
        f"–°–ª–æ–≤–æ –Ω–æ–º–µ—Ä: <b>{word_number}</b>\n\n" 
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ–ø—É—Å–∫–∞ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ
    if is_skipped:
        message += "‚è© <b>–°—Ç–∞—Ç—É—Å: —ç—Ç–æ —Å–ª–æ–≤–æ –ø–æ–º–µ—á–µ–Ω–æ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.</b>\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    if (score == 1):
        if score_changed:
            if check_interval and check_interval > 0:
                message += f"–°–ª–µ–¥—É—é—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {check_interval} (–¥–Ω–µ–π)\n"
            if next_check_date:
                formatted_date = format_date(next_check_date)
                message += f"–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {formatted_date} \n\n" 
        else:
            if (check_interval > 0) or (next_check_date):
                message += f"‚è± –í—ã –∑–Ω–∞–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ:\n"
            if check_interval and check_interval > 0:
                message += f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {check_interval} (–¥–Ω–µ–π)\n"
            if next_check_date:
                formatted_date = format_date(next_check_date)
                message += f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {formatted_date} \n\n" 
    
    message += f"üîç –ü–µ—Ä–µ–≤–æ–¥:\n<b>{translation}</b>\n"
    
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if show_word and word_foreign:
        message += f"\nüìù –°–ª–æ–≤–æ: <code>{word_foreign}</code>\n"
        if transcription:
            message += f"üîä –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <b>[{transcription}]</b>\n"

    return message

from typing import List, Dict, Any, Optional
from aiogram.client.bot import Bot

from app.utils.hint_constants import HINT_ORDER, get_hint_key, get_hint_short
from app.utils.word_data_utils import get_hint_text

async def format_used_hints(
    bot: Bot,
    user_id: str,
    word_id: str,
    current_word: Dict[str, Any],
    used_hints: List[str],
    include_header: bool = True
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ—Ä—è–¥–∫–æ–º HINT_ORDER.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        word_id: ID —Å–ª–æ–≤–∞
        current_word: –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
        used_hints: –°–ø–∏—Å–æ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        include_header: –î–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏"
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
    """
    if not used_hints:
        return ""
    
    result = "\nüìå –ü–æ–¥—Å–∫–∞–∑–∫–∏:\n" if include_header else ""
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ—Ä—è–¥–∫–æ–º HINT_ORDER
    sorted_hints = [hint_type for hint_type in HINT_ORDER if hint_type in used_hints]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ HINT_ORDER
    for hint_type in used_hints:
        if hint_type not in sorted_hints:
            sorted_hints.append(hint_type)
    
    # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
    for active_hint_type in sorted_hints:
        active_hint_key = get_hint_key(active_hint_type)
        active_hint_short = get_hint_short(active_hint_type)        
        
        active_hint_text = await get_hint_text(
            bot, 
            user_id, 
            word_id, 
            active_hint_key, 
            current_word
        )
        
        if active_hint_text:
            result += f"<b>{active_hint_short}:</b>\t{active_hint_text}\n"
    
    return result


# –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫
def format_hint_settings_summary(hint_settings: Dict[str, bool]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫.
    
    Args:
        hint_settings: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        
    Returns:
        str: –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    enabled_count = sum(1 for enabled in hint_settings.values() if enabled)
    total_count = len(hint_settings)
    
    if enabled_count == total_count:
        return "–í—Å–µ –≤–∫–ª—é—á–µ–Ω—ã ‚úÖ"
    elif enabled_count == 0:
        return "–í—Å–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå"
    else:
        return f"{enabled_count} –∏–∑ {total_count} –≤–∫–ª—é—á–µ–Ω–æ üîÑ"

def format_hint_settings_detailed(hint_settings: Dict[str, bool]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫.
    
    Args:
        hint_settings: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        
    Returns:
        str: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    result = "üí° <b>–ü–æ–¥—Ä–æ–±–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫:</b>\n"
    
    for setting_key in HINT_SETTING_KEYS:
        setting_name = get_hint_setting_name(setting_key)
        setting_value = hint_settings.get(setting_key, True)
        status = "‚úÖ" if setting_value else "‚ùå"
        result += f"   {status} {setting_name}\n"
    
    return result

def get_hint_settings_status_text(hint_settings: Dict[str, bool]) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫.
    
    Args:
        hint_settings: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        
    Returns:
        str: –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–Ω–æ–ø–∫–∞—Ö
    """
    enabled_count = sum(1 for enabled in hint_settings.values() if enabled)
    total_count = len(hint_settings)
    
    return f"({enabled_count}/{total_count})"

# –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫
def validate_hint_settings(hint_settings: Dict[str, Any]) -> Dict[str, bool]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫.
    
    Args:
        hint_settings: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ (–º–æ–≥—É—Ç –±—ã—Ç—å –ª—é–±–æ–≥–æ —Ç–∏–ø–∞)
        
    Returns:
        Dict[str, bool]: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –±—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    """
    validated_settings = {}
    
    for setting_key in HINT_SETTING_KEYS:
        value = hint_settings.get(setting_key, True)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫ –±—É–ª–µ–≤–æ–º—É —Ç–∏–ø—É
        if isinstance(value, bool):
            validated_settings[setting_key] = value
        elif isinstance(value, str):
            validated_settings[setting_key] = value.lower() in ('true', '1', 'yes', 'on')
        elif isinstance(value, (int, float)):
            validated_settings[setting_key] = bool(value)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–∞–µ–º
            validated_settings[setting_key] = True
            logger.warning(f"Invalid hint setting value for {setting_key}: {value}, defaulting to True")
    
    return validated_settings
