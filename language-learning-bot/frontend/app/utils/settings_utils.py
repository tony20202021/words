"""
Utility functions for working with user language settings.
"""

from typing import Dict, Any, Optional, Union
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.utils.api_utils import get_api_client_from_bot
from app.utils.logger import setup_logger
from app.utils.error_utils import handle_api_error
from app.utils.formatting_utils import format_settings_text

logger = setup_logger(__name__)

# –ó–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_SETTINGS = {
    "start_word": 1,
    "skip_marked": True,
    "use_check_date": True,
    "show_hints": False  # –ù–æ–≤—ã–π —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
}

async def get_user_language_settings(message_or_callback, state: FSMContext) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞.
    –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    
    Args:
        message_or_callback: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback –æ—Ç Telegram
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        
    Returns:
        Dict —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    bot = message_or_callback.bot if isinstance(message_or_callback, Message) else message_or_callback.bot
    state_data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    db_user_id = state_data.get("db_user_id")
    current_language = state_data.get("current_language", {})
    language_id = current_language.get("id") if current_language else None
    
    if not db_user_id or not language_id:
        logger.warning(f"Missing user_id or language_id in state: user_id={db_user_id}, language_id={language_id}")
        return DEFAULT_SETTINGS.copy()
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
    api_client = get_api_client_from_bot(bot)
    
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ API
        settings_response = await api_client.get_user_language_settings(db_user_id, language_id)
        
        if settings_response["success"] and settings_response["result"]:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
            settings = settings_response["result"]
            
            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
            for key, default_value in DEFAULT_SETTINGS.items():
                if key not in settings:
                    settings[key] = default_value
            
            logger.info(f"Retrieved settings for user {db_user_id}, language {language_id}: {settings}")
            return settings
        else:
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            logger.info(f"Settings not found for user {db_user_id}, language {language_id}, using defaults")
            return DEFAULT_SETTINGS.copy()
    
    except Exception as e:
        logger.error(f"Error getting user language settings: {e}", exc_info=True)
        return DEFAULT_SETTINGS.copy()

async def save_user_language_settings(message_or_callback, state: FSMContext, settings: Dict[str, Any]) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞.
    
    Args:
        message_or_callback: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback –æ—Ç Telegram
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        settings: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    bot = message_or_callback.bot if isinstance(message_or_callback, Message) else message_or_callback.bot
    state_data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    db_user_id = state_data.get("db_user_id")
    current_language = state_data.get("current_language", {})
    language_id = current_language.get("id") if current_language else None
    
    if not db_user_id or not language_id:
        logger.warning(f"Missing user_id or language_id in state: user_id={db_user_id}, language_id={language_id}")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
    api_client = get_api_client_from_bot(bot)
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ API
        settings_response = await api_client.update_user_language_settings(db_user_id, language_id, settings)
        
        if settings_response["success"]:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
            await state.update_data(**settings)
            logger.info(f"Saved settings for user {db_user_id}, language {language_id}: {settings}")
            return True
        else:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –µ—ë –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
            error_msg = settings_response.get("error", "Unknown error")
            logger.error(f"Failed to save settings: {error_msg}")
            
            # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if isinstance(message_or_callback, Message):
                await handle_api_error(
                    settings_response,
                    message_or_callback,
                    "Error saving settings",
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
                )
            
            return False
    
    except Exception as e:
        logger.error(f"Error saving user language settings: {e}", exc_info=True)
        return False

async def display_language_settings(message_or_callback, state: FSMContext, prefix: str = "", suffix: str = "", is_callback: bool = False):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        message_or_callback: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback –æ—Ç Telegram
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        suffix: –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        is_callback: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ —ç—Ç–æ callback
    """
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
    settings = await get_user_language_settings(message_or_callback, state)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    start_word = settings.get("start_word", DEFAULT_SETTINGS["start_word"])
    skip_marked = settings.get("skip_marked", DEFAULT_SETTINGS["skip_marked"])
    use_check_date = settings.get("use_check_date", DEFAULT_SETTINGS["use_check_date"])
    show_hints = settings.get("show_hints", DEFAULT_SETTINGS["show_hints"])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    current_language = state_data.get("current_language", {})
    language_name = current_language.get("name_ru", "–ù–µ –≤—ã–±—Ä–∞–Ω")
    language_name_foreign = current_language.get("name_foreign", "")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —è–∑—ã–∫–µ
    language_info = f"üåê –Ø–∑—ã–∫: {language_name}"
    if language_name_foreign:
        language_info += f" ({language_name_foreign})"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    language_prefix = prefix + language_info + "\n\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è:\n\n"
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
    from app.bot.keyboards.user_keyboards import create_settings_keyboard
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    keyboard = create_settings_keyboard(skip_marked, use_check_date, show_hints)
    
    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Å—É—Ñ—Ñ–∏–∫—Å, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
    if not suffix:
        suffix = (
            "\n\n–î—Ä—É–≥–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/study - –ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤\n"
            "/language - –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —è–∑—ã–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n"
            "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "/hint - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö\n"
            "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/start - –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω"
        )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings_text = format_settings_text(start_word, skip_marked, use_check_date, show_hints,
                                         prefix=language_prefix, suffix=suffix)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    if isinstance(message_or_callback, CallbackQuery):
        # –î–ª—è callback –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_or_callback.message.edit_text(
            settings_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        # –î–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await message_or_callback.answer(
            settings_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
async def get_show_hints_setting(state_or_message, state=None):
    """
    Get show_hints setting from user's state or settings.
    
    Args:
        state_or_message: The state object or message/callback object
        state: Optional state object if state_or_message is a message/callback
        
    Returns:
        bool: True if hints should be shown, False otherwise
    """
    if state is None:
        # state_or_message is the state itself
        state_data = await state_or_message.get_data()
    else:
        # state_or_message is a message/callback and state is provided separately
        state_data = await state.get_data()
    
    # First try to get from user_language_settings
    settings = await get_user_language_settings(state_or_message, state)
    if settings is not None and "show_hints" in settings:
        return settings.get("show_hints", True)
    
    # Fallback to state data
    return state_data.get("show_hints", True)